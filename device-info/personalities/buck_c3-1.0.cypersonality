<?xml version="1.0" encoding="utf-8"?>

<!--****************************************************************************
* \file buck_c3.cypersonality
* \version 1.0
*
* \brief
* Power Conversion personality description file for the buck topology.
*
********************************************************************************
* \copyright
* Copyright 2024 Cypress Semiconductor Corporation
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*****************************************************************************-->

<PersonalityTemplate id="buck" name="Buck" version="1.0" xmlns="http://cypress.com/xsd/cyhwpersonality_v10">
  <VirtualResourceDefinition ipblock="VirtualResource" type="vres">
    <VirtualResourceDefinition type="buck" display_name="Buck Converter $idx" display_path="Power Conversion" display_mode="DYNAMIC" count="4" profile_fileName="pwrconv" />
  </VirtualResourceDefinition>
  <FittingRules>
    <MappingRules>
      <IpBlock name="VirtualResource" />
      <Resource name="vres\.buck" />
    </MappingRules>
    <RoutingRules>
      <Connections>
        <Connection>
          <Port templateId="limTrig" port="tr_level_out[0]"/>
          <Port templateId="cPwm0" port="capture1[0]"/>
          <Port templateId="cPwm1" port="capture1[0]"/>
          <Port templateId="cPwm2" port="capture1[0]"/>
          <Port templateId="cPwm3" port="capture1[0]"/>
          <Port templateId="bPwm0" port="stop[0]"/>
          <Port templateId="bPwm1" port="stop[0]"/>
          <Port templateId="bPwm2" port="stop[0]"/>
          <Port templateId="bPwm3" port="stop[0]"/>
          <Port templateId="hPwm0" port="stop[0]"/>
          <Port templateId="hPwm1" port="stop[0]"/>
          <Port templateId="hPwm2" port="stop[0]"/>
          <Port templateId="hPwm3" port="stop[0]"/>
          <Port templateId="lPwm0" port="stop[0]"/>
          <Port templateId="lPwm1" port="stop[0]"/>
          <Port templateId="lPwm2" port="stop[0]"/>
          <Port templateId="lPwm3" port="stop[0]"/>
        </Connection>

        <Connection>
          <Port templateId="cPwm0" port="tr_out0[0]"/>
          <Port templateId="cPwm0" port="start[0]"/>
          <Port templateId="cPwm1" port="start[0]"/>
          <Port templateId="cPwm2" port="start[0]"/>
          <Port templateId="cPwm3" port="start[0]"/>
          <Port templateId="bPwm0" port="start[0]"/>
          <Port templateId="bPwm1" port="start[0]"/>
          <Port templateId="bPwm2" port="start[0]"/>
          <Port templateId="bPwm3" port="start[0]"/>
        </Connection>
        <Connection>
          <Port templateId="lPwm0" port="tr_out0[0]"/>
          <Port templateId="lPwm0" port="start[0]"/>
          <Port templateId="lPwm1" port="start[0]"/>
          <Port templateId="lPwm2" port="start[0]"/>
          <Port templateId="lPwm3" port="start[0]"/>
        </Connection>
        <Connection>
          <Port templateId="hPwm0" port="tr_out0[0]"/>
          <Port templateId="hPwm0" port="start[0]"/>
          <Port templateId="hPwm1" port="start[0]"/>
          <Port templateId="hPwm2" port="start[0]"/>
          <Port templateId="hPwm3" port="start[0]"/>
        </Connection>

        <Connection>
          <Port templateId="compTrig0" port="tr_level_out[0]"/>
          <Port templateId="cPwm0" port="stop[0]"/>
        </Connection>
        <Connection>
          <Port templateId="compTrig1" port="tr_level_out[0]"/>
          <Port templateId="cPwm1" port="stop[0]"/>
        </Connection>
        <Connection>
          <Port templateId="compTrig2" port="tr_level_out[0]"/>
          <Port templateId="cPwm2" port="stop[0]"/>
        </Connection>
        <Connection>
          <Port templateId="compTrig3" port="tr_level_out[0]"/>
          <Port templateId="cPwm3" port="stop[0]"/>
        </Connection>

        <Connection>
          <Port templateId="cPwm0" port="tr_out1[0]"/>
          <Port templateId="seqInTrig0" port="tr_a_in[0]"/>
        </Connection>
        <Connection>
          <Port templateId="cPwm1" port="tr_out1[0]"/>
          <Port templateId="dacTrig1" port="tr_a_in[0]"/>
        </Connection>
        <Connection>
          <Port templateId="cPwm2" port="tr_out1[0]"/>
          <Port templateId="dacTrig2" port="tr_a_in[0]"/>
        </Connection>
        <Connection>
          <Port templateId="cPwm3" port="tr_out1[0]"/>
          <Port templateId="dacTrig3" port="tr_a_in[0]"/>
        </Connection>

        <Connection>
          <Port templateId="bPwm0" port="tr_out1[0]"/>
          <Port templateId="bTrig0" port="tr_a_in[0]"/>
        </Connection>
        <Connection>
          <Port templateId="bPwm1" port="tr_out1[0]"/>
          <Port templateId="bTrig1" port="tr_a_in[0]"/>
        </Connection>
        <Connection>
          <Port templateId="bPwm2" port="tr_out1[0]"/>
          <Port templateId="bTrig2" port="tr_a_in[0]"/>
        </Connection>
        <Connection>
          <Port templateId="bPwm3" port="tr_out1[0]"/>
          <Port templateId="bTrig3" port="tr_a_in[0]"/>
        </Connection>

        <Connection>
          <Port templateId="lPwm0" port="tr_out1[0]"/>
          <Port templateId="seqInTrig0" port="tr_a_in[0]"/>
        </Connection>
        <Connection>
          <Port templateId="hPwm0" port="tr_out1[0]"/>
          <Port templateId="seqInTrig0" port="tr_a_in[0]"/>
        </Connection>
      </Connections>
    </RoutingRules>
  </FittingRules>
  <ExposedMembers>
    <ExposedMember key="instName" paramId="instName" />
  </ExposedMembers>
  <Parameters>
    <ParamBool id="debug" name="debug" group="Internal" default="false" visible="false" editable="false" desc="" />
    <ParamBool id="debugInternal" name="debugInternal" group="Internal" default="false" visible="`${debug}`" editable="`${debug}`" desc="" />
    <ParamRange id="PersonalityInternalRevision" name="Personality internal revision" group="Internal" default="19" min="0" max="100" resolution="1" visible="`${debugInternal}`" editable="false" desc="" />
    <ParamBool id="lockMode" name="Lock mode" group="Internal" default="false" visible="`${debugInternal}`" editable="true" desc="Locks major parameters to prevent accidental editing" />
    <ParamString id="null" name="null" group="Internal" default="" visible="`${debugInternal}`" editable="false" desc="null string" />

    <ParamRange id="inst" name="inst" group="Internal" default="`${getInstNumber(&quot;buck&quot;)}`" min="0" max="3" resolution="1" visible="`${debugInternal}`" editable="false" desc="" />
    <ParamString id="instName" name="instName" group="Internal" default="`${INST_NAME}`" visible="`${debugInternal}`" editable="false" desc="" />
    <ParamRange id="nextInst" name="nextInst" group="Internal" default="`${inst + 1}`" min="1" max="4" resolution="1" visible="`${debugInternal}`" editable="false" desc="" />
    <ParamString id="nextRsc" name="nextRsc" group="Internal" default="vres[0].buck[`${nextInst}`]" visible="`${debugInternal}`" editable="false" desc="" />
    <ParamBool id="last" name="last" group="Internal" default="`${!(hasBlock(nextRsc) &amp;&amp; isBlockUsed(nextRsc))}`" visible="`${debugInternal}`" editable="false" desc="" />
    <Repeat count="4">
      <ParamBool id="inst$idx" name="inst$idx" group="Internal" default="`${$idx &lt; inst}`" visible="`${debugInternal}`" editable="false" desc="" />
      <ParamString id="instRsc$idx" name="instRsc$idx" group="Internal" default="vres[0].buck[$idx]" visible="`${debugInternal}`" editable="false" desc="" />
      <ParamString id="instName$idx" name="instName$idx" group="Internal" default="`${inst$idx ? getExposedMember(instRsc$idx, &quot;instName&quot;) : &quot;&quot;}`" visible="`${debugInternal}`" editable="false" desc="" />
    </Repeat>

    <!-- Common HW spec -->
    <ParamString id="hppassRsc" name="hppassRsc" group="Internal" default="pass[0]" visible="`${debugInternal}`" editable="false" desc="" />
    <ParamBool id="hppassUsed" name="hppassUsed" group="Internal" default="`${isBlockUsed(hppassRsc)}`" visible="`${debugInternal}`" editable="false" desc="" />
    <ParamString id="hppassInstName" name="hppassInstName" group="Internal" default="`${hppassUsed ? getExposedMember(&quot;pass[0]&quot;, &quot;instName&quot;) : null}`" visible="`${debugInternal}`" editable="false" desc="" />
    <ParamBool id="hppassInit" name="hppassInit" group="Internal" default="`${hppassUsed ? getExposedMember(hppassRsc, &quot;init&quot;) : true}`" visible="`${debugInternal}`" editable="false" desc="" /> <!-- if not used - true, just to do not raise the DRC -->
    <ParamString id="csgRsc" name="csgRsc" group="Internal" default="pass[0].csg[0]" visible="`${debugInternal}`" editable="false" desc="" />
    <ParamBool id="csgUsed" name="csgUsed" group="Internal" default="`${isBlockUsed(csgRsc)}`" visible="`${debugInternal}`" editable="false" desc="" />
    <ParamRange id="csgFreq" name="csgFreq" group="Internal" default="`${csgUsed ? getExposedMember(csgRsc, &quot;clkFreq&quot;) : 0}`" min="0" max="1000000000" resolution="1" visible="`${debugInternal}`" editable="false" desc="" />
    <ParamRange id="DacBits" name="DAC number of bits" group="Internal" default="10" min="1" max="128" resolution="1" visible="`${debugInternal}`" editable="false" desc="" />
    <ParamRange id="AdcBits" name="ADC bits" group="Internal" default="12" min="1" max="32" resolution="1" visible="`${debugInternal}`" editable="false" desc="ADC resolution" />
    <ParamString id="powerRsc" name="powerRsc" group="Internal" default="srss[0].power[0]" visible="`${debugInternal}`" editable="false" desc="" />
    <ParamBool id="powerUsed" name="powerUsed" group="Internal" default="`${isBlockUsed(powerRsc)}`" visible="`${debugInternal}`" editable="false" desc="" />
    <ParamRange id="vddaMv" name="vddaMv" group="Internal" default="`${powerUsed ? getExposedMember(powerRsc, &quot;vddaMv&quot;) : 3300}`" min="1700" max="3600" resolution="1" visible="`${debugInternal}`" editable="false" desc="" />
    <ParamRange id="vddaV" name="vddaV" group="Internal" default="`${vddaMv / 1000.0}`" min="1.7" max="3.6" resolution="0.001" visible="`${debugInternal}`" editable="false" desc="" />

    <!-- Documentation link -->
    <ParamDoc id="pdlDoc" name="Configuration Help" group="Overview" default="file:///`${cy_libs_path()}`/docs/api_reference_manual.html" linkText="Open PwrConv Documentation" visible="true" desc="Opens the Power Conversion Middleware Documentation" />

    <!-- Configurator -->
    <ParamCustom id="configurator" name="Power Conversion Configurator" group="External Tools" default="0" path="`${cy_tools_path(&quot;power-conversion-configurator&quot;) . &quot;/power-conversion-configurator&quot;}`" visible="true" editable="true" desc="Launch the PCC Tool">
      <Arg value="`${&quot;--design=&quot; . cy_design_file()}`" />
      <Arg value="`${&quot;--resource=vres[0].buck[&quot; . getInstNumber(&quot;buck&quot;) . &quot;]&quot;}`" />
    </ParamCustom>

    <!-- Modulator -->
    <ParamBool id="debugMod" name="debugMod" group="Modulator" default="false" visible="`${debug}`" editable="`${debug}`" desc="" />
    <ParamRange id="SwitchingFreq" name="Switching Frequency (Hz)" group="Modulator" default="200000" min="50000" max="2000000" resolution="1000" visible="`${debugMod}`" editable="true" desc="Target switching frequency of power switch operation"/>
    <ParamRange id="swFreq" name="Switching Frequency (Hz)" group="Modulator" default="`${SwitchingFreq}`" min="50000" max="2000000" resolution="1" visible="false" editable="false" desc="Modulator output frequency in Hz" />
    <ParamChoice id="mod" name="Mode" group="Modulator" default="VOLTAGE" visible="true" editable="true" desc="Method to control buck converter output value">
      <Entry  name="Voltage" value="VOLTAGE"  visible="true"/>
      <Entry  name="Peak Current" value="PEAK_CURRENT"  visible="true"/>
    </ParamChoice>
    <ParamRange id="phaseNum" name="Number of phases" group="Modulator" default="1" min="1" max="4" resolution="1" visible="true" editable="true" desc="Number of converter interleaving phases" />
    <ParamRange id="Ts" name="Ts (s)" group="Modulator" default="`${1.0 / swFreq}`" min="0" max="1" resolution="0.000000001" visible="`${debugMod}`" editable="false" desc="" />
    <ParamBool id="vcm" name="vcm" group="Modulator" default="`${mod eq VOLTAGE}`" visible="`${debugMod}`" editable="false" desc="" />
    <ParamBool id="pccm" name="pccm" group="Modulator" default="`${!vcm}`" visible="`${debugMod}`" editable="false" desc="" />
    <ParamBool id="debugPccm" name="pccm" group="Modulator" default="`${pccm &amp;&amp; debugMod}`" visible="`${debugMod}`" editable="false" desc="" />
    <ParamBool id="sync" name="Synchronous" group="Modulator" default="true" visible="`${debugMod}`" editable="false" desc="Synchronous rectification" />
    <ParamBool id="hiRes" name="High resolution" group="Modulator" default="true" visible="`${vcm}`" editable="true" desc="Enable and use PWM high resolution feature" />
    <ParamRange id="hiResK" name="hiResK" group="Modulator" default="`${vcm &amp;&amp; hiRes ? 64 : 1}`" min="1" max="64" resolution="1" visible="`${debugMod}`" editable="false" desc="" />

    <ParamRange id="dutyCycleMin" name="Duty cycle min (%)" group="Modulator" default="0" min="0" max="50" resolution="1" visible="`${debugMod}`" editable="true" desc="Minimum modulation duty cycle" />
    <ParamRange id="dutyCycleMax" name="Duty cycle max (%)" group="Modulator" default="90" min="1" max="100" resolution="1" visible="`${debugMod}`" editable="true" desc="Maximum modulation duty cycle" />
    <ParamRange id="csgBlankTime" name="Blanking time (nsec)" group="Modulator" default="400" min="0" max="1000" resolution="1" visible="`${debugMod &amp;&amp; pccm}`" editable="true" desc="Time period with system-ignored input to avoid switching transient" />

    <!-- Spec -->
    <ParamBool id="debugSpec" name="debugSpec" group="Spec" default="false" visible="`${debug}`" editable="`${debug}`" desc="" />
    <ParamRange id="vInMin" name="Minimal voltage (V)" group="Spec" default="20" min="9" max="800" resolution="0.1" visible="`${debugSpec}`" editable="true" desc="Minimum possible value of buck converter input voltage"/>
    <ParamRange id="vInMax" name="Maximal voltage (V)" group="Spec" default="28" min="9" max="800" resolution="0.1" visible="`${debugSpec}`" editable="true" desc="Maximum possible value of buck converter input voltage"/>
    <ParamRange id="vInNom" name="Nominal voltage (V)" group="Spec" default="24" min="9" max="800" resolution="0.1" visible="`${debugSpec}`" editable="true" desc="Buck converter input voltage"/>
    <ParamRange id="vInRip" name="Ripple voltage" group="Spec" default="3.0" min="0" max="20" resolution="0.5" visible="`${debugSpec}`" editable="true" desc="" />

    <ParamRange id="vOutMin" name="Minimal voltage (V)" group="Spec" default="4" min="2.5" max="240" resolution="0.001" visible="`${debugSpec}`" editable="true" desc="" />
    <ParamRange id="vOutMax" name="Maximal voltage (V)" group="Spec" default="6" min="2.5" max="240" resolution="0.001" visible="`${debugSpec}`" editable="true" desc="" />
    <ParamRange id="vOutNom"    name="Voltage (V)"      group="Spec" default="5" min="2.5" max="240" resolution="0.001" visible="`${debugSpec}`" editable="true" desc="Target buck converter output voltage"/>
    <ParamRange id="vOutPkpk" name="V peak-to-peak" group="Spec" default="1" min="0" max="20" resolution="0.1" visible="`${debugSpec}`" editable="true" desc="Expected peak-to-peak output voltage"/>
    <ParamRange id="vOutOvershoot" name="V overshoot" group="Spec" default="4" min="0" max="20" resolution="0.5" visible="`${debugSpec}`" editable="true" desc="Expected output voltage overshoot"/>

    <ParamRange id="iOutMin" name="Minimal current (A)" group="Spec" default="0.1" min="`${pccm ? 0.1 : 0}`" max="`${10 * phaseNum}`" resolution="0.001" visible="`${debugSpec}`" editable="true" desc="" />
    <ParamRange id="iOutMax" name="Maximal current (A)" group="Spec" default="`${10 * phaseNum}`" min="`${pccm ? 0.1 : 0}`" max="`${10 * phaseNum}`" resolution="0.001" visible="`${debugSpec}`" editable="true" desc="" />
    <ParamRange id="iOutNom" name="Nominal current (A)" group="Spec" default="`${2 * phaseNum}`" min="`${pccm ? 0.1 : 0}`" max="`${10 * phaseNum}`" resolution="0.001" visible="`${debugSpec}`" editable="true" desc="Target buck converter output current" />
    <ParamRange id="iOutPkpk" name="Current peak-to-peak" group="Spec" default="20" min="0" max="50" resolution="0.5" visible="`${debugSpec}`" editable="true" desc="Expected response of peak-to-peak output current to load changes" />
    <ParamRange id="iOutTrans" name="Current transient" group="Spec" default="90" min="0" max="90" resolution="0.5" visible="`${debugSpec}`" editable="true" desc="Expected response of transient output current" />

    <ParamRange id="TimeDelay" name="Time Delay" group="Spec" default="1" min="0" max="10" resolution="0.01" visible="`${debugSpec}`" editable="true" desc="Time expressed in fraction of PWM period to account for inherent delay introduced by digital implementation: from analog sensing to duty cycle update. Such delay is compensated in phase margin determination."/>
    <ParamRange id="Efficiency" name="Efficiency" group="Spec" default="90" min="50" max="100" resolution="1" visible="`${debugSpec}`" editable="true" desc="Expected converter efficiency"/>
    <ParamRange id="PhaseMargin" name="Phase margin" group="Spec" default="50" min="10" max="90" resolution="1" visible="`${debugSpec}`" editable="true" desc="Target phase margin" />
    <ParamRange id="CrossoverFreq" name="Crossover frequency" group="Spec" default="10000" min="2000" max="200000" resolution="1" visible="`${debugSpec}`" editable="true" desc="Target crossover frequency" />

    <!-- Passive components -->
    <ParamRange id="L0Inductance" name="L0 inductance (uH)" group="Passive components" default="33.0" min="0.1" max="1000000" resolution="0.1" visible="`${debugSpec}`" editable="true" desc="Inductance value"/>
    <ParamRange id="Lesr" name="L ESR (mohm)" group="Passive components" default="30" min="0.1" max="1000000" resolution="0.1" visible="`${debugSpec}`" editable="true" desc="Equivalent series resistance of inductor"/>
    <ParamRange id="C0Capacitance" name="C0 capacitance (uF)" group="Passive components" default="440" min="0.1" max="1000000" resolution="0.1" visible="`${debugSpec}`" editable="true" desc="Capacitance value"/>
    <ParamRange id="C0Esr" name="C0 ESR (mohm)" group="Passive components" default="75.0" min="0.1" max="1000000" resolution="0.1" visible="`${debugSpec}`" editable="true" desc="Equivalent series resistance of capacitor"/>
    <ParamRange id="MosfetRdsOn" name="MOSFET RDS on (ohm)" group="Passive components" default="0.012" min="0" max="1000" resolution="0.001" visible="`${debugSpec}`" editable="true" desc="" />
    <ParamRange id="MosfetTrtf" name="MOSFET (tr+tf)(ns)" group="Passive components" default="12.30" min="0" max="1000" resolution="0.001" visible="`${debugSpec}`" editable="true" desc="" />

    <!-- Calculated -->
    <ParamRange id="OutputPower" name="Output power (W)" group="Specification" default="`${vOutNom * iOutNom}`" min="0" max="10000000" resolution="0.01" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="RoMaxLoad" name="Ro max load (ohm)" group="Specification" default="`${vOutNom / iOutNom}`" min="0" max="10000000" resolution="0.000001" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="OutputILAvg" name="Output IL Avg" group="Specification" default="`${vOutNom / RoMaxLoad}`" min="0" max="10000000" resolution="0.01" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="iOutPkpkHelper" name="Output current pk-pk (helper)" group="Specification" default="`${iOutPkpk / 100 * OutputILAvg}`" min="0" max="10000000" resolution="0.01"  visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="iOutTransHelper" name="Output current transient (helper)" group="Specification" default="`${iOutTrans / 100 * iOutNom}`" min="0" max="10000000" resolution="0.01" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="OutputILMin" name="Output IL min" group="Specification" default="`${OutputILAvg - iOutPkpkHelper / 2.0}`" min="0" max="10000" resolution="0.01" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="OutputILMax" name="Output IL max" group="Specification" default="`${OutputILAvg + iOutPkpkHelper / 2.0}`" min="0" max="10000" resolution="0.01" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="OutputILBoundary" name="Output IL boundary" group="Specification" default="`${iOutPkpkHelper / 2.0}`" min="0" max="10000" resolution="0.01" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="vOutOvershootHelper" name="Output voltage overshoot (V)" group="Specification" default="`${vOutOvershoot / 100.0 * vOutNom}`" min="0" max="10000" resolution="0.00001" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="RobMinLoad" name="Rob min load" group="Specification" default="`${vOutNom / OutputILBoundary}`" min="0" max="10000" resolution="0.01" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="SwitchingPeriod" name="Switching period (nsec)" group="Specification" default="`${1000000000.0 / swFreq}`" min="0.01" max="100000" resolution="0.01" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="dutyCycleNom" name="Duty Cycle" group="Specification" default="`${vOutNom / vInNom}`" min="0" max="1" resolution="0.000001" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="vDiff" name="vDiff" group="Specification" default="`${vInNom - vOutNom}`" min="0" max="10000" resolution="0.000001" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="Ton" name="tOn" group="Specification" default="`${SwitchingPeriod * dutyCycleNom}`" min="1" max="100000" resolution="1" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="cDutyCycleMin" name="Duty Cycle min" group="Passive components helper" default="`${vOutNom / vInMin}`" min="0" max="10000" resolution="0.00001" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="cDutyCycleMax" name="Duty Cycle max" group="Passive components helper" default="`${vOutNom / vInMax}`" min="0" max="10000" resolution="0.00001" visible="`${debugSpec}`" editable="false" desc="Max on time configures compare value of HRPWM APP" />
    <ParamRange id="vInRipVNom" name="vInRipVNom" group="Passive components helper" default="`${vInRip * vInNom / 100.0}`" min="0" max="10000" resolution="0.001" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="vInRipVMin" name="vInRipVMin" group="Passive components helper" default="`${vInRip * vInMin / 100.0}`" min="0" max="10000" resolution="0.001" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="vInRipVMax" name="vInRipVMax" group="Passive components helper" default="`${vInRip * vInMax / 100.0}`" min="0" max="10000" resolution="0.001" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="iInductorRmsRec" name="iInductorRms recommended" group="Passive components" default="`${sqrt(iOutNom * iOutNom + iOutPkpkHelper * iOutPkpkHelper / 12)}`" min="0.01" max="100000" resolution="0.001" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="mosfetLossConVNom" name="mosfetLossConVNom" group="Passive components helper" default="`${OutputILAvg * OutputILAvg * MosfetRdsOn * dutyCycleNom}`" min="0.001" max="100000" resolution="0.001" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="mosfetLossConVMin" name="mosfetLossConVMin" group="Passive components helper" default="`${OutputILAvg * OutputILAvg * MosfetRdsOn * cDutyCycleMin}`" min="0.001" max="100000" resolution="0.001" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="mosfetLossConVMax" name="mosfetLossConVMax" group="Passive components helper" default="`${OutputILAvg * OutputILAvg * MosfetRdsOn * cDutyCycleMax}`" min="0.001" max="100000" resolution="0.001" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="mosfetLossSwVNom" name="mosfetLossSwVNom" group="Passive components helper" default="`${0.5 * vInNom * iOutNom * MosfetTrtf * swFreq * 1e-9}`" min="0.001" max="100000" resolution="0.001" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="mosfetLossSwVMin" name="mosfetLossSwVMin" group="Passive components helper" default="`${0.5 * vInMin * iOutNom * MosfetTrtf * swFreq * 1e-9}`" min="0.001" max="100000" resolution="0.001" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="mosfetLossSwVMax" name="mosfetLossSwVMax" group="Passive components helper" default="`${0.5 * vInMax * iOutNom * MosfetTrtf * swFreq * 1e-9}`" min="0.001" max="100000" resolution="0.001" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="powerInductorLoss" name="powerInductorLoss" group="Passive components" default="`${iInductorRmsRec * iInductorRmsRec * Lesr * 1e-3}`" min="0.0001" max="100000" resolution="0.001" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="powerOutputCapacitorLoss" name="powerOutputCapacitorLoss" group="Passive components" default="`${iOutPkpkHelper / sqrt(12) * iOutPkpkHelper / sqrt(12) * C0Esr * 1e-3}`" min="0.0000001" max="1000" resolution="0.0000001" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="powerMosfetConductionLoss" name="powerMosfetConductionLoss" group="Passive components" default="`${max(max(mosfetLossConVNom, mosfetLossConVMin), mosfetLossConVMax)}`" min="0.001" max="100000" resolution="0.001" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="powerMosfetSwitchingLoss" name="powerMosfetSwitchingLoss" group="Passive components" default="`${max(max(mosfetLossSwVNom, mosfetLossSwVMin), mosfetLossSwVMax)}`" min="0.01" max="100000" resolution="0.001" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="totalLossesActual" name="totalLossesActual" group="Passive components" default="`${powerInductorLoss + powerOutputCapacitorLoss + 2 * (powerMosfetConductionLoss + powerMosfetSwitchingLoss)}`" min="0.01" max="100000" resolution="0.001" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="efficiencyActual" name="efficiencyActual" group="Passive components" default="`${OutputPower / (OutputPower + totalLossesActual)}`" min="0.01" max="100000" resolution="0.001" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="voutDeltaOvershootActual" name="voutDeltaOvershootActual" group="Passive components" default="`${L0Inductance * iOutTransHelper * iOutTransHelper / (2 * C0Capacitance * vOutNom)}`" min="0.01" max="100000" resolution="0.001" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="voutDeltaUndershootActual" name="voutDeltaUndershootActual" group="Passive components" default="`${L0Inductance * iOutTransHelper * iOutTransHelper / (2 * C0Capacitance * dutyCycleNom * vDiff)}`" min="0.01" max="100000" resolution="0.001" visible="`${debugSpec}`" editable="false" desc="" />
    <ParamRange id="voutDeltaRipplePkpkActual" name="voutDeltaRipplePkpkActual" group="Passive components" default="`${iOutPkpkHelper * C0Esr * 1e-3 + iOutPkpkHelper / (8 * 1e-6 * C0Capacitance * swFreq)}`" min="0.01" max="100000" resolution="0.001" visible="`${debugSpec}`" editable="false" desc="" />

    <!-- Controller -->
    <ParamBool id="debugController" name="debugController" group="Controller" default="false" visible="`${debug}`" editable="`${debug}`" desc="" />
    <ParamBool id="fastIsr" name="Call the Fast Control Loop Process by the ADC ISR" group="Controller" default="true" visible="`${debugController}`" editable="false" desc="When checked, the ADC ISR with the `${INST_NAME}`_Process function call is automatically generated and registered in the interrupt controller ISR, when unchecked - user could call the `${INST_NAME}`_Process function wherever" />
    <ParamBool id="slowIsr" name="Call the Slow Control Loop Process by the Slow Task Timer ISR" group="Controller" default="true" visible="`${debugController}`" editable="false" desc="When checked, the ADC ISR with the `${INST_NAME}`_Process function call is automatically generated and registered in the interrupt controller ISR, when unchecked - user could call the `${INST_NAME}`_Process function wherever" />
    <ParamBool id="dma" name="Use DMA" group="Controller" default="false" visible="`${debugController}`" editable="false" desc="Use DMA to data transfer between HW peripherals and the mtb_stc_pwrconv_ctx_t structure" />
    <ParamBool id="ram" name="RAM Control Loop" group="Controller" default="false" visible="`${debugController}`" editable="true" desc="Run Control Loop in RAM" />
    <ParamRange id="Trg" name="Ramp update period (ms)" group="Controller" default="10" min="1" max="50" resolution="1" visible="`${debugController}`" editable="true" desc="Required period of ramp generator function execution"/>
    <ParamRange id="Srg" name="Ramp slope (mUnits/ms)" group="Controller" default="1" min="1" max="1000" resolution="1" visible="`${debugController}`" editable="true" desc="Maximal speed of reference value changing during time"/>
    <ParamBool id="softStart" name="Enable soft start" group="Controller" default="false" visible="`${debugController}`" editable="false" desc="Enable soft start (e.g. linear ramp of controlled value from 0 to target one)"/>
    <ParamRange id="softStartTime" name="Soft start time (ms)" group="Controller" default="5000" min="1" max="10000" resolution="1" visible="`${debugController &amp;&amp; softStart}`" editable="true" desc="Required time for controlled value to ramp from 0 to target one"/>
    <ParamBool id="ctrLoop" name="Enable control loop" group="Controller" default="true" visible="`${debugController}`" editable="true" desc="Enable" />
    <ParamString id="regulator" name="regulator" group="Controller" default="`${!ctrLoop ? &quot;MTB_PWRCONV_CUSTOM&quot; : pccm ? &quot;MTB_PWRCONV_2P2Z&quot; : &quot;MTB_PWRCONV_3P3Z&quot;}`" visible="`${debugController}`" editable="false" desc="" />
    <ParamBool id="reg2" name="reg2" group="Controller" default="`${regulator eq &quot;MTB_PWRCONV_2P2Z&quot;}`" visible="`${debugController}`" editable="false" desc="" />
    <ParamBool id="reg3" name="reg3" group="Controller" default="`${regulator eq &quot;MTB_PWRCONV_3P3Z&quot;}`" visible="`${debugController}`" editable="false" desc="" />
    <ParamBool id="float" name="float" group="Controller" default="true" visible="`${debugController}`" editable="false" desc="" />
    <ParamRange id="fastDiv" name="Fast Control Loop frequency divider" group="Controller" default="1" min="1" max="255" resolution="1" visible="`${debugController}`" editable="false" desc="Number of switching periods before executing one control loop"/>
    <ParamRange id="slowDiv" name="Slow Control Loop frequency divider" group="Controller" default="1" min="1" max="255" resolution="1" visible="`${debugController}`" editable="false" desc="" />
    <ParamRange id="SamplFreq" name="Converter sampling frequency (Hz)" group="Controller" default="`${swFreq / fastDiv}`" min="50000" max="2000000" resolution="1" visible="`${debugController}`" editable="false" desc="" />
    <ParamRange id="CurSenseGain" name="Current sensing gain (V/A)" group="Modulator" default="1" min="0.001" max="100" resolution="0.001" visible="`${debugPccm}`" editable="true" desc="Equivalent transducer gain to transform current to voltage (e.g. shunt resistance in ohms)"/>
    <!-- <ParamRange id="AmtRampToAdd" name="Amount of Ramp to add (V)" group="Specification" default="`${(dutyCycleNom - 0.1817) * ((vInNom * CurSenseGain) / (L0Inductance * 1e-6 * swFreq))}`" min="-1000000" max="1000000" resolution="0.00000001" visible="true" editable="false" desc="Calculated value of ramp to add based on output voltage" /> -->

    <ParamChoice id="compMod" name="Compensation parameters mode" group="Controller" default="AUTO" visible="`${debugController}`" editable="true" desc="">
      <Entry name="Auto" value="AUTO" visible="true"/>
      <Entry name="Manual" value="MANUAL" visible="true"/>
    </ParamChoice>
    <ParamBool id="aut" name="aut" group="Controller" default="`${compMod eq AUTO}`" visible="`${debugController}`" editable="false" desc="" />

    <!-- DAC settings -->
    <ParamChoice id="slopeMod" name="Slope mode" group="Modulator/DAC" default="STAB" visible="`${debugPccm}`" editable="true" desc="Select DAC slope type (precalculated or custom)">
      <Entry name="Stable"      value="STAB" visible="true"/>
      <Entry name="Responsive"  value="RESP" visible="true"/>
      <Entry name="Custom"      value="CUST" visible="true"/>
    </ParamChoice>
    <ParamRange id="stabSlope"   name="Stability Slope (mV/usec)"    group="Modulator/DAC" default="`${1e3 * CurSenseGain * vOutNom / L0Inductance}`" min="0" max="1000000" resolution="0.001"                           visible="`${debugPccm}`" editable="false" desc="Alternative calculated value of ramp to add, for improved stability purposes" />
    <ParamRange id="respSlope"   name="Responsive Slope (mV/usec)"   group="Modulator/DAC" default="`${pccm ? 1e3 * (dutyCycleNom - 0.1817) * CurSenseGain * vInNom / L0Inductance : 0}`" min="0" max="1000000" resolution="0.001"  visible="`${debugPccm}`" editable="false" desc="Calculated value of compensation ramp" />
    <ParamRange id="customSlope" name="Custom Slope (mV/usec)"       group="Modulator/DAC" default="`${RESP eq slopeMod ? -respSlope : -stabSlope}`" min="-3300" max="0" resolution="0.001"                              visible="`${debugPccm}`" editable="`${CUST eq slopeMod}`" desc="DAC slope custom value" />
    <ParamBool  id="dacBuff"     name="dacBuff"                      group="Modulator/DAC" default="`${slopeMod eq CUST &amp;&amp; customSlope == 0}`"                                                                   visible="`${debugPccm}`" editable="false" desc="" />
    <ParamRange id="slope"       name="Slope (mV/usec)"              group="Modulator/DAC" default="`${CUST eq slopeMod ? -customSlope : RESP eq slopeMod ? respSlope : stabSlope}`" min="0" max="1000000" resolution="0.001" visible="`${debugPccm}`" editable="false" desc="" />
    <ParamRange id="dacStep"     name="dacStep (mV)"                 group="Modulator/DAC" default="`${vddaV * 1e3 / pow(2, DacBits)}`" min="1" max="10" resolution="0.000001"                                           visible="`${debugPccm}`" editable="false" desc="" />
    <ParamRange id="uSlope"      name="Unity Slope (mV/usec)"        group="Modulator/DAC" default="`${dacStep * 1e-6 * csgFreq}`" min="0" max="1000000" resolution="0.000001"                                           visible="`${debugPccm}`" editable="false" desc="" />
    <ParamRange id="slopeRatio"  name="slopeRatio"                   group="Modulator/DAC" default="`${csgFreq != 0 &amp;&amp; !dacBuff ? uSlope / slope : 1}`" min="0" max="`${pow(2, DacBits) - 1}`" resolution="0.000001"               visible="`${debugPccm}`" editable="false" desc="" />
    <ParamRange id="slopeStep"   name="Slope Step"                   group="Modulator/DAC" default="`${ceil(1.0 / slopeRatio)}`" min="1" max="`${pow(2, DacBits) - 1}`" resolution="1"                                   visible="`${pccm}`"      editable="false" desc="Slope step in DAC counts" />
    <ParamRange id="dutyCycle"   name="dutyCycle"                    group="Modulator/DAC" default="`${1e-2 * dutyCycleMax}`" min="0" max="1" resolution="0.000001"                                                      visible="`${debugPccm}`" editable="false" desc="" />
    <ParamRange id="dacRatio"    name="dacRatio"                     group="Modulator/DAC" default="`${slopeRatio * slopeStep}`" min="0" max="`${pow(2, DacBits) - 1}`" resolution="0.000001"                            visible="`${debugPccm}`" editable="false" desc="" />
    <ParamRange id="dacDivIntg"  name="dacDivIntg"                   group="Modulator/DAC" default="`${((ceil(dacRatio) - dacRatio) &gt; 1.0/64) ? floor(dacRatio) : ceil(dacRatio)}`" min="0" max="4096" resolution="1" visible="`${debugPccm}`" editable="false" desc="" />
    <ParamRange id="dacDivFrac"  name="dacDivFrac"                   group="Modulator/DAC" default="`${(floor(dacRatio) eq dacDivIntg) ? 32.0 * (dacRatio - dacDivIntg) : 0}`" min="0" max="31" resolution="1"           visible="`${debugPccm}`" editable="false" desc="" />
    <ParamRange id="dacDiv"      name="dacDiv"                       group="Modulator/DAC" default="`${dacDivIntg + dacDivFrac / 32.0}`" min="0" max="4096.96875" resolution="0.00005"                                   visible="`${debugPccm}`" editable="false" desc="" />
    <ParamRange id="dacUpdClk"   name="Update clock (Hz)"            group="Modulator/DAC" default="`${(dacDiv != 0) ? csgFreq / dacDiv : 0}`" min="0" max="1000000000" resolution="1"                                   visible="`${pccm}`"      editable="false" desc="The DAC update clock" />
    <ParamRange id="slopeTime"   name="slopeTime"                    group="Modulator/DAC" default="`${1e6 * dutyCycle / swFreq}`" min="0.1" max="`${1e6 / swFreq}`" resolution="0.000001"                               visible="`${debugPccm}`" editable="false" desc="" />
    <ParamRange id="dacUpdCnt"   name="dacUpdCnt"                    group="Modulator/DAC" default="`${ceil(1e-6 * slopeTime * dacUpdClk)}`" min="0" max="1000" resolution="1"                                           visible="`${debugPccm}`" editable="false" desc="" />
    <ParamRange id="slopeDelta"  name="slopeDelta"                   group="Modulator/DAC" default="`${dacUpdCnt * slopeStep}`" min="0" max="`${pow(2, DacBits) - 1}`" resolution="1"                                    visible="`${debugPccm}`" editable="false" desc="" />
    <ParamRange id="dacStartMin" name="dacStartMin"                  group="Modulator/DAC" default="39" min="1" max="`${pow(2, DacBits) - 1}`" resolution="1"                                                            visible="`${debugPccm}`" editable="false" desc="" />
    <ParamRange id="dacStopMin"  name="dacStopMin"                   group="Modulator/DAC" default="30" min="1" max="`${pow(2, DacBits) - 1}`" resolution="1"                                                            visible="`${debugPccm}`" editable="false" desc="" />

    <!-- Controller calculated -->
    <ParamBool id="manualCompensRamp" name="Enable manual Compensation Ramp" group="Controller" default="false" visible="`${debugController}`" editable="true" desc="Enable editing Compensation Ramp value" />
    <ParamRange id="CompensRamp" name="Compensation Ramp (mV/usec)" group="Controller" default="`${(1 + (slope * L0Inductance * 1e-3 / (vDiff * CurSenseGain))) * 1000}`" min="0" max="1000000" resolution="0.1" visible="`${debugController}`" editable="`${manualCompensRamp}`" desc="Calculated value of compensation ramp" />
    <ParamString id="pcc_solver_actual" name="pcc_solver_actual" group="Controller" default="`${runTcl(&quot;buck-1.0.tcl&quot;, mod, vInNom, vOutNom, iOutNom / phaseNum, TimeDelay, swFreq, CrossoverFreq, RoMaxLoad * phaseNum, PhaseMargin, CurSenseGain, CompensRamp, SamplFreq, L0Inductance, C0Capacitance / phaseNum, C0Esr * phaseNum, Lesr)}`" visible="`${debugController}`" editable="false" desc="Calculate poles and zeros" />
    <ParamString id="result" name="result" group="Controller" default="`${getTclVar(&quot;result&quot;, pcc_solver_actual)}`" visible="`${debugController}`" editable="false" desc="Calculate poles and zeros" />

    <ParamRange id="wP0A" name="wPole 0 (rad/s)" group="Controller" default="`${getTclVar(&quot;wPole0&quot;, pcc_solver_actual)}`" min="0" max="1000000000" resolution="0.001" visible="`${debugController}`" editable="false" desc="" />
    <ParamRange id="wP1A" name="wPole 1 (rad/s)" group="Controller" default="`${getTclVar(&quot;wPole1&quot;, pcc_solver_actual)}`" min="0" max="1000000000" resolution="0.001" visible="`${debugController}`" editable="false" desc="" />
    <ParamRange id="wP2A" name="wPole 2 (rad/s)" group="Controller" default="`${getTclVar(&quot;wPole2&quot;, pcc_solver_actual)}`" min="0" max="1000000000" resolution="0.001" visible="`${debugController}`" editable="false" desc="" />
    <ParamRange id="wZ1A" name="wZero 1 (rad/s)" group="Controller" default="`${getTclVar(&quot;wZero1&quot;, pcc_solver_actual)}`" min="0" max="1000000000" resolution="0.001" visible="`${debugController}`" editable="false" desc="" />
    <ParamRange id="wZ2A" name="wZero 2 (rad/s)" group="Controller" default="`${getTclVar(&quot;wZero2&quot;, pcc_solver_actual)}`" min="0" max="1000000000" resolution="0.001" visible="`${debugController}`" editable="false" desc="" />

    <ParamRange id="Pole0Auto" name="Pole 0 (Hz)" group="Controller" default="`${wP0A / (2 * PI)}`" min="0" max="1000000000" resolution="0.001" visible="`${debugController}`" editable="false" desc="Calculated location in frequency domain to locate Pole 0"/>
    <ParamRange id="Pole1Auto" name="Pole 1 (Hz)" group="Controller" default="`${wP1A / (2 * PI)}`" min="0" max="1000000000" resolution="0.001" visible="`${debugController}`" editable="false" desc="Calculated location in frequency domain to locate Pole 1"/>
    <ParamRange id="Pole2Auto" name="Pole 2 (Hz)" group="Controller" default="`${wP2A / (2 * PI)}`" min="0" max="1000000000" resolution="0.001" visible="`${debugController}`" editable="false" desc="Calculated location in frequency domain to locate Pole 2"/>
    <ParamRange id="Zero1Auto" name="Zero 1 (Hz)" group="Controller" default="`${wZ1A / (2 * PI)}`" min="0" max="1000000000" resolution="0.001" visible="`${debugController}`" editable="false" desc="Calculated location in frequency domain to locate Zero 1"/>
    <ParamRange id="Zero2Auto" name="Zero 2 (Hz)" group="Controller" default="`${wZ2A / (2 * PI)}`" min="0" max="1000000000" resolution="0.001" visible="`${debugController}`" editable="false" desc="Calculated location in frequency domain to locate Zero 2"/>

    <ParamRange id="Pole0Manual" name="Pole 0 (Hz)" group="Controller" default="`${Pole0Auto}`" min="0" max="1000000000" resolution="0.001" visible="`${debugController}`" editable="`${!aut}`" desc="User-specified location in frequency domain to locate Pole 0"/>
    <ParamRange id="Pole1Manual" name="Pole 1 (Hz)" group="Controller" default="`${Pole1Auto}`" min="0" max="1000000000" resolution="0.001" visible="`${debugController}`" editable="`${!aut}`" desc="User-specified location in frequency domain to locate Pole 1"/>
    <ParamRange id="Pole2Manual" name="Pole 2 (Hz)" group="Controller" default="`${vcm ? Pole2Auto : 0}`" min="0" max="1000000000" resolution="0.001" visible="`${debugController}`" editable="`${(!aut) &amp;&amp; vcm}`" desc="User-specified location in frequency domain to locate Pole 2"/>
    <ParamRange id="Zero1Manual" name="Zero 1 (Hz)" group="Controller" default="`${Zero1Auto}`" min="0" max="1000000000" resolution="0.001" visible="`${debugController}`" editable="`${!aut}`" desc="User-specified location in frequency domain to locate Zero 1" />
    <ParamRange id="Zero2Manual" name="Zero 2 (Hz)" group="Controller" default="`${vcm ? Zero2Auto : 0}`" min="0" max="1000000000" resolution="0.001" visible="`${debugController}`" editable="`${(!aut) &amp;&amp; vcm}`" desc="User-specified location in frequency domain to locate Zero 2" />

    <ParamRange id="wP0M" name="wPole 0 (rad/s)" group="Controller" default="`${2 * PI * Pole0Manual}`" min="0" max="1000000000" resolution="0.001" visible="`${debugController}`" editable="false" desc="" />
    <ParamRange id="wP1M" name="wPole 1 (rad/s)" group="Controller" default="`${2 * PI * Pole1Manual}`" min="0" max="1000000000" resolution="0.001" visible="`${debugController}`" editable="false" desc="" />
    <ParamRange id="wP2M" name="wPole 2 (rad/s)" group="Controller" default="`${2 * PI * Pole2Manual}`" min="0" max="1000000000" resolution="0.001" visible="`${debugController}`" editable="false" desc="" />
    <ParamRange id="wZ1M" name="wZero 1 (rad/s)" group="Controller" default="`${2 * PI * Zero1Manual}`" min="0" max="1000000000" resolution="0.001" visible="`${debugController}`" editable="false" desc="" />
    <ParamRange id="wZ2M" name="wZero 2 (rad/s)" group="Controller" default="`${2 * PI * Zero2Manual}`" min="0" max="1000000000" resolution="0.001" visible="`${debugController}`" editable="false" desc="" />

    <!-- ADC -->
    <ParamBool id="debugAdc" name="debugAdc" group="ADC" default="false" visible="`${debug}`" editable="`${debug}`" desc="" />
    <ParamRange id="chanCnt" name="chanCnt" group="ADC" default="2" min="1" max="16" resolution="1" visible="`${debugAdc}`" editable="true" desc="" />
    <ParamString id="adcRsc" name="adcRsc" group="ADC" default="pass[0].sar[0]" visible="`${debugAdc}`" editable="false" desc="" />
    <ParamBool id="adcUsed" name="adcUsed" group="ADC" default="`${isBlockUsed(adcRsc)}`" visible="`${debugAdc}`" editable="false" desc="" />
    <ParamRange id="vRefMv" name="Reference Voltage (mV)" group="ADC" default="`${(adcUsed ? getExposedMember(adcRsc, &quot;vRefMv&quot;) : 0)}`" min="`${(adcUsed ? 1700 : 0)}`" max="3600" resolution="1" visible="true" editable="false" desc="The ADC reference voltage" />
    <ParamRange id="vRefV" name="Reference Voltage (V)" group="ADC" default="`${vRefMv / 1000.0}`" min="`${(adcUsed ? 1.7 : 0)}`" max="3.6" resolution="0.001" visible="`${debugAdc}`" editable="false" desc="The ADC reference voltage" />

    <!-- Channels -->
    <Repeat count="16">
      <ParamBool id="chan$idx" name="chan$idx" group="ADC/Channel $idx" default="`${$idx &lt; chanCnt}`" visible="`${debugAdc &amp;&amp; ($idx &lt; chanCnt)}`" editable="false" desc="" />
      <ParamRange templateId="chan$idx" id="chanInst$idx" name="chanInst$idx" group="ADC/Channel $idx" default="`${getInstNumber(&quot;ch&quot;)}`" min="0" max="27" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="" />
      <ParamString templateId="chan$idx" id="sampType" name="sampType" group="ADC/Channel $idx" default="`${(chanInst$idx &gt;= 12) ? &quot;Muxed&quot; : &quot;Direct&quot;}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="" />
      <ParamRange templateId="chan$idx" id="sampInst" name="sampInst" group="ADC/Channel $idx" default="`${(chanInst$idx &gt;= 12) ? (chanInst$idx - 12)/4 : chanInst$idx}`" min="0" max="11" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="" />
      <ParamRange templateId="chan$idx" id="sampMux" name="sampMux" group="ADC/Channel $idx" default="`${(chanInst$idx &gt;= 12) ? (chanInst$idx - 12)%4 : 0}`" min="0" max="11" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="" />
      <ParamString templateId="chan$idx" id="sampRsc" name="sampRsc" group="ADC/Channel $idx" default="pass[0].sar[0].`${(chanInst$idx &gt;= 12) ? &quot;muxed_sampler[&quot; . sampInst . &quot;]&quot; : &quot;dir_sampler[&quot; . sampInst . &quot;]&quot;}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="" />
      <ParamBool templateId="chan$idx" id="sampUsed" name="sampUsed" group="ADC/Channel $idx" default="`${isBlockUsed(sampRsc)}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="" />
      <ParamString templateId="chan$idx" id="sampGain" name="sampGain" group="ADC/Channel $idx" default="`${sampUsed ? getExposedMember(sampRsc, &quot;gain&quot;) : &quot;CY_HPPASS_SAR_SAMP_GAIN_1&quot;}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="" />
      <ParamRange templateId="chan$idx" id="sampGainNum" name="sampGainNum" group="ADC/Channel $idx"
                  default="`${(sampGain eq &quot;CY_HPPASS_SAR_SAMP_GAIN_3&quot;) ? 3 :
                              (sampGain eq &quot;CY_HPPASS_SAR_SAMP_GAIN_6&quot;) ? 6 :
                              (sampGain eq &quot;CY_HPPASS_SAR_SAMP_GAIN_12&quot;) ? 12 : 1}`" min="1" max="12" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="" />
      <ParamRange id="inGain$idx" name="inGain$idx" group="ADC/Channel $idx" default="`${chan$idx ? getParamValue(makeId(&quot;chan$idx&quot;, &quot;sampGainNum&quot;)) : 1}`" min="1" max="12" resolution="1" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="false" desc="" />
      <ParamBool id="first$idx" name="first$idx" group="ADC/Channel $idx" default="`${0 == $idx}`" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="false" desc="" />
      <ParamString id="chanNameDef$idx" name="chanNameDef$idx" group="ADC/Channel $idx" default="`${(first$idx &amp;&amp; ctrLoop) ? &quot;Vout&quot; : &quot;Channel_&quot; . $idx}`" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="false" desc=""/>
      <ParamString id="chanName$idx" name="chanName$idx" group="ADC/Channel $idx" default="`${chanNameDef$idx}`" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="`${chan$idx &amp;&amp; (!first$idx || !ctrLoop)}`" desc="Channel name – represents channel role in power converter"/>
      <ParamBool id="chanNameOk$idx" name="chanNameOk$idx" group="ADC/Channel $idx" default="`${hasMatch(chanName$idx, &quot;(^[_]+[0-9a-zA-Z]|^[a-zA-Z])[0-9a-zA-Z_]*$&quot;)}`" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="false" desc="" />
      <ParamRange id="exGain$idx" name="External Gain" group="ADC/Channel $idx" default="`${first$idx ? 0.2 : 1}`" min="0.001" max="100" resolution="0.00001" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="`${chan$idx}`" desc="Hardware gain or divider ratio or current sensing ratio (A/V) for `${chanName$idx}` channel"/>
      <ParamRange id="txCoef$idx" name="Transfer from Si-Units to counts coefficient" group="ADC/Channel $idx" default="`${exGain$idx * inGain$idx * pow(2, AdcBits) / vRefV}`" min="0" max="1000000" resolution="0.001" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="false" desc="" />
      <ParamChoice id="trigSrc$idx" name="Trigger Source" group="ADC/Channel $idx" default="CTRLOOP" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="`${chan$idx}`" desc="ADC Group membership of channel">
        <Entry name="Control loop" value="CTRLOOP" visible="true"/>
        <Entry name="Scheduled" value="SCHEDULED" visible="true"/>
        <!-- <Entry name="Background" value="BACKGROUND" visible="true"/> -->
      </ParamChoice>
      <ParamBool id="prio$idx" name="prio$idx" group="ADC/Channel $idx" default="`${trigSrc$idx eq CTRLOOP}`" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="false" desc="" />
      <ParamBool id="seq0dirSamp$idx" name="seq0dirSamp$idx" group="ADC/Channel $idx" default="`${chan$idx &amp;&amp; prio$idx &amp;&amp; (getParamValue(makeId(&quot;chan$idx&quot;, &quot;sampType&quot;)) eq &quot;Direct&quot;)}`" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="false" desc="" />
      <ParamRange id="seq0dirSamp$idxMsk" name="seq0dirSamp$idxMsk" group="ADC/Channel $idx" default="`${seq0dirSamp$idx ? (1 &lt;&lt; getParamValue(makeId(&quot;chan$idx&quot;, &quot;sampInst&quot;))) : 0}`" min="0" max="4095" resolution="1" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="false" desc="" />
      <ParamBool id="seq0muxSamp$idx" name="seq0muxSamp$idx" group="ADC/Channel $idx" default="`${chan$idx &amp;&amp; prio$idx &amp;&amp; (getParamValue(makeId(&quot;chan$idx&quot;, &quot;sampType&quot;)) eq &quot;Muxed&quot;)}`" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="false" desc="" />
      <ParamRange id="seq0muxSamp$idxMsk" name="seq0muxSamp$idxMsk" group="ADC/Channel $idx" default="`${seq0muxSamp$idx ? (1 &lt;&lt; getParamValue(makeId(&quot;chan$idx&quot;, &quot;sampInst&quot;))) : 0}`" min="0" max="15" resolution="1" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="false" desc="" />
      <ParamBool id="seq1dirSamp$idx" name="seq1dirSamp$idx" group="ADC/Channel $idx" default="`${chan$idx &amp;&amp; !prio$idx &amp;&amp; (getParamValue(makeId(&quot;chan$idx&quot;, &quot;sampType&quot;)) eq &quot;Direct&quot;)}`" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="false" desc="" />
      <ParamRange id="seq1dirSamp$idxMsk" name="seq1dirSamp$idxMsk" group="ADC/Channel $idx" default="`${seq1dirSamp$idx ? (1 &lt;&lt; getParamValue(makeId(&quot;chan$idx&quot;, &quot;sampInst&quot;))) : 0}`" min="0" max="4095" resolution="1" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="false" desc="" />
      <ParamBool id="seq1muxSamp$idx" name="seq1muxSamp$idx" group="ADC/Channel $idx" default="`${chan$idx &amp;&amp; !prio$idx &amp;&amp; (getParamValue(makeId(&quot;chan$idx&quot;, &quot;sampType&quot;)) eq &quot;Muxed&quot;)}`" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="false" desc="" />
      <ParamRange id="seq1muxSamp$idxMsk" name="seq1muxSamp$idxMsk" group="ADC/Channel $idx" default="`${seq1muxSamp$idx ? (1 &lt;&lt; getParamValue(makeId(&quot;chan$idx&quot;, &quot;sampInst&quot;))) : 0}`" min="0" max="15" resolution="1" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="false" desc="" />

      <!-- <ParamString id="chanNameInd$idx" name="Name" group="ADC/Channel $idx" default="`${chanName$idx}`" visible="`${chan$idx}`" editable="false" desc="Tool-provided channel name"/> -->
      <ParamString id="chanReg$idx" name="chanReg$idx" group="ADC/Channel $idx" default="`${chan$idx ? &quot;&amp;HPPASS->SAR.CFG.CHAN_RESULT[&quot; . getParamValue(&quot;chan$idx&quot;, &quot;chanInst$idx&quot;) . &quot;]&quot; : &quot;NULL&quot;}`" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="false" desc=""/>
      <ParamChoice id="chanUnit$idx" name="Units" group="ADC/Channel $idx" default="`${first$idx &amp;&amp; ctrLoop &amp;&amp; chanName0 eq &quot;Iout&quot; ? &quot;A&quot; : &quot;V&quot;}`" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="`${chan$idx &amp;&amp; !(first$idx &amp;&amp; ctrLoop &amp;&amp; (chanName0 eq &quot;Vout&quot; || chanName0 eq &quot;Iout&quot;))}`" desc="The units of the Channel">
        <Entry name="V" value="V" visible="true"/>
        <Entry name="A" value="A" visible="true"/>
        <Entry name="&#176;" value="DEGREES" visible="true"/>
        <Entry name="Custom" value="CUSTOM" visible="true"/>
      </ParamChoice>

      <ParamPlacement templateId="chan$idx" name="`${getParamValue(&quot;buck&quot;, &quot;chanName$idx&quot;)}`" group="ADC/Channel Placements" desc="ADC channel consumed by this solution" visible="`${getParamValue(&quot;buck&quot;, &quot;chanCnt&quot;) &gt; $idx}`" />
      <ParamString templateId="chan$idx" id="chanRsc" name="chanRsc" group="ADC/Channel $idx" default="`${INST_LOC}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="" />
      <ParamString id="chanPin$idx" name="Pin" group="ADC/Channel $idx" default="`${getBlockDisplayName(getParamValue(&quot;buck&quot;, makeId(&quot;chan$idx&quot;, &quot;chanRsc&quot;)), false)}`" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="false" desc="Channel assignment can be changed in Device Configurator" />
    </Repeat>

    <ParamRange id="targetUnits" name="target in Si-units" group="Controller" default="`${(chanName0 eq &quot;Vout&quot;) ? vOutNom : (chanName0 eq &quot;Iout&quot;) ? iOutNom : 0}`" min="0" max="1000" resolution="0.001" visible="`${debugController}`" editable="false" desc="" />
    <ParamString id="Urg" name="Ramp slope units" group="Controller" default="`${!ctrLoop ? &quot;counts&quot; : (chanName0 eq &quot;Vout&quot;) ? &quot;mV/ms&quot; : &quot;mA/ms&quot;}`" visible="`${debugController}`" editable="false" desc="" />

    <!-- Protection -->
    <Repeat count="16">
      <ParamBool id="loProt$idx" name="Underflow Protection Enable" group="ADC/Channel $idx/prot" default="false" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="false" desc="Enables bottom boundary protection" />
      <ParamRange id="loProtVal$idx" name="Underflow Protection threshold" group="ADC/Channel $idx/prot" default="`${first$idx ? targetUnits : 1}`" min="0" max="1000" resolution="0.001" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="`${chan$idx}`" desc="Bottom boundary value" />
      <ParamRange id="loProtValEqv$idx" name="Underflow Protection threshold (ADC equivalent)" group="ADC/Channel $idx/prot" default="`${loProtVal$idx * exGain$idx}`" min="0" max="1000" resolution="0.001" visible="`${debugAdc &amp;&amp; chan$idx &amp;&amp; loProt$idx}`" editable="false" desc="ADC equivalent of bottom boundary value" />
      <ParamBool id="hiProt$idx" name="Overflow Protection Enable" group="ADC/Channel $idx/prot" default="false" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="false" desc="Enables top boundary protection" />
      <ParamRange id="hiProtVal$idx" name="Overflow Protection threshold" group="ADC/Channel $idx/prot" default="`${first$idx ? targetUnits : 3}`" min="0.001" max="1000" resolution="0.001" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="`${chan$idx}`" desc="Top boundary value" />
      <ParamRange id="hiProtValEqv$idx" name="Overflow Protection threshold (ADC equivalent)" group="ADC/Channel $idx/prot" default="`${hiProtVal$idx * exGain$idx}`" min="0.001" max="1000" resolution="0.001" visible="`${debugAdc &amp;&amp; chan$idx &amp;&amp; hiProt$idx}`" editable="false" desc="ADC equivalent of top boundary value" />
      <ParamBool id="prot$idx" name="prot$idx" group="ADC/Channel $idx/prot" default="`${loProt$idx || hiProt$idx}`" visible="`${debugAdc &amp;&amp; chan$idx}`" editable="false" desc="" />
      <ParamString templateId="lim$idx" id="cond" name="cond" group="ADC/Channel $idx/prot" default="`${getParamValue(&quot;buck&quot;, &quot;loProt$idx&quot;) ? (getParamValue(&quot;buck&quot;, &quot;hiProt$idx&quot;) ?  &quot;CY_HPPASS_SAR_COND_OUTSIDE&quot; : &quot;CY_HPPASS_SAR_COND_BELOW&quot;) : &quot;CY_HPPASS_SAR_COND_ABOVE&quot;}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="" />
      <ParamRange templateId="lim$idx" id="low" name="low" group="ADC/Channel $idx/prot" default="`${getParamValue(&quot;buck&quot;, &quot;loProtVal$idx&quot;)}`" min="0" max="`${pow(2, 16) - 1}`" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="Units: V or A" /> <!-- TODO apply the extenrnal gain, interbal sampler gain and channel coefficients to convers V/A into adc counts -->
      <ParamRange templateId="lim$idx" id="high" name="high" group="ADC/Channel $idx/prot" default="`${getParamValue(&quot;buck&quot;, &quot;hiProtVal$idx&quot;)}`" min="0" max="`${pow(2, 16) - 1}`" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="Units: V or A" /> <!-- TODO apply the extenrnal gain, interbal sampler gain and channel coefficients to convers V/A into adc counts -->
      <ParamRange templateId="lim$idx" id="limInst" name="limInst" group="ADC/Channel $idx/prot" default="`${getInstNumber(&quot;limit&quot;)}`" min="0" max="7" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;) &amp;&amp; getParamValue(&quot;buck&quot;, &quot;chan$idx&quot;)}`" editable="false" desc="" />
      <!-- <ParamString templateId="chan$idx" id="limit" name="limit" group="ADC/Channel $idx/prot" default="`${getParamValue(&quot;buck&quot;, &quot;prot$idx&quot;) ? &quot;CY_HPPASS_SAR_LIMIT_&quot; . getParamValue(&quot;lim$idx&quot;, &quot;limInst&quot;) : &quot;CY_HPPASS_SAR_LIMIT_DISABLED&quot;}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="" /> --> <!-- blocked by PLATTOOLS-12614 -->
    </Repeat>

    <ParamBool id="prot" name="prot" group="ADC" visible="`${debugAdc}`" editable="false" desc=""
               default="`${loProt0 || loProt1 || loProt2 || loProt3 || loProt4 || loProt5 || loProt6 || loProt7 || loProt8 || loProt9 || loProt10 || loProt11 || loProt12 || loProt13 || loProt14 || loProt15 ||
                           hiProt0 || hiProt1 || hiProt2 || hiProt3 || hiProt4 || hiProt5 || hiProt6 || hiProt7 || hiProt8 || hiProt9 || hiProt10 || hiProt11 || hiProt12 || hiProt13 || hiProt14 || hiProt15}`"  />

    <ParamBool id="sched" name="sched" group="ADC" visible="`${debugAdc}`" editable="false" desc=""
               default="`${(getParamValue(&quot;buck&quot;, &quot;trigSrc1&quot;) eq &quot;SCHEDULED&quot;) ||
                           (getParamValue(&quot;buck&quot;, &quot;trigSrc2&quot;) eq &quot;SCHEDULED&quot;) ||
                           (getParamValue(&quot;buck&quot;, &quot;trigSrc3&quot;) eq &quot;SCHEDULED&quot;) ||
                           (getParamValue(&quot;buck&quot;, &quot;trigSrc4&quot;) eq &quot;SCHEDULED&quot;) ||
                           (getParamValue(&quot;buck&quot;, &quot;trigSrc5&quot;) eq &quot;SCHEDULED&quot;) ||
                           (getParamValue(&quot;buck&quot;, &quot;trigSrc6&quot;) eq &quot;SCHEDULED&quot;) ||
                           (getParamValue(&quot;buck&quot;, &quot;trigSrc7&quot;) eq &quot;SCHEDULED&quot;) ||
                           (getParamValue(&quot;buck&quot;, &quot;trigSrc8&quot;) eq &quot;SCHEDULED&quot;) ||
                           (getParamValue(&quot;buck&quot;, &quot;trigSrc9&quot;) eq &quot;SCHEDULED&quot;) ||
                           (getParamValue(&quot;buck&quot;, &quot;trigSrc10&quot;) eq &quot;SCHEDULED&quot;) ||
                           (getParamValue(&quot;buck&quot;, &quot;trigSrc11&quot;) eq &quot;SCHEDULED&quot;) ||
                           (getParamValue(&quot;buck&quot;, &quot;trigSrc12&quot;) eq &quot;SCHEDULED&quot;) ||
                           (getParamValue(&quot;buck&quot;, &quot;trigSrc13&quot;) eq &quot;SCHEDULED&quot;) ||
                           (getParamValue(&quot;buck&quot;, &quot;trigSrc14&quot;) eq &quot;SCHEDULED&quot;) ||
                           (getParamValue(&quot;buck&quot;, &quot;trigSrc15&quot;) eq &quot;SCHEDULED&quot;)}`"  />

    <ParamBool id="pre" name="Pre-Processing User callback" group="Controller" default="false" visible="`${debugController}`" editable="`${ctrLoop}`" desc="Enable user pre-processing callback" />
    <ParamBool id="post" name="Post-Processing User callback" group="Controller" default="false" visible="`${debugController}`" editable="`${ctrLoop}`" desc="Enable user post-processing callback" />
    <ParamString id="defaultPreCbName" name="defaultPreCbName" group="Controller" default="`${INST_NAME}`_pre_process_callback" visible="`${debugController}`" editable="false" desc="" />
    <ParamString id="preCbName" name="Pre-Processing User Callback Name" group="Controller" default="`${defaultPreCbName}`" visible="`${pre}`" editable="`${pre}`" desc="Pre-processing user callback: &lt;br&gt;&lt;br&gt;&#13;&#10;A valid unique C function identifier should be provided here. The function should be defined in the user code. It should have the following signature:&lt;br&gt;&lt;br&gt;&#13;&#10;void `${defaultPreCbName}`(void);" />
    <ParamBool id="preCbNameOk" name="preCbNameOk" group="Controller" default="`${hasMatch(preCbName, &quot;(^[_]+[0-9a-zA-Z]|^[a-zA-Z])[0-9a-zA-Z_]*$&quot;)}`" visible="`${debugController}`" editable="false" desc="" />
    <ParamString id="defaultPostCbName" name="defaultPostCbName" group="Controller" default="`${INST_NAME}`_post_process_callback" visible="`${debugController}`" editable="false" desc="" />
    <ParamString id="postCbName" name="Post-Processing User Callback Name" group="Controller" default="`${defaultPostCbName}`" visible="`${post}`" editable="`${post}`" desc="Post-Processing User Callback: &lt;br&gt;&lt;br&gt;&#13;&#10;A valid unique C function identifier should be provided here. The function should be defined in the user code. It should have the following signature:&lt;br&gt;&lt;br&gt;&#13;&#10;void `${defaultPostCbName}`(void);" />
    <ParamBool id="postCbNameOk" name="postCbNameOk" group="Controller" default="`${hasMatch(postCbName, &quot;(^[_]+[0-9a-zA-Z]|^[a-zA-Z])[0-9a-zA-Z_]*$&quot;)}`" visible="`${debugController}`" editable="false" desc="" />
    <ParamString id="defaultCustomCbName" name="defaultCustomCbName" group="Controller" default="`${INST_NAME}`_custom_callback" visible="`${debugController}`" editable="false" desc="" />
    <ParamString id="customCbName" name="Custom Control Loop Callback Name" group="Controller" default="`${defaultCustomCbName}`" visible="`${!ctrLoop}`" editable="`${!ctrLoop}`" desc="Custom control loop user callback: &lt;br&gt;&lt;br&gt;&#13;&#10;A valid unique C function identifier should be provided here. The function should be defined in the user code. It should have the following signature:&lt;br&gt;&lt;br&gt;&#13;&#10;void `${defaultCustomCbName}`(void);" />
    <ParamBool id="customCbNameOk" name="customCbNameOk" group="Controller" default="`${hasMatch(customCbName, &quot;(^[_]+[0-9a-zA-Z]|^[a-zA-Z])[0-9a-zA-Z_]*$&quot;)}`" visible="`${debugController}`" editable="false" desc="" />
    <ParamBool id="schedCb" name="Scheduled ADC Interrupt Callback" group="Controller" default="true" visible="`${sched}`" editable="`${sched}`" desc="If checked the Scheduled ADC Interrupt Callback is generated." />
    <ParamBool id="schedCbEn" name="schedCbEn" group="Controller" default="`${sched &amp;&amp; schedCb}`" visible="`${debugController}`" editable="false" desc="If checked the Scheduled ADC Interrupt Callback is generated." />
    <ParamString id="defaultSchedCbName" name="defaultSchedCbName" group="ADC" default="`${INST_NAME}`_scheduled_adc_callback" visible="`${debugController}`" editable="false" desc="" />
    <ParamString id="schedCbName" name="Scheduled ADC Interrupt Callback Name" group="Controller" default="`${defaultSchedCbName}`" visible="`${schedCbEn}`" editable="`${schedCbEn}`" desc="Scheduled ADC user callback: &lt;br&gt;&lt;br&gt;&#13;&#10;A valid unique C function identifier should be provided here. The function should be defined in the user code. It should have the following signature:&lt;br&gt;&lt;br&gt;&#13;&#10;void `${defaultSchedCbName}`(void);" />
    <ParamBool id="schedCbNameOk" name="schedCbNameOk" group="Controller" default="`${hasMatch(schedCbName, &quot;(^[_]+[0-9a-zA-Z]|^[a-zA-Z])[0-9a-zA-Z_]*$&quot;)}`" visible="`${debugController}`" editable="false" desc="" />
    <ParamString id="headerName" name="Header file name" group="Controller" default="" visible="`${pre || post || schedCbEn || !ctrLoop}`" editable="`${pre || post || schedCbEn || !ctrLoop}`" desc="The name of the header file, which declares __STATIC_INLINE callback functions" />
    <ParamBool id="headerNameOk" name="headerNameOk" group="Controller" default="`${hasMatch(headerName, &quot;(^[_]+[0-9a-zA-Z]|^[a-zA-Z])[0-9a-zA-Z_]*$&quot;)}`" visible="`${debugController}`" editable="false" desc="" />

    <!-- Seq -->
    <Repeat count="2">
      <ParamString id="grpName$idx" name="grpName$idx" group="ADC" default="`${(0 != $idx) ? &quot;Scheduled&quot; : &quot;Control Loop&quot;}` Sequencer Group" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="" />
      <ParamRange templateId="seq$idx" id="grpNum" name="grpNum" group="ADC/`${getParamValue(&quot;buck&quot;, &quot;grpName$idx&quot;)}`"  default="`${getInstNumber(&quot;grp&quot;)}`" min="0" max="7" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="" />
      <ParamString templateId="seq$idx" id="irqn" name="irqn" group="ADC/`${getParamValue(&quot;buck&quot;, &quot;grpName$idx&quot;)}`" default="pass_interrupt_sar_entry_done_`${grpNum}`_IRQn" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="" />

      <ParamRange id="dirSampMsk$idx" name="dirSampMsk$idx" group="ADC/`${grpName$idx}`" default="`${seq$idxdirSamp0Msk |
                                                                                                     seq$idxdirSamp1Msk |
                                                                                                     seq$idxdirSamp2Msk |
                                                                                                     seq$idxdirSamp3Msk |
                                                                                                     seq$idxdirSamp4Msk |
                                                                                                     seq$idxdirSamp5Msk |
                                                                                                     seq$idxdirSamp6Msk |
                                                                                                     seq$idxdirSamp7Msk |
                                                                                                     seq$idxdirSamp8Msk |
                                                                                                     seq$idxdirSamp9Msk |
                                                                                                     seq$idxdirSamp10Msk |
                                                                                                     seq$idxdirSamp11Msk |
                                                                                                     seq$idxdirSamp12Msk |
                                                                                                     seq$idxdirSamp13Msk |
                                                                                                     seq$idxdirSamp14Msk |
                                                                                                     seq$idxdirSamp15Msk}`" min="0" max="4095" resolution="1" visible="`${debugAdc}`" editable="false" desc="" />

      <ParamRange templateId="seq$idx" id="dirSampMsk" name="dirSampMsk" group="ADC/`${getParamValue(&quot;buck&quot;, &quot;grpName$idx&quot;)}`" default="`${getParamValue(&quot;buck&quot;,  &quot;dirSampMsk$idx&quot;)}`" min="0" max="4095" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="" />

      <ParamRange id="muxSampMsk$idx" name="muxSampMsk$idx" group="ADC/`${grpName$idx}`" default="`${seq$idxmuxSamp0Msk |
                                                                                                     seq$idxmuxSamp1Msk |
                                                                                                     seq$idxmuxSamp2Msk |
                                                                                                     seq$idxmuxSamp3Msk |
                                                                                                     seq$idxmuxSamp4Msk |
                                                                                                     seq$idxmuxSamp5Msk |
                                                                                                     seq$idxmuxSamp6Msk |
                                                                                                     seq$idxmuxSamp7Msk |
                                                                                                     seq$idxmuxSamp8Msk |
                                                                                                     seq$idxmuxSamp9Msk |
                                                                                                     seq$idxmuxSamp10Msk |
                                                                                                     seq$idxmuxSamp11Msk |
                                                                                                     seq$idxmuxSamp12Msk |
                                                                                                     seq$idxmuxSamp13Msk |
                                                                                                     seq$idxmuxSamp14Msk |
                                                                                                     seq$idxmuxSamp15Msk}`" min="0" max="15" resolution="1" visible="`${debugAdc}`" editable="false" desc="" />

      <ParamRange templateId="seq$idx" id="muxSampMsk" name="muxSampMsk" group="ADC/`${getParamValue(&quot;buck&quot;, &quot;grpName$idx&quot;)}`" default="`${getParamValue(&quot;buck&quot;,  &quot;muxSampMsk$idx&quot;)}`" min="0" max="15" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="" />

      <ParamRange templateId="seq$idx" id="muxSel0" name="seq$idxmuxSel0" group="ADC/`${getParamValue(&quot;buck&quot;, &quot;grpName$idx&quot;)}`"
                  default="`${getParamValue(&quot;buck&quot;,  &quot;chan0&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio0&quot;))  &amp;&amp; (getParamValue(&quot;chan0&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan0&quot;,  &quot;sampInst&quot;) eq 0) ? getParamValue(&quot;chan0&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan1&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio1&quot;))  &amp;&amp; (getParamValue(&quot;chan1&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan1&quot;,  &quot;sampInst&quot;) eq 0) ? getParamValue(&quot;chan1&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan2&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio2&quot;))  &amp;&amp; (getParamValue(&quot;chan2&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan2&quot;,  &quot;sampInst&quot;) eq 0) ? getParamValue(&quot;chan2&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan3&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio3&quot;))  &amp;&amp; (getParamValue(&quot;chan3&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan3&quot;,  &quot;sampInst&quot;) eq 0) ? getParamValue(&quot;chan3&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan4&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio4&quot;))  &amp;&amp; (getParamValue(&quot;chan4&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan4&quot;,  &quot;sampInst&quot;) eq 0) ? getParamValue(&quot;chan4&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan5&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio5&quot;))  &amp;&amp; (getParamValue(&quot;chan5&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan5&quot;,  &quot;sampInst&quot;) eq 0) ? getParamValue(&quot;chan5&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan6&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio6&quot;))  &amp;&amp; (getParamValue(&quot;chan6&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan6&quot;,  &quot;sampInst&quot;) eq 0) ? getParamValue(&quot;chan6&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan7&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio7&quot;))  &amp;&amp; (getParamValue(&quot;chan7&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan7&quot;,  &quot;sampInst&quot;) eq 0) ? getParamValue(&quot;chan7&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan8&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio8&quot;))  &amp;&amp; (getParamValue(&quot;chan8&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan8&quot;,  &quot;sampInst&quot;) eq 0) ? getParamValue(&quot;chan8&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan9&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio9&quot;))  &amp;&amp; (getParamValue(&quot;chan9&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan9&quot;,  &quot;sampInst&quot;) eq 0) ? getParamValue(&quot;chan9&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan10&quot;) &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio10&quot;)) &amp;&amp; (getParamValue(&quot;chan10&quot;, &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan10&quot;, &quot;sampInst&quot;) eq 0) ? getParamValue(&quot;chan10&quot;, &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan11&quot;) &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio11&quot;)) &amp;&amp; (getParamValue(&quot;chan11&quot;, &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan11&quot;, &quot;sampInst&quot;) eq 0) ? getParamValue(&quot;chan11&quot;, &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan12&quot;) &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio12&quot;)) &amp;&amp; (getParamValue(&quot;chan12&quot;, &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan12&quot;, &quot;sampInst&quot;) eq 0) ? getParamValue(&quot;chan12&quot;, &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan13&quot;) &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio13&quot;)) &amp;&amp; (getParamValue(&quot;chan13&quot;, &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan13&quot;, &quot;sampInst&quot;) eq 0) ? getParamValue(&quot;chan13&quot;, &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan14&quot;) &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio14&quot;)) &amp;&amp; (getParamValue(&quot;chan14&quot;, &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan14&quot;, &quot;sampInst&quot;) eq 0) ? getParamValue(&quot;chan14&quot;, &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan15&quot;) &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio15&quot;)) &amp;&amp; (getParamValue(&quot;chan15&quot;, &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan15&quot;, &quot;sampInst&quot;) eq 0) ? getParamValue(&quot;chan15&quot;, &quot;sampMux&quot;) : 0}`"
                  min="0" max="3" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="" />

      <ParamRange templateId="seq$idx" id="muxSel1" name="seq$idxmuxSel1" group="ADC/`${getParamValue(&quot;buck&quot;, &quot;grpName$idx&quot;)}`"
                  default="`${getParamValue(&quot;buck&quot;,  &quot;chan0&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio0&quot;))  &amp;&amp; (getParamValue(&quot;chan0&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan0&quot;,  &quot;sampInst&quot;) eq 1) ? getParamValue(&quot;chan0&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan1&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio1&quot;))  &amp;&amp; (getParamValue(&quot;chan1&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan1&quot;,  &quot;sampInst&quot;) eq 1) ? getParamValue(&quot;chan1&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan2&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio2&quot;))  &amp;&amp; (getParamValue(&quot;chan2&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan2&quot;,  &quot;sampInst&quot;) eq 1) ? getParamValue(&quot;chan2&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan3&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio3&quot;))  &amp;&amp; (getParamValue(&quot;chan3&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan3&quot;,  &quot;sampInst&quot;) eq 1) ? getParamValue(&quot;chan3&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan4&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio4&quot;))  &amp;&amp; (getParamValue(&quot;chan4&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan4&quot;,  &quot;sampInst&quot;) eq 1) ? getParamValue(&quot;chan4&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan5&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio5&quot;))  &amp;&amp; (getParamValue(&quot;chan5&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan5&quot;,  &quot;sampInst&quot;) eq 1) ? getParamValue(&quot;chan5&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan6&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio6&quot;))  &amp;&amp; (getParamValue(&quot;chan6&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan6&quot;,  &quot;sampInst&quot;) eq 1) ? getParamValue(&quot;chan6&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan7&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio7&quot;))  &amp;&amp; (getParamValue(&quot;chan7&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan7&quot;,  &quot;sampInst&quot;) eq 1) ? getParamValue(&quot;chan7&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan8&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio8&quot;))  &amp;&amp; (getParamValue(&quot;chan8&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan8&quot;,  &quot;sampInst&quot;) eq 1) ? getParamValue(&quot;chan8&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan9&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio9&quot;))  &amp;&amp; (getParamValue(&quot;chan9&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan9&quot;,  &quot;sampInst&quot;) eq 1) ? getParamValue(&quot;chan9&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan10&quot;) &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio10&quot;)) &amp;&amp; (getParamValue(&quot;chan10&quot;, &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan10&quot;, &quot;sampInst&quot;) eq 1) ? getParamValue(&quot;chan10&quot;, &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan11&quot;) &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio11&quot;)) &amp;&amp; (getParamValue(&quot;chan11&quot;, &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan11&quot;, &quot;sampInst&quot;) eq 1) ? getParamValue(&quot;chan11&quot;, &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan12&quot;) &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio12&quot;)) &amp;&amp; (getParamValue(&quot;chan12&quot;, &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan12&quot;, &quot;sampInst&quot;) eq 1) ? getParamValue(&quot;chan12&quot;, &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan13&quot;) &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio13&quot;)) &amp;&amp; (getParamValue(&quot;chan13&quot;, &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan13&quot;, &quot;sampInst&quot;) eq 1) ? getParamValue(&quot;chan13&quot;, &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan14&quot;) &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio14&quot;)) &amp;&amp; (getParamValue(&quot;chan14&quot;, &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan14&quot;, &quot;sampInst&quot;) eq 1) ? getParamValue(&quot;chan14&quot;, &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan15&quot;) &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio15&quot;)) &amp;&amp; (getParamValue(&quot;chan15&quot;, &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan15&quot;, &quot;sampInst&quot;) eq 1) ? getParamValue(&quot;chan15&quot;, &quot;sampMux&quot;) : 0}`"
                  min="0" max="3" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="" />

      <ParamRange templateId="seq$idx" id="muxSel2" name="seq$idxmuxSel2" group="ADC/`${getParamValue(&quot;buck&quot;, &quot;grpName$idx&quot;)}`"
                  default="`${getParamValue(&quot;buck&quot;,  &quot;chan0&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio0&quot;))  &amp;&amp; (getParamValue(&quot;chan0&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan0&quot;,  &quot;sampInst&quot;) eq 2) ? getParamValue(&quot;chan0&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan1&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio1&quot;))  &amp;&amp; (getParamValue(&quot;chan1&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan1&quot;,  &quot;sampInst&quot;) eq 2) ? getParamValue(&quot;chan1&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan2&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio2&quot;))  &amp;&amp; (getParamValue(&quot;chan2&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan2&quot;,  &quot;sampInst&quot;) eq 2) ? getParamValue(&quot;chan2&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan3&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio3&quot;))  &amp;&amp; (getParamValue(&quot;chan3&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan3&quot;,  &quot;sampInst&quot;) eq 2) ? getParamValue(&quot;chan3&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan4&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio4&quot;))  &amp;&amp; (getParamValue(&quot;chan4&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan4&quot;,  &quot;sampInst&quot;) eq 2) ? getParamValue(&quot;chan4&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan5&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio5&quot;))  &amp;&amp; (getParamValue(&quot;chan5&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan5&quot;,  &quot;sampInst&quot;) eq 2) ? getParamValue(&quot;chan5&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan6&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio6&quot;))  &amp;&amp; (getParamValue(&quot;chan6&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan6&quot;,  &quot;sampInst&quot;) eq 2) ? getParamValue(&quot;chan6&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan7&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio7&quot;))  &amp;&amp; (getParamValue(&quot;chan7&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan7&quot;,  &quot;sampInst&quot;) eq 2) ? getParamValue(&quot;chan7&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan8&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio8&quot;))  &amp;&amp; (getParamValue(&quot;chan8&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan8&quot;,  &quot;sampInst&quot;) eq 2) ? getParamValue(&quot;chan8&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan9&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio9&quot;))  &amp;&amp; (getParamValue(&quot;chan9&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan9&quot;,  &quot;sampInst&quot;) eq 2) ? getParamValue(&quot;chan9&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan10&quot;) &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio10&quot;)) &amp;&amp; (getParamValue(&quot;chan10&quot;, &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan10&quot;, &quot;sampInst&quot;) eq 2) ? getParamValue(&quot;chan10&quot;, &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan11&quot;) &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio11&quot;)) &amp;&amp; (getParamValue(&quot;chan11&quot;, &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan11&quot;, &quot;sampInst&quot;) eq 2) ? getParamValue(&quot;chan11&quot;, &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan12&quot;) &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio12&quot;)) &amp;&amp; (getParamValue(&quot;chan12&quot;, &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan12&quot;, &quot;sampInst&quot;) eq 2) ? getParamValue(&quot;chan12&quot;, &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan13&quot;) &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio13&quot;)) &amp;&amp; (getParamValue(&quot;chan13&quot;, &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan13&quot;, &quot;sampInst&quot;) eq 2) ? getParamValue(&quot;chan13&quot;, &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan14&quot;) &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio14&quot;)) &amp;&amp; (getParamValue(&quot;chan14&quot;, &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan14&quot;, &quot;sampInst&quot;) eq 2) ? getParamValue(&quot;chan14&quot;, &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan15&quot;) &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio15&quot;)) &amp;&amp; (getParamValue(&quot;chan15&quot;, &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan15&quot;, &quot;sampInst&quot;) eq 2) ? getParamValue(&quot;chan15&quot;, &quot;sampMux&quot;) : 0}`"
                  min="0" max="3" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="" />

      <ParamRange templateId="seq$idx" id="muxSel3" name="seq$idxmuxSel3" group="ADC/`${getParamValue(&quot;buck&quot;, &quot;grpName$idx&quot;)}`"
                  default="`${getParamValue(&quot;buck&quot;,  &quot;chan0&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio0&quot;))  &amp;&amp; (getParamValue(&quot;chan0&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan0&quot;,  &quot;sampInst&quot;) eq 3) ? getParamValue(&quot;chan0&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan1&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio1&quot;))  &amp;&amp; (getParamValue(&quot;chan1&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan1&quot;,  &quot;sampInst&quot;) eq 3) ? getParamValue(&quot;chan1&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan2&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio2&quot;))  &amp;&amp; (getParamValue(&quot;chan2&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan2&quot;,  &quot;sampInst&quot;) eq 3) ? getParamValue(&quot;chan2&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan3&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio3&quot;))  &amp;&amp; (getParamValue(&quot;chan3&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan3&quot;,  &quot;sampInst&quot;) eq 3) ? getParamValue(&quot;chan3&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan4&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio4&quot;))  &amp;&amp; (getParamValue(&quot;chan4&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan4&quot;,  &quot;sampInst&quot;) eq 3) ? getParamValue(&quot;chan4&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan5&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio5&quot;))  &amp;&amp; (getParamValue(&quot;chan5&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan5&quot;,  &quot;sampInst&quot;) eq 3) ? getParamValue(&quot;chan5&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan6&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio6&quot;))  &amp;&amp; (getParamValue(&quot;chan6&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan6&quot;,  &quot;sampInst&quot;) eq 3) ? getParamValue(&quot;chan6&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan7&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio7&quot;))  &amp;&amp; (getParamValue(&quot;chan7&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan7&quot;,  &quot;sampInst&quot;) eq 3) ? getParamValue(&quot;chan7&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan8&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio8&quot;))  &amp;&amp; (getParamValue(&quot;chan8&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan8&quot;,  &quot;sampInst&quot;) eq 3) ? getParamValue(&quot;chan8&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan9&quot;)  &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio9&quot;))  &amp;&amp; (getParamValue(&quot;chan9&quot;,  &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan9&quot;,  &quot;sampInst&quot;) eq 3) ? getParamValue(&quot;chan9&quot;,  &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan10&quot;) &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio10&quot;)) &amp;&amp; (getParamValue(&quot;chan10&quot;, &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan10&quot;, &quot;sampInst&quot;) eq 3) ? getParamValue(&quot;chan10&quot;, &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan11&quot;) &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio11&quot;)) &amp;&amp; (getParamValue(&quot;chan11&quot;, &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan11&quot;, &quot;sampInst&quot;) eq 3) ? getParamValue(&quot;chan11&quot;, &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan12&quot;) &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio12&quot;)) &amp;&amp; (getParamValue(&quot;chan12&quot;, &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan12&quot;, &quot;sampInst&quot;) eq 3) ? getParamValue(&quot;chan12&quot;, &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan13&quot;) &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio13&quot;)) &amp;&amp; (getParamValue(&quot;chan13&quot;, &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan13&quot;, &quot;sampInst&quot;) eq 3) ? getParamValue(&quot;chan13&quot;, &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan14&quot;) &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio14&quot;)) &amp;&amp; (getParamValue(&quot;chan14&quot;, &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan14&quot;, &quot;sampInst&quot;) eq 3) ? getParamValue(&quot;chan14&quot;, &quot;sampMux&quot;) :
                              getParamValue(&quot;buck&quot;,  &quot;chan15&quot;) &amp;&amp; ($idx ^ getParamValue(&quot;buck&quot;,  &quot;prio15&quot;)) &amp;&amp; (getParamValue(&quot;chan15&quot;, &quot;sampType&quot;) eq &quot;Muxed&quot;) &amp;&amp; (getParamValue(&quot;chan15&quot;, &quot;sampInst&quot;) eq 3) ? getParamValue(&quot;chan15&quot;, &quot;sampMux&quot;) : 0}`"
                  min="0" max="3" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="" />
    </Repeat>

    <!-- PWM -->
    <Repeat count="4">
      <ParamBool id="phase$idx" name="phase$idx" group="Modulator/debug $idx" default="`${phaseNum &gt; $idx}`" visible="`${(phaseNum &gt; $idx) &amp;&amp; debugMod}`" editable="false" desc="" />
      <ParamBool id="pccm$idx" name="pccm$idx" group="Modulator/debug $idx" default="`${phase$idx &amp;&amp; pccm}`" visible="`${phase$idx &amp;&amp; debugMod}`" editable="false" desc="" />
      <ParamBool id="vcm$idx" name="vcm$idx" group="Modulator/debug $idx" default="`${phase$idx &amp;&amp; vcm}`" visible="`${phase$idx &amp;&amp; debugMod}`" editable="false" desc="" />

      <ParamRange templateId="cPwm$idx" id="pwmInst" name="pwmInst" group="Modulator/debug $idx" default="`${getInstNumber(&quot;tcpwm&quot;)}`" min="0" max="3" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
      <ParamRange templateId="cPwm$idx" id="grpInst" name="grpInst" group="Modulator/debug $idx" default="`${getInstNumber(&quot;group&quot;)}`" min="0" max="3" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
      <ParamRange templateId="cPwm$idx" id="cntInst" name="cntInst" group="Modulator/debug $idx" default="`${getInstNumber(&quot;cnt&quot;) + grpInst * 256}`" min="0" max="1023" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />

      <ParamRange templateId="bPwm$idx" id="pwmInst" name="pwmInst" group="Modulator/debug $idx" default="`${getInstNumber(&quot;tcpwm&quot;)}`" min="0" max="3" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
      <ParamRange templateId="bPwm$idx" id="grpInst" name="grpInst" group="Modulator/debug $idx" default="`${getInstNumber(&quot;group&quot;)}`" min="0" max="3" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
      <ParamRange templateId="bPwm$idx" id="cntInst" name="cntInst" group="Modulator/debug $idx" default="`${getInstNumber(&quot;cnt&quot;) + grpInst * 256}`" min="0" max="1023" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />

      <ParamRange templateId="lPwm$idx" id="pwmInst" name="pwmInst" group="Modulator/debug $idx" default="`${getInstNumber(&quot;tcpwm&quot;)}`" min="0" max="3" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
      <ParamRange templateId="lPwm$idx" id="grpInst" name="grpInst" group="Modulator/debug $idx" default="`${getInstNumber(&quot;group&quot;)}`" min="0" max="3" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
      <ParamRange templateId="lPwm$idx" id="cntInst" name="cntInst" group="Modulator/debug $idx" default="`${getInstNumber(&quot;cnt&quot;) + grpInst * 256}`" min="0" max="1023" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />

      <ParamRange templateId="hPwm$idx" id="pwmInst" name="pwmInst" group="Modulator/debug $idx" default="`${getInstNumber(&quot;tcpwm&quot;)}`" min="0" max="3" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
      <ParamRange templateId="hPwm$idx" id="grpInst" name="grpInst" group="Modulator/debug $idx" default="`${getInstNumber(&quot;group&quot;)}`" min="0" max="3" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
      <ParamRange templateId="hPwm$idx" id="cntInst" name="cntInst" group="Modulator/debug $idx" default="`${getInstNumber(&quot;cnt&quot;) + grpInst * 256}`" min="0" max="1023" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />

      <ParamString id="pwmId$idx" name="pwmId$idx" group="Modulator/debug $idx" default="`${pccm ? &quot;cPwm$idx&quot; : hiRes ? &quot;hPwm$idx&quot; : &quot;lPwm$idx&quot;}`" visible="`${vcm$idx &amp;&amp; debugMod}`" editable="false" desc="" />
    </Repeat>

    <ParamSignalTie id="clock" group="Modulator/PWM" name="Clock" visible="true" desc="The clock input defines the operating frequency." canBeEmpty="false">
      <ParamSignal templateId="cPwm$idx" name="PWM Clock" port="clock_counter_en[0]" valid="`${getParamValue(&quot;buck&quot;,&quot;pccm$idx&quot;)}`" repeatCount="4" />
      <ParamSignal templateId="bPwm$idx" name="Blanking PWM Clock" port="clock_counter_en[0]" valid="`${getParamValue(&quot;buck&quot;,&quot;pccm$idx&quot;)}`" repeatCount="4" />
      <ParamSignal templateId="lPwm$idx" name="PWM Clock" port="clock_counter_en[0]" valid="`${getParamValue(&quot;buck&quot;,&quot;vcm$idx&quot;)}`" repeatCount="4" />
      <ParamSignal templateId="hPwm$idx" name="PWM Clock" port="clock_counter_en[0]" valid="`${getParamValue(&quot;buck&quot;,&quot;vcm$idx&quot;)}`" repeatCount="4" />
    </ParamSignalTie>

    <ParamString id="clkRcs" name="clkRcs" group="Modulator/PWM" default="`${getBlockFromSignal(makeId(pwmId0, &quot;clock_counter_en[0]&quot;))}`" visible="false" editable="false"  desc="" />
    <ParamBool id="clkUsed" name="clkUsed" group="Modulator/PWM" default="`${isBlockUsed(clkRcs)}`" visible="false" editable="false" desc="" />
    <ParamRange id="clkFreq" name="Clock Frequency" group="Modulator/PWM" default="`${clkUsed ? getExposedMember(clkRcs, &quot;frequency&quot;) : 1}`" min="1" max="1000000000" resolution="1" visible="false" editable="false" desc="" />
    <ParamString id="clkAccu"  name="clkAccu"  group="Modulator/PWM" default="`${clkUsed ? getExposedMember(clkRcs, &quot;accuracy&quot;) : 0}`" visible="false" editable="false" desc="" />
    <ParamString id="clkFreqInfo" name="Clock Frequency" group="Modulator/PWM/Actual timing values" default="`${formatFrequency(clkFreq,clkAccu)}`" visible="true" editable="false" desc="The PWM input clocking frequency" />

    <ParamRange id="pwmPeriodCy" name="Period (Clock cycles)" group="Modulator/PWM" default="`${ceil(clkFreq / swFreq)}`" min="0" max="1000000000" resolution="1" visible="`${debugMod}`" editable="false" desc="The calculated PWM period in clock cycles" />
    <ParamString id="swFreqInfo" name="Switching Frequency" group="Modulator/PWM/Actual timing values" default="`${formatFrequency(clkFreq/pwmPeriodCy,clkAccu)}`" visible="true" editable="false" desc="The PWM output switching frequency" />
    <ParamRange id="pwmPeriod" name="Period (HRPWM counts)" group="Modulator/PWM" default="`${pwmPeriodCy * hiResK}`" min="0" max="1000000000" resolution="1" visible="`${debugMod}`" editable="false" desc="The calculated PWM period in counts taking into account the High Resolution" />
    <ParamRange id="pwmCompareCy" name="pwmCompareCy" group="Modulator/PWM" default="`${((ceil(clkFreq / swFreq) * dutyCycle) - 1) * hiResK}`" min="0" max="1000000000" resolution="1" visible="`${debugMod}`" editable="false" desc="" />
    <ParamRange id="pwmPeriodUs" name="Period (us)" group="Modulator/PWM" default="`${pwmPeriodCy * 1000000.0 / clkFreq}`" min="0" max="1000000" resolution="0.001" visible="`${debugMod}`" editable="false" desc="The calculated PWM period in microseconds" />
    <ParamString id="pwmPeriodInfo" name="Switching Period" group="Modulator/PWM/Actual timing values" default="`${pwmPeriodUs}` us &#177; `${clkAccu}`&#37; (`${pwmPeriodCy}` clock cycles`${hiRes &amp;&amp; vcm ? &quot; or &quot; . pwmPeriod . &quot; HRPWM counts&quot; : &quot;&quot;}`)" visible="true" editable="false" desc="The PWM output switching period" />

    <!-- Coefficients -->
    <ParamRange id="B0Auto" name="B0 (auto)" group="Controller" default="`${vcm ? (Ts * wP0A * wP1A * wP2A * (2 + Ts * wZ1A) * (2 + Ts * wZ2A)) / (2 * wZ1A * wZ2A * (2 + Ts * wP1A) * (2 + Ts * wP2A)) : (Ts * wP0A * wP1A * (2 + Ts * wZ1A))/(2 * (2 + Ts * wP1A) * wZ1A)}`" min="-1000000" max="1000000" resolution="0.000001" visible="`${debugController}`" editable="false" desc="Calculated value of controller coefficient" />
    <ParamRange id="B1Auto" name="B1 (auto)" group="Controller" default="`${vcm ? (Ts * wP0A * wP1A * wP2A * (-4 + 3 * Ts * Ts * wZ1A * wZ2A + 2 * Ts * (wZ1A + wZ2A))) / ( 2 * (2 + Ts * wP1A) * (2 + Ts * wP2A) * wZ1A * wZ2A) : (Ts * Ts * wP0A * wP1A)/(2+Ts * wP1A)}`" min="-1000000" max="1000000" resolution="0.000001" visible="`${debugController}`" editable="false" desc="Calculated value of controller coefficient" />
    <ParamRange id="B2Auto" name="B2 (auto)" group="Controller" default="`${vcm ? (Ts * wP0A * wP1A * wP2A * (-4 + 3 * Ts * Ts * wZ1A * wZ2A - 2 * Ts * (wZ1A + wZ2A))) / (2 * (2 + Ts * wP1A) * (2 + Ts * wP2A) * wZ1A * wZ2A) : (Ts * wP0A * wP1A * (-2 + Ts * wZ1A))/(2 * (2 + Ts * wP1A) * wZ1A)}`" min="-1000000" max="1000000" resolution="0.000001" visible="`${debugController}`" editable="false" desc="Calculated value of controller coefficient" />
    <ParamRange id="B3Auto" name="B3 (auto)" group="Controller" default="`${vcm ? (Ts * wP0A * wP1A * wP2A * (-2 + Ts * wZ1A) * (-2 + Ts * wZ2A)) / (2 * wZ1A * wZ2A * (2 + Ts * wP1A) * (2 + Ts * wP2A)) : -1000000}`" min="-1000000" max="1000000" resolution="0.000001" visible="`${debugController}`" editable="false" desc="Calculated value of controller coefficient" />
    <ParamRange id="A0Auto" name="A0 (auto)" group="Controller" default="0" min="-1000000" max="1000000" resolution="0.000001" visible="`${debugController}`" editable="false" desc="Calculated value of controller coefficient" />
    <ParamRange id="A1Auto" name="A1 (auto)" group="Controller" default="`${vcm ? -(-12 + Ts * Ts * wP1A * wP2A - 2 * Ts * (wP1A + wP2A)) / ((2 + Ts * wP1A) * (2 + Ts * wP2A)) : 4 / (2 + Ts * wP1A)}`" min="-1000000" max="1000000" resolution="0.000001" visible="`${debugController}`" editable="false" desc="Calculated value of controller coefficient" />
    <ParamRange id="A2Auto" name="A2 (auto)" group="Controller" default="`${vcm ? (-12 + Ts * Ts * wP1A * wP2A + 2 * Ts * (wP1A + wP2A)) / ((2 + Ts * wP1A) * (2 + Ts * wP2A)) : (-2 + Ts * wP1A)/(2 + Ts * wP1A)}`" min="-1000000" max="1000000" resolution="0.000001" visible="`${debugController}`" editable="false" desc="Calculated value of controller coefficient" />
    <ParamRange id="A3Auto" name="A3 (auto)" group="Controller" default="`${vcm ? (-2 + Ts * wP1A) * (-2 + Ts * wP2A) / ((2 + Ts * wP1A) * (2 + Ts * wP2A)) : -1000000}`" min="-1000000" max="1000000" resolution="0.000001" visible="`${debugController}`" editable="false" desc="Calculated value of controller coefficient" />
    <ParamRange id="KAuto" name="K (auto)" group="Controller" default="`${(vcm ? pwmPeriod : pow(2, DacBits) / vddaV) * vRefV / (pow(2, AdcBits) * exGain0)}`" min="0" max="1000000" resolution="0.000001" visible="`${debugController}`" editable="false" desc="Calculated value of controller coefficient" />
    <ParamRange id="GAuto" name="G (auto)" group="Controller" default="1.0" min="0" max="1000000" resolution="0.1" visible="`${debugController}`" editable="false" desc="Calculated value of controller coefficient" />

    <ParamRange id="B0Manual" name="B0 (manual)" group="Controller" default="`${vcm ? (Ts * wP0M * wP1M * wP2M * (2 + Ts * wZ1M) * (2 + Ts * wZ2M)) / (2 * wZ1M * wZ2M * (2 + Ts * wP1M) * (2 + Ts * wP2M)) : (Ts * wP0M * wP1M * (2 + Ts * wZ1M))/(2 * (2 + Ts * wP1M) * wZ1M)}`" min="-1000000" max="1000000" resolution="0.000001" visible="`${debugController}`" editable="false" desc="User-specified value of controller coefficient" />
    <ParamRange id="B1Manual" name="B1 (manual)" group="Controller" default="`${vcm ? (Ts * wP0M * wP1M * wP2M * (-4 + 3 * Ts * Ts * wZ1M * wZ2M + 2 * Ts * (wZ1M + wZ2M))) / ( 2 * (2 + Ts * wP1M) * (2 + Ts * wP2M) * wZ1M * wZ2M) : (Ts * Ts * wP0M * wP1M)/(2+Ts * wP1M)}`" min="-1000000" max="1000000" resolution="0.000001" visible="`${debugController}`" editable="false" desc="User-specified value of controller coefficient" />
    <ParamRange id="B2Manual" name="B2 (manual)" group="Controller" default="`${vcm ? (Ts * wP0M * wP1M * wP2M * (-4 + 3 * Ts * Ts * wZ1M * wZ2M - 2 * Ts * (wZ1M + wZ2M))) / (2 * (2 + Ts * wP1M) * (2 + Ts * wP2M) * wZ1M * wZ2M) : (Ts * wP0M * wP1M * (-2 + Ts * wZ1M))/(2 * (2 + Ts * wP1M) * wZ1M)}`" min="-1000000" max="1000000" resolution="0.000001" visible="`${debugController}`" editable="false" desc="User-specified value of controller coefficient" />
    <ParamRange id="B3Manual" name="B3 (manual)" group="Controller" default="`${vcm ? (Ts * wP0M * wP1M * wP2M * (-2 + Ts * wZ1M) * (-2 + Ts * wZ2M)) / (2 * wZ1M * wZ2M * (2 + Ts * wP1M) * (2 + Ts * wP2M)) : 0}`" min="-1000000" max="1000000" resolution="0.000001" visible="`${debugController}`" editable="false" desc="User-specified value of controller coefficient" />
    <ParamRange id="A0Manual" name="A0 (manual)" group="Controller" default="0" min="-1000000" max="1000000" resolution="0.000001" visible="`${debugController}`" editable="false" desc="User-specified value of controller coefficient" />
    <ParamRange id="A1Manual" name="A1 (manual)" group="Controller" default="`${vcm ? -(-12 + Ts * Ts * wP1M * wP2M - 2 * Ts * (wP1M + wP2M)) / ((2 + Ts * wP1M) * (2 + Ts * wP2M)) : 4 / (2 + Ts * wP1M)}`" min="-1000000" max="1000000" resolution="0.000001" visible="`${debugController}`" editable="false" desc="User-specified value of controller coefficient" />
    <ParamRange id="A2Manual" name="A2 (manual)" group="Controller" default="`${vcm ? (-12 + Ts * Ts * wP1M * wP2M + 2 * Ts * (wP1M + wP2M)) / ((2 + Ts * wP1M) * (2 + Ts * wP2M)) : (-2 + Ts * wP1M)/(2 + Ts * wP1M)}`" min="-1000000" max="1000000" resolution="0.000001" visible="`${debugController}`" editable="false" desc="User-specified value of controller coefficient" />
    <ParamRange id="A3Manual" name="A3 (manual)" group="Controller" default="`${vcm ? (-2 + Ts * wP1M) * (-2 + Ts * wP2M) / ((2 + Ts * wP1M) * (2 + Ts * wP2M)) : 0}`" min="-1000000" max="1000000" resolution="0.000001" visible="`${debugController}`" editable="false" desc="User-specified value of controller coefficient" />
    <ParamRange id="KManual" name="K (manual)" group="Controller" default="`${(vcm ? pwmPeriod : pow(2, DacBits) / vddaV) * vRefV / (pow(2, AdcBits) * exGain0)}`" min="0" max="1000000" resolution="0.000001" visible="`${debugController}`" editable="false" desc="User-specified value of controller coefficient" />
    <ParamRange id="GManual" name="G (manual)" group="Controller" default="1.0"  min="0" max="1000000" resolution="0.1" visible="`${debugController}`" editable="false" desc="User-specified value of controller coefficient" />

    <ParamRange id="ValidMaxPhaseMargin" name="ValidMaxPhaseMargin" group="Controller" default="`${getTclVar(&quot;validMaxPhaseMargin&quot;, pcc_solver_actual)}`" min="-1" max="90" resolution="1" visible="`${debugController}`" editable="false" desc="" />
    <ParamRange id="ValidMaxCrossoverFreq" name="ValidMaxCrossoverFreq" group="Controller" default="`${getTclVar(&quot;validMaxCrossoverFreq&quot;, pcc_solver_actual)}`" min="-1" max="10000000" resolution="100" visible="`${debugController}`" editable="false" desc="" />
    <ParamString id="MsgValidMaxPhaseMargin" name="Msg Valid Max Phase Margin" group="Controller" default="Target phase margin. Maximum valid phase margin `${ValidMaxPhaseMargin > 0 ? ValidMaxPhaseMargin : &quot;does not exist&quot; }`, for entered set of converter parameters." visible="`${debugController}`" editable="false" desc=""/>
    <ParamString id="MsgValidMaxCrossoverFreq" name="Msg Valid Max Crossover Freq" group="Controller" default="Target crossover frequency. Maximum valid crossover frequency `${ValidMaxCrossoverFreq > 0 ? ValidMaxCrossoverFreq : &quot;does not exist&quot; }` `${ValidMaxCrossoverFreq > 0 ? &quot;Hz,&quot; : &quot;,&quot; }` for entered set of converter parameters." visible="`${debugController}`" editable="false" desc=""/>

    <ParamRange id="targetMin" name="min target in Si-units" group="Controller" default="`${(chanName0 eq &quot;Vout&quot;) ? vOutMin : (chanName0 eq &quot;Iout&quot;) ? iOutMin : 0}`" min="0" max="1000000" resolution="0.001" visible="`${debugController}`" editable="false" desc="" />
    <ParamRange id="targetMax" name="max target in Si-units" group="Controller" default="`${(chanName0 eq &quot;Vout&quot;) ? vOutMax : (chanName0 eq &quot;Iout&quot;) ? iOutMax : 1000000}`" min="0" max="1000000" resolution="0.001" visible="`${debugController}`" editable="false" desc="" />
    <ParamRange id="targetCounts" name="target in counts" group="Controller" default="`${targetUnits * txCoef0}`" min="0" max="1000000" resolution="1" visible="`${debugController}`" editable="false" desc="" />
    <ParamRange id="rampStepUnits" name="rampStepUnits" group="Controller" default="`${Trg * Srg / 1000.0}`" min="0.001" max="1000" resolution="0.000001" visible="`${debugController}`" editable="false" desc="" />
    <ParamRange id="rampStepCounts" name="rampStepCounts" group="Controller" default="`${floor(rampStepUnits * txCoef0)}`" min="0" max="1000000" resolution="1" visible="`${debugController}`" editable="false" desc="" />

    <!-- <ParamRange id="pwmGroup" name="pwmGroup" group="Modulator"  default="`${getParamValue(makeId(&quot;lPwm0&quot;, &quot;pwmGroup0&quot;))}`" min="0" max="3" resolution="1" visible="`${debugMod}`" editable="false" desc="" /> -->
    <ParamString templateId="lPwm0" id="pwmAmc" name="pwmAmc" group="Modulator" default="GRP_NR[`${getParamValue(&quot;buck&quot;, makeId(getParamValue(&quot;buck&quot;, &quot;pwmId0&quot;), &quot;grpInst&quot;))}`].CNT.GRP_AMC_PRESENT" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
    <ParamBool templateId="lPwm0"   id="amc" name="amc" group="Modulator" default="`${lookupExpression(getParamValue(&quot;buck&quot;, makeId(&quot;lPwm0&quot;, &quot;pwmAmc&quot;))) eq 1}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
    <ParamString templateId="hPwm0" id="pwmAmc" name="pwmAmc" group="Modulator" default="GRP_NR[`${getParamValue(&quot;buck&quot;, makeId(getParamValue(&quot;buck&quot;, &quot;pwmId0&quot;), &quot;grpInst&quot;))}`].CNT.GRP_AMC_PRESENT" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
    <ParamBool templateId="hPwm0"   id="amc" name="amc" group="Modulator" default="`${lookupExpression(getParamValue(&quot;buck&quot;, makeId(&quot;hPwm0&quot;, &quot;pwmAmc&quot;))) eq 1}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
    <ParamRange id="rDeadNs" name="Rising Dead Time in ns" group="Modulator" default="100" min="0" max="1000000000" resolution="1" visible="`${debugMod &amp;&amp; sync}`" editable="true" desc="Dead time delay for high switch" />
    <ParamRange id="rDeadCy" name="Rising Dead Time Clocks" group="Modulator" default="`${ceil(clkFreq * rDeadNs / 1000000000.0)}`" min="0" max="`${vcm &amp;&amp; getParamValue(makeId(pwmId0, &quot;amc&quot;)) ? 65535 : 255}`" resolution="1" visible="`${debugMod &amp;&amp; sync}`" editable="false" desc="Number of clock cycles of dead time between PWM outputs. Range: 0-255 on standard PWM or 0-65535 on PWM with advanced motor control." />
    <ParamRange id="fDeadNs" name="Falling Dead Time in ns" group="Modulator" default="100" min="0" max="1000000000" resolution="1" visible="`${debugMod &amp;&amp; sync}`" editable="true" desc="Dead time delay for low switch" />
    <ParamRange id="fDeadCy" name="Falling Dead Time Clocks" group="Modulator" default="`${ceil(clkFreq * fDeadNs / 1000000000.0)}`" min="0" max="`${vcm &amp;&amp; getParamValue(makeId(pwmId0, &quot;amc&quot;)) ? 65535 : 255}`" resolution="1" visible="`${debugMod &amp;&amp; sync}`" editable="false" desc="Number of clock cycles of dead time between PWM outputs. Range: 0-255 on standard PWM or 0-65535 on PWM with advanced motor control." />
    <ParamString id="rDeadInfo" name="Rising Dead Time" group="Modulator/PWM/Actual timing values" default="`${rDeadCy * 1000000000 / clkFreq}` ns &#177; `${clkAccu}`&#37; (`${rDeadCy}` clock cycles`${hiRes &amp;&amp; vcm ? &quot; or &quot; . rDeadCy * hiResK . &quot; HRPWM counts&quot; : &quot;&quot;}`)" visible="true" editable="false" desc="The PWM line output dead time" />
    <ParamString id="fDeadInfo" name="Falling Dead Time" group="Modulator/PWM/Actual timing values" default="`${fDeadCy * 1000000000 / clkFreq}` ns &#177; `${clkAccu}`&#37; (`${fDeadCy}` clock cycles`${hiRes &amp;&amp; vcm ? &quot; or &quot; . fDeadCy * hiResK . &quot; HRPWM counts&quot; : &quot;&quot;}`)" visible="true" editable="false" desc="The PWM line_compl output dead time" />

    <ParamChoice id="pasOut" name="Passive Level Output" group="Modulator/PWM" default="CY_TCPWM_PWM_OUTPUT_LOW" visible="true" editable="true" desc="Passive PWM outputs behavior" >
      <Entry name="High impedance" value="CY_TCPWM_PWM_OUTPUT_HIGHZ" visible="true" />
      <!-- <Entry name="Retain" value="CY_TCPWM_PWM_OUTPUT_RETAIN" visible="true" /> -->
      <Entry name="Low" value="CY_TCPWM_PWM_OUTPUT_LOW" visible="true" />
      <Entry name="High" value="CY_TCPWM_PWM_OUTPUT_HIGH" visible="true" />
    </ParamChoice>
    <ParamBool id="hiInv" name="Invert High Side Switch Output" group="Modulator/PWM" default="false" visible="true" editable="true" desc="If checked the High Side Switch PWM output is inverted." />
    <ParamBool id="loInv" name="Invert Low Side Switch Output" group="Modulator/PWM" default="false" visible="`${sync}`" editable="true" desc="If checked the Low Side Switch PWM output is inverted." />

    <!-- DAC -->
    <ParamRange id="dacMax"      name="dacMax"                       group="Modulator/DAC" default="`${dutyCycle * (pow(2, DacBits) - 1) + 1e-3 * rDeadNs * slope / dacStep}`" min="0" max="`${pow(2, DacBits) - 1}`" resolution="1" visible="`${debugPccm}`" editable="false" desc="" />
    <ParamRange id="slopeStart"  name="Initial Slope Start (counts)" group="Modulator/DAC" default="`${dacStartMin}`" min="`${dacStartMin}`" max="`${dacMax}`" resolution="1" visible="`${pccm}`" editable="`${pccm}`" desc="Slope start in DAC counts" />
    <ParamRange id="slopeStop"   name="Initial Slope Stop (counts)"  group="Modulator/DAC" default="`${dacStopMin}`" min="`${dacStopMin}`" max="`${dacMax}`" resolution="1" visible="`${pccm}`" editable="`${pccm}`" desc="Slope stop in DAC counts" />
    <ParamRange id="MaxDutyTicks" name="Max duty ticks" group="Controller" default="`${vcm ? pwmPeriod * dutyCycle : dacMax}`" min="0" max="1000000" resolution="1" visible="`${debugController}`" editable="false" desc="Calculated value of controller coefficient" />

    <!-- ADC -->
    <Repeat count="2">
      <ParamString templateId="seqInTrig$idx" id="inTrigRsc" name="inTrigRsc" group="ADC/`${getParamValue(&quot;buck&quot;, &quot;grpName$idx&quot;)}`" default="`${INST_LOC}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="" />
      <ParamRange templateId="seqInTrig$idx" id="inTrigInst$idx" name="inTrigInst$idx" group="ADC/`${getParamValue(&quot;buck&quot;, &quot;grpName$idx&quot;)}`" default="`${getInstNumber(&quot;input_trigger&quot;)}`" min="0" max="7" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="" />
      <ParamString templateId="seq$idx" id="trigSel" name="trigSel" group="ADC/`${getParamValue(&quot;buck&quot;, &quot;grpName$idx&quot;)}`" default="CY_HPPASS_SAR_TRIG_`${getParamValue(&quot;seqInTrig$idx&quot;, &quot;inTrigInst$idx&quot;)}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" editable="false" desc="" />
      <ParamPlacement templateId="seqInTrig$idx" name="ADC `${getParamValue(&quot;buck&quot;, &quot;grpName$idx&quot;)}` input trigger" group="ADC/`${getParamValue(&quot;buck&quot;, &quot;grpName$idx&quot;)}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" desc="" />
      <ParamPlacement templateId="seq$idx" name="ADC `${getParamValue(&quot;buck&quot;, &quot;grpName$idx&quot;)}`" group="ADC/`${getParamValue(&quot;buck&quot;, &quot;grpName$idx&quot;)}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" desc="" />
    </Repeat>

    <!-- MOD -->
    <ParamRange id="phaseDeg" name="Initial phase (degrees)" group="Modulator/Phase 0" default="0" min="0" max="359" resolution="1" visible="true" editable="true" desc="The initial PWM couner value at starting - it is useful for multiple converter instances with the same switching frequency control loop phase shifting." />
    <ParamRange id="phaseCy" name="Initial phase (cycles)" group="Modulator/Phase 0" default="`${pwmPeriodCy * phaseDeg / 360}`" min="0" max="1000000" resolution="1" visible="`${debugMod}`" editable="false" desc="" />
    <Repeat count="4">
      <ParamPlacement templateId="lPwm$idx" name="PWM Placement" group="Modulator/Phase $idx" desc="PWM consumed by this solution" visible="`${getParamValue(&quot;buck&quot;, &quot;vcm$idx&quot;) &amp;&amp; getParamValue(&quot;buck&quot;, &quot;vcm&quot;)}`" />
      <ParamPlacement templateId="hPwm$idx" name="HRPWM Placement" group="Modulator/Phase $idx" desc="HRPWM consumed by this solution" visible="`${getParamValue(&quot;buck&quot;, &quot;vcm$idx&quot;) &amp;&amp; getParamValue(&quot;buck&quot;, &quot;vcm&quot;)}`" />

      <ParamPlacement templateId="cPwm$idx"   name="PWM Placement" group="Modulator/Phase $idx" desc="PWM consumed by this solution" visible="`${getParamValue(&quot;buck&quot;, &quot;pccm$idx&quot;)}`" />
      <ParamPlacement templateId="compTrig$idx"   name="Comparator Output Trigger Placement" group="Modulator/Phase $idx" desc="Output Trigger consumed by this solution" visible="`${getParamValue(&quot;buck&quot;, &quot;pccm$idx&quot;) &amp;&amp; getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" />
      <ParamPlacement templateId="dacTrig$idx"   name="DAC Start Trigger Placement" group="Modulator/Phase $idx" desc="Input Trigger consumed by this solution" visible="`${getParamValue(&quot;buck&quot;, &quot;pccm$idx&quot;) &amp;&amp; getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" />
      <ParamPlacement templateId="bTrig$idx"   name="Comparator Blanking Trigger Placement" group="Modulator/Phase $idx" desc="Input Trigger consumed by this solution" visible="`${getParamValue(&quot;buck&quot;, &quot;pccm$idx&quot;) &amp;&amp; getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" />

      <ParamString templateId="lPwm$idx" id="pwmRsc" name="pwmRsc" group="Modulator/Phase $idx" default="`${INST_LOC}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
      <ParamString templateId="lPwm$idx" id="pwmName" name="pwmName" group="Modulator/Phase $idx" default="`${getBlockDisplayName(pwmRsc, false)}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
      <ParamString templateId="hPwm$idx" id="pwmRsc" name="pwmRsc" group="Modulator/Phase $idx" default="`${INST_LOC}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
      <ParamString templateId="hPwm$idx" id="pwmName" name="pwmName" group="Modulator/Phase $idx" default="`${getBlockDisplayName(pwmRsc, false)}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />

      <ParamString templateId="cPwm$idx" id="pwmRsc" name="pwmRsc" group="Modulator/Phase $idx" default="`${INST_LOC}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
      <ParamString templateId="cPwm$idx" id="pwmName" name="pwmName" group="Modulator/Phase $idx" default="`${getBlockDisplayName(pwmRsc, false)}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />

      <ParamString id="pwmName$idx" name="pwmName$idx" group="Modulator/Phase $idx" default="`${pccm ? getParamValue(&quot;cPwm$idx&quot;, &quot;pwmName&quot;) : hiRes ? getParamValue(&quot;hPwm$idx&quot;, &quot;pwmName&quot;) : getParamValue(&quot;lPwm$idx&quot;, &quot;pwmName&quot;)}`" visible="`${phase$idx &amp;&amp; debugMod}`" editable="false" desc="The PWM resource assignment can be changed in the Device Configurator tool" />

      <ParamSignal templateId="cPwm$idx" port="tr_line[0]" name="High Side Switch Output" group="Modulator/Phase $idx" visible="`${getParamValue(&quot;buck&quot;, &quot;phaseNum&quot;) &gt; $idx}`" desc="PWM output" canBeEmpty="false" multiSelect="false">
        <Constraint type="ACCEPT" targetLocation="ioss\[\d+\]\.port\[\d+\]\.pin.*" valid="true" >
          <Parameter id="DriveModes" severity="DEFAULT" reason="">
            <Fixed value="CY_GPIO_DM_STRONG_IN_OFF" />
          </Parameter>
          <Parameter id="initialState" severity="DEFAULT" reason="">
            <Fixed value="0" />
          </Parameter>
        </Constraint>
      </ParamSignal>

      <ParamString templateId="cPwm$idx" id="hiPinRcs" name="hiPinRcs" group="Modulator/Phase $idx" default="`${getBlockFromSignal(&quot;tr_line[0]&quot;)}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
      <ParamString templateId="cPwm$idx" id="hiPinName" name="hiPinName" group="Modulator/Phase $idx" default="`${getBlockDisplayName(hiPinRcs, false)}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />

      <ParamSignal templateId="lPwm$idx" port="tr_line[0]" name="High Side Switch Output" group="Modulator/Phase $idx" visible="`${getParamValue(&quot;buck&quot;, &quot;phaseNum&quot;) &gt; $idx}`" desc="PWM output" canBeEmpty="false" multiSelect="false">
        <Constraint type="ACCEPT" targetLocation="ioss\[\d+\]\.port\[\d+\]\.pin.*" valid="true" >
          <Parameter id="DriveModes" severity="DEFAULT" reason="">
            <Fixed value="CY_GPIO_DM_STRONG_IN_OFF" />
          </Parameter>
          <Parameter id="initialState" severity="DEFAULT" reason="">
            <Fixed value="0" />
          </Parameter>
        </Constraint>
      </ParamSignal>

      <ParamString templateId="lPwm$idx" id="hiPinRcs" name="hiPinRcs" group="Modulator/Phase $idx" default="`${getBlockFromSignal(&quot;tr_line[0]&quot;)}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
      <ParamString templateId="lPwm$idx" id="hiPinName" name="hiPinName" group="Modulator/Phase $idx" default="`${getBlockDisplayName(hiPinRcs, false)}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />

      <ParamSignal templateId="hPwm$idx" port="tr_line[0]" name="High Side Switch Output" group="Modulator/Phase $idx" visible="`${getParamValue(&quot;buck&quot;, &quot;phaseNum&quot;) &gt; $idx}`" desc="PWM output" canBeEmpty="false" multiSelect="false">
        <Constraint type="ACCEPT" targetLocation="ioss\[\d+\]\.port\[\d+\]\.pin.*" valid="true" >
          <Parameter id="DriveModes" severity="DEFAULT" reason="">
            <Fixed value="CY_GPIO_DM_STRONG_IN_OFF" />
          </Parameter>
          <Parameter id="initialState" severity="DEFAULT" reason="">
            <Fixed value="0" />
          </Parameter>
        </Constraint>
      </ParamSignal>

      <ParamString templateId="hPwm$idx" id="hiPinRcs" name="hiPinRcs" group="Modulator/Phase $idx" default="`${getBlockFromSignal(&quot;tr_line[0]&quot;)}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
      <ParamString templateId="hPwm$idx" id="hiPinName" name="hiPinName" group="Modulator/Phase $idx" default="`${getBlockDisplayName(hiPinRcs, false)}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />

      <ParamString id="hiPinName$idx" name="hiPinName$idx" group="Modulator/Phase $idx" default="`${pccm ? getParamValue(&quot;cPwm$idx&quot;, &quot;hiPinName&quot;) : hiRes ? getParamValue(&quot;hPwm$idx&quot;, &quot;hiPinName&quot;) : getParamValue(&quot;lPwm$idx&quot;, &quot;hiPinName&quot;)}`" visible="`${phase$idx &amp;&amp; debugMod}`" editable="false" desc="The Pin assignment can be changed in the Device configurator tool at Solution tab" />

      <ParamSignal templateId="cPwm$idx" port="tr_line_compl[0]" name="Low Side Switch Output" group="Modulator/Phase $idx" visible="`${(getParamValue(&quot;buck&quot;, &quot;phaseNum&quot;) &gt; $idx) &amp;&amp; getParamValue(&quot;buck&quot;, &quot;sync&quot;)}`" desc="Complementary PWM output" canBeEmpty="false" multiSelect="false">
        <Constraint type="ACCEPT" targetLocation="ioss\[\d+\]\.port\[\d+\]\.pin.*" valid="true" >
          <Parameter id="DriveModes" severity="DEFAULT" reason="">
            <Fixed value="CY_GPIO_DM_STRONG_IN_OFF" />
          </Parameter>
          <Parameter id="initialState" severity="DEFAULT" reason="">
            <Fixed value="0" />
          </Parameter>
        </Constraint>
      </ParamSignal>

      <ParamString templateId="cPwm$idx" id="loPinRcs" name="loPinRcs" group="Modulator/Phase $idx" default="`${getBlockFromSignal(&quot;tr_line_compl[0]&quot;)}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
      <ParamString templateId="cPwm$idx" id="loPinName" name="loPinName" group="Modulator/Phase $idx" default="`${getBlockDisplayName(loPinRcs, false)}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />

      <ParamSignal templateId="lPwm$idx" port="tr_line_compl[0]" name="Low Side Switch Output" group="Modulator/Phase $idx" visible="`${(getParamValue(&quot;buck&quot;, &quot;phaseNum&quot;) &gt; $idx) &amp;&amp; getParamValue(&quot;buck&quot;, &quot;sync&quot;)}`" desc="Complementary PWM output" canBeEmpty="false" multiSelect="false">
        <Constraint type="ACCEPT" targetLocation="ioss\[\d+\]\.port\[\d+\]\.pin.*" valid="true" >
          <Parameter id="DriveModes" severity="DEFAULT" reason="">
            <Fixed value="CY_GPIO_DM_STRONG_IN_OFF" />
          </Parameter>
          <Parameter id="initialState" severity="DEFAULT" reason="">
            <Fixed value="0" />
          </Parameter>
        </Constraint>
      </ParamSignal>

      <ParamString templateId="lPwm$idx" id="loPinRcs" name="loPinRcs" group="Modulator/Phase $idx" default="`${getBlockFromSignal(&quot;tr_line_compl[0]&quot;)}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
      <ParamString templateId="lPwm$idx" id="loPinName" name="loPinName" group="Modulator/Phase $idx" default="`${getBlockDisplayName(loPinRcs, false)}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />

      <ParamSignal templateId="hPwm$idx" port="tr_line_compl[0]" name="Low Side Switch Output" group="Modulator/Phase $idx" visible="`${(getParamValue(&quot;buck&quot;, &quot;phaseNum&quot;) &gt; $idx) &amp;&amp; getParamValue(&quot;buck&quot;, &quot;sync&quot;)}`" desc="Complementary PWM output" canBeEmpty="false" multiSelect="false">
        <Constraint type="ACCEPT" targetLocation="ioss\[\d+\]\.port\[\d+\]\.pin.*" valid="true" >
          <Parameter id="DriveModes" severity="DEFAULT" reason="">
            <Fixed value="CY_GPIO_DM_STRONG_IN_OFF" />
          </Parameter>
          <Parameter id="initialState" severity="DEFAULT" reason="">
            <Fixed value="0" />
          </Parameter>
        </Constraint>
      </ParamSignal>

      <ParamString templateId="hPwm$idx" id="loPinRcs" name="loPinRcs" group="Modulator/Phase $idx" default="`${getBlockFromSignal(&quot;tr_line_compl[0]&quot;)}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
      <ParamString templateId="hPwm$idx" id="loPinName" name="loPinName" group="Modulator/Phase $idx" default="`${getBlockDisplayName(loPinRcs, false)}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />

      <ParamString id="loPinName$idx" name="loPinName$idx" group="Modulator/Phase $idx" default="`${pccm ? getParamValue(&quot;cPwm$idx&quot;, &quot;loPinName&quot;) : hiRes ? getParamValue(&quot;hPwm$idx&quot;, &quot;loPinName&quot;) : getParamValue(&quot;lPwm$idx&quot;, &quot;loPinName&quot;)}`" visible="`${phase$idx &amp;&amp; debugMod}`" editable="false" desc="The Pin assignment can be changed in the Device configurator tool at Solution tab" />

      <ParamPlacement templateId="bPwm$idx" name="Blanking PWM Placement" group="Modulator/Phase $idx" desc="PWM consumed by this solution" visible="`${getParamValue(&quot;buck&quot;, &quot;pccm$idx&quot;)}`" />
      <ParamPlacement templateId="csg$idx" name="CSG Placement" group="Modulator/Phase $idx" desc="CSG Slice consumed by this solution" visible="`${getParamValue(&quot;buck&quot;, &quot;pccm$idx&quot;)}`" />
      <ParamPlacement templateId="dacTrig$idx" name="DAC input trigger" group="Modulator/Phase $idx" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" desc="" />
      <ParamPlacement templateId="compTrig$idx" name="Comparator output trigger" group="Modulator/Phase $idx" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" desc="" />
      <ParamRange templateId="csg$idx" id="sliceInst" name="sliceInst" group="Modulator/debug $idx" default="`${getInstNumber(&quot;slice&quot;)}`" min="0" max="4" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
      <ParamChoice templateId="csg$idx" id="compIn" name="Comparator Input" group="Modulator/Phase $idx" default="CY_HPPASS_COMP_POS_A" visible="`${getParamValue(&quot;buck&quot;, &quot;pccm$idx&quot;)}`" editable="`${getParamValue(&quot;buck&quot;, &quot;pccm$idx&quot;)}`" desc="Select CSG comparator positive pin.">
        <Entry name="AN_A`${sliceInst}`" value="CY_HPPASS_COMP_POS_A" visible="true" />
        <Entry name="AN_B`${sliceInst}`" value="CY_HPPASS_COMP_POS_B" visible="true" />
      </ParamChoice>
      <ParamRange templateId="bTrig$idx"   id="bTrigInst" name="bTrigInst" group="Modulator/Phase $idx" default="`${getInstNumber(&quot;input_trigger&quot;)}`" min="0" max="7" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
      <ParamRange templateId="dacTrig$idx" id="dacTrigInst" name="dacTrigInst" group="Modulator/Phase $idx" default="`${getInstNumber(&quot;input_trigger&quot;)}`" min="0" max="7" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
      <ParamString templateId="csg$idx" id="btrigSel" name="btrigSel" group="Modulator/Phase $idx" default="CY_HPPASS_COMP_TRIG_`${getParamValue(&quot;bTrig$idx&quot;, &quot;bTrigInst&quot;)}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
      <ParamString templateId="csg$idx" id="dactrigSel" name="dactrigSel" group="Modulator/Phase $idx" default="CY_HPPASS_DAC_START_TRIG_`${(0 == $idx) ? getParamValue(&quot;seqInTrig0&quot;, &quot;inTrigInst0&quot;) : getParamValue(&quot;dacTrig$idx&quot;, &quot;dacTrigInst&quot;)}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />
      <ParamRange templateId="compTrig$idx" id="compEn" name="compEn" group="Modulator/Phase $idx" default="`${toHex(1 &lt;&lt; getParamValue(&quot;csg$idx&quot;, &quot;sliceInst&quot;))}`" min="0" max="16" resolution="1" visible="`${getParamValue(&quot;buck&quot;, &quot;debugMod&quot;)}`" editable="false" desc="" />

      <ParamBool id="debugRout" name="debugRout" group="Internal Routing" default="false" visible="`${debug}`" editable="`${debug}`" desc="" />

      <ParamSignal templateId="cPwm$idx"     port="start[0]"        name="PWM start in"      group="Internal Routing/SyncStart"  visible="`${getParamValue(&quot;buck&quot;,&quot;pccm$idx&quot;)}`"                editable="`${getParamValue(&quot;buck&quot;, &quot;debugRout&quot;)}`" desc="This signal is routed automatically" canBeEmpty="false" />
      <ParamSignal templateId="cPwm$idx"     port="stop[0]"         name="PWM Kill 0 in"     group="Internal Routing/Phase $idx" visible="`${getParamValue(&quot;buck&quot;,&quot;pccm$idx&quot;) ? true :
                                                                                                                                             getParamValue(&quot;buck&quot;, &quot;prot&quot;)}`"                   editable="`${getParamValue(&quot;buck&quot;, &quot;debugRout&quot;)}`" desc="This signal is routed automatically" canBeEmpty="false" />
      <ParamSignal templateId="cPwm$idx"     port="capture1[0]"     name="PWM Kill 1 in"     group="Internal Routing/Protection" visible="`${getParamValue(&quot;buck&quot;,&quot;pccm$idx&quot;) &amp;&amp;
                                                                                                                                             getParamValue(&quot;buck&quot;, &quot;prot&quot;)}`"                   editable="`${getParamValue(&quot;buck&quot;, &quot;debugRout&quot;)}`" desc="This signal is routed automatically" canBeEmpty="false" />
      <ParamSignal templateId="cPwm$idx"     port="tr_out1[0]"      name="PWM tr_out1"       group="Internal Routing/Phase $idx" visible="`${getParamValue(&quot;buck&quot;,&quot;pccm$idx&quot;) || (0 == $idx)}`" editable="`${getParamValue(&quot;buck&quot;, &quot;debugRout&quot;)}`" desc="This signal is routed automatically" canBeEmpty="false" />
      <ParamSignal templateId="bPwm$idx"     port="start[0]"   name="Blanking PWM start in"  group="Internal Routing/SyncStart"  visible="`${getParamValue(&quot;buck&quot;,&quot;pccm$idx&quot;)}`"                editable="`${getParamValue(&quot;buck&quot;, &quot;debugRout&quot;)}`" desc="This signal is routed automatically" canBeEmpty="false" />
      <ParamSignal templateId="bPwm$idx"     port="stop[0]"    name="Blanking PWM Kill 0 in" group="Internal Routing/Protection" visible="`${getParamValue(&quot;buck&quot;,&quot;pccm$idx&quot;) &amp;&amp;
                                                                                                                                             getParamValue(&quot;buck&quot;, &quot;prot&quot;)}`"                   editable="`${getParamValue(&quot;buck&quot;, &quot;debugRout&quot;)}`" desc="This signal is routed automatically" canBeEmpty="false" />
      <ParamSignal templateId="bPwm$idx"     port="tr_out1[0]" name="Blanking PWM tr_out1"   group="Internal Routing/Phase $idx" visible="`${getParamValue(&quot;buck&quot;,&quot;pccm$idx&quot;) || (0 == $idx)}`" editable="`${getParamValue(&quot;buck&quot;, &quot;debugRout&quot;)}`" desc="This signal is routed automatically" canBeEmpty="false" />
      <ParamSignal templateId="lPwm$idx"     port="start[0]"        name="PWM start in"      group="Internal Routing/SyncStart"  visible="`${!getParamValue(&quot;buck&quot;, &quot;hiRes&quot;)}`"                 editable="`${getParamValue(&quot;buck&quot;, &quot;debugRout&quot;)}`" desc="This signal is routed automatically" canBeEmpty="false" />
      <ParamSignal templateId="lPwm$idx"     port="stop[0]"         name="PWM Kill 0 in"     group="Internal Routing/Protection" visible="`${!getParamValue(&quot;buck&quot;, &quot;hiRes&quot;) &amp;&amp;
                                                                                                                                              getParamValue(&quot;buck&quot;,&quot;phase$idx&quot;) &amp;&amp;
                                                                                                                                              getParamValue(&quot;buck&quot;, &quot;prot&quot;)}`"                  editable="`${getParamValue(&quot;buck&quot;, &quot;debugRout&quot;)}`" desc="This signal is routed automatically" canBeEmpty="false" />
      <ParamSignal templateId="lPwm$idx"     port="tr_out1[0]"      name="PWM tr_out1"       group="Internal Routing/Phase $idx" visible="`${!getParamValue(&quot;buck&quot;, &quot;hiRes&quot;) &amp;&amp;
                                                                                                                                             getParamValue(&quot;buck&quot;,&quot;pccm$idx&quot;) || (0 == $idx)}`" editable="`${getParamValue(&quot;buck&quot;, &quot;debugRout&quot;)}`" desc="This signal is routed automatically" canBeEmpty="false" />
      <ParamSignal templateId="hPwm$idx"     port="start[0]"        name="PWM start in"      group="Internal Routing/SyncStart"  visible="`${getParamValue(&quot;buck&quot;, &quot;hiRes&quot;)}`"                  editable="`${getParamValue(&quot;buck&quot;, &quot;debugRout&quot;)}`" desc="This signal is routed automatically" canBeEmpty="false" />
      <ParamSignal templateId="hPwm$idx"     port="stop[0]"         name="PWM Kill 0 in"     group="Internal Routing/Protection" visible="`${getParamValue(&quot;buck&quot;, &quot;hiRes&quot;) &amp;&amp;
                                                                                                                                             getParamValue(&quot;buck&quot;,&quot;phase$idx&quot;) &amp;&amp;
                                                                                                                                             getParamValue(&quot;buck&quot;, &quot;prot&quot;)}`"                   editable="`${getParamValue(&quot;buck&quot;, &quot;debugRout&quot;)}`" desc="This signal is routed automatically" canBeEmpty="false" />
      <ParamSignal templateId="hPwm$idx"     port="tr_out1[0]"      name="PWM tr_out1"       group="Internal Routing/Phase $idx" visible="`${getParamValue(&quot;buck&quot;, &quot;hiRes&quot;) &amp;&amp;
                                                                                                                                             getParamValue(&quot;buck&quot;,&quot;pccm$idx&quot;) || (0 == $idx)}`" editable="`${getParamValue(&quot;buck&quot;, &quot;debugRout&quot;)}`" desc="This signal is routed automatically" canBeEmpty="false" />
      <ParamSignal templateId="compTrig$idx" port="tr_level_out[0]" name="Comp tr_level_out" group="Internal Routing/Phase $idx" visible="`${getParamValue(&quot;buck&quot;,&quot;pccm$idx&quot;)}`"                editable="`${getParamValue(&quot;buck&quot;, &quot;debugRout&quot;)}`" desc="This signal is routed automatically" canBeEmpty="false" />
      <ParamSignal templateId="bTrig$idx"    port="tr_a_in[0]"  name="Comp blanking tr_a_in" group="Internal Routing/Phase $idx" visible="`${getParamValue(&quot;buck&quot;,&quot;pccm$idx&quot;)}`"                editable="`${getParamValue(&quot;buck&quot;, &quot;debugRout&quot;)}`" desc="This signal is routed automatically" canBeEmpty="false" />
      <ParamSignal templateId="dacTrig$idx"  port="tr_a_in[0]"      name="DAC start tr_a_in" group="Internal Routing/Phase $idx" visible="`${getParamValue(&quot;buck&quot;,&quot;pccm$idx&quot;) &amp;&amp; (0 != $idx)}`" editable="`${getParamValue(&quot;buck&quot;, &quot;debugRout&quot;)}`"  desc="This signal is routed automatically" canBeEmpty="false" />
    </Repeat>

    <ParamSignal templateId="lPwm0"    port="tr_out0[0]"    name="PWM tr_out0"   group="Internal Routing/SyncStart" visible="`${getParamValue(&quot;buck&quot;, &quot;vcm&quot;) &amp;&amp;
                                                                                                                               !getParamValue(&quot;buck&quot;, &quot;hiRes&quot;)}`" editable="`${getParamValue(&quot;buck&quot;, &quot;debugRout&quot;)}`" desc="This signal is routed automatically" canBeEmpty="false" />
    <ParamSignal templateId="hPwm0"    port="tr_out0[0]"    name="PWM tr_out0"   group="Internal Routing/SyncStart" visible="`${getParamValue(&quot;buck&quot;, &quot;vcm&quot;) &amp;&amp;
                                                                                                                                getParamValue(&quot;buck&quot;, &quot;hiRes&quot;)}`" editable="`${getParamValue(&quot;buck&quot;, &quot;debugRout&quot;)}`" desc="This signal is routed automatically" canBeEmpty="false" />
    <ParamSignal templateId="cPwm0"    port="tr_out0[0]"    name="PWM tr_out0"   group="Internal Routing/SyncStart" visible="`${getParamValue(&quot;buck&quot;, &quot;pccm&quot;)}`"  editable="`${getParamValue(&quot;buck&quot;, &quot;debugRout&quot;)}`" desc="This signal is routed automatically" canBeEmpty="false" />

    <ParamPlacement templateId="limTrig" name="ADC Limits output trigger" group="ADC" desc="" visible="`${getParamValue(&quot;buck&quot;, &quot;debugAdc&quot;)}`" />
    <ParamSignal templateId="limTrig" port="tr_level_out[0]" name="ADC Limits tr_level_out" group="Internal Routing/Protection" visible="`${getParamValue(&quot;buck&quot;, &quot;prot&quot;)}`" editable="`${getParamValue(&quot;buck&quot;, &quot;debugRout&quot;)}`" desc="This signal is routed automatically" canBeEmpty="false" />
    <ParamSignal templateId="seqInTrig0" port="tr_a_in[0]" name="ADC Seq 0 tr_a_in" group="Internal Routing/ADC"                visible="true"                                                   editable="`${getParamValue(&quot;buck&quot;, &quot;debugRout&quot;)}`" desc="This signal is routed automatically" canBeEmpty="false" />

    <!-- <ParamPlacement templateId="seqInTrig0" name="ADC Sequencer Control Loop Group input trigger" group="ADC" visible="`${getParamValue(&quot;buck&quot;, &quot;debug&quot;)}`" desc="" /> -->
    <!-- <ParamPlacement templateId="seq0"       name="ADC Sequencer Control Loop Group" group="ADC" visible="`${getParamValue(&quot;3shunt&quot;, &quot;debug&quot;)}`" desc="" /> -->
    <!-- <ParamPlacement templateId="seqInTrig1" name="ADC Sequencer Scheduled Group input trigger" group="ADC" visible="`${getParamValue(&quot;buck&quot;, &quot;debug&quot;)}`" desc="" /> -->
    <!-- <ParamPlacement templateId="seq1"       name="ADC Sequencer Scheduled Group" group="ADC" visible="`${getParamValue(&quot;3shunt&quot;, &quot;debug&quot;)}`" desc="" /> -->

    <ParamBool id="debugCodegen" name="debugCodegen" group="codegen" default="false" visible="`${debug}`" editable="`${debug}`" desc="" />
    <ParamString id="tab" name="tab" group="codegen" default="    " visible="`${debugCodegen}`" editable="false" desc="single tab" />
    <ParamBool id="isDiv" name="isDiv" group="codegen" default="`${fastDiv &gt; 1}`" visible="`${debugCodegen}`" editable="false" desc="" />
    <ParamString id="dtab" name="dtab" group="codegen" default="`${isDiv ? tab . tab : tab}`" visible="`${debugCodegen}`" editable="false" desc="conditional double tab" />
    <ParamString id="pwmBase" name="pwmBase" group="codegen" default="TCPWM`${getParamValue(pwmId0, &quot;pwmInst&quot;)}`" visible="`${debugCodegen}`" editable="false" desc="" />

    <Repeat count="4">
      <ParamRange  id="pwmNum$idx"  name="pwmNum$idx" group="codegen" default="`${phase$idx ? getParamValue(pwmId$idx, &quot;cntInst&quot;) : 0}`" min="0" max="1000" resolution="1" visible="`${phase$idx &amp;&amp; debugCodegen}`" editable="false" desc="" />
      <ParamRange id="bPwmNum$idx" name="bPwmNum$idx" group="codegen" default="`${phase$idx ? getParamValue(&quot;bPwm$idx&quot;, &quot;cntInst&quot;) : 0}`" min="0" max="1000" resolution="1" visible="`${phase$idx &amp;&amp; debugCodegen}`" editable="false" desc="" />
      <ParamString  id="clkDst$idx"  name="clkDst$idx" group="codegen" default="`${phase$idx ? &quot;PCLK_&quot; . pwmBase . &quot;_CLOCK_COUNTER_EN&quot; . pwmNum$idx : null}`" visible="`${phase$idx &amp;&amp; debugCodegen}`" editable="false" desc="" />
      <ParamString id="bClkDst$idx" name="bClkDst$idx" group="codegen" default="`${phase$idx ? &quot;PCLK_&quot; . pwmBase . &quot;_CLOCK_COUNTER_EN&quot; . bPwmNum$idx : null}`" visible="`${phase$idx &amp;&amp; debugCodegen}`" editable="false" desc="" />
      <ParamString templateId="cPwm$idx" id="cPwm$idxInstName" name="cPwm$idxInstName" group="codegen" default="`${INST_NAME}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugCodegen&quot;)}`" editable="false" desc="" />
      <ParamString templateId="bPwm$idx" id="bPwm$idxInstName" name="bPwm$idxInstName" group="codegen" default="`${INST_NAME}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugCodegen&quot;)}`" editable="false" desc="" />
      <ParamString templateId="lPwm$idx" id="lPwm$idxInstName" name="lPwm$idxInstName" group="codegen" default="`${INST_NAME}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugCodegen&quot;)}`" editable="false" desc="" />
      <ParamString templateId="hPwm$idx" id="hPwm$idxInstName" name="hPwm$idxInstName" group="codegen" default="`${INST_NAME}`" visible="`${getParamValue(&quot;buck&quot;, &quot;debugCodegen&quot;)}`" editable="false" desc="" />
      <ParamString id="pwm$idxInstName"  name="pwm$idxInstName" group="codegen" default="`${pccm ? getParamValue(&quot;cPwm$idx&quot;, &quot;cPwm$idxInstName&quot;) : hiRes ? getParamValue(&quot;hPwm$idx&quot;, &quot;hPwm$idxInstName&quot;) : getParamValue(&quot;lPwm$idx&quot;, &quot;lPwm$idxInstName&quot;)}`" visible="`${phase$idx &amp;&amp; debugCodegen}`" editable="false" desc="" />
      <ParamString  id="pwm$idxCfgName"  name="pwm$idxCfgName" group="codegen" default="`${pwm$idxInstName}`_config" visible="`${phase$idx &amp;&amp; debugCodegen}`" editable="false" desc="" />
      <ParamString id="bPwm$idxCfgName" name="bPwm$idxCfgName" group="codegen" default="`${getParamValue(&quot;bPwm$idx&quot;, &quot;bPwm$idxInstName&quot;) . &quot;_config&quot;}`" visible="`${phase$idx &amp;&amp; debugCodegen}`" editable="false" desc="" />

      <ParamString id="rslt" name="rslt" group="codegen" default="cy_rslt_t rslt = MTB_PWRCONV_RSLT_SUCCESS;&#13;    " visible="`${debugCodegen}`" editable="false" desc="" />
      <ParamString id="rtrn" name="rtrn" group="codegen" default="return rslt;" visible="`${debugCodegen}`" editable="false" desc="" />

      <ParamString id="pwmInitF$idx" name="pwmInitF$idx" group="codegen" default="`${phase$idx ? &quot;rslt |= (cy_rslt_t)Cy_TCPWM_PWM_Init(&quot; . pwmBase . &quot;, &quot; . pwmNum$idx . &quot;U, &amp;&quot; . pwm$idxCfgName . &quot;);&#13;    &quot; : null}`" visible="`${debugCodegen}`" editable="false" desc="" />
      <ParamString id="bPwmInitF$idx" name="bPwmInitF$idx" group="codegen" default="`${pccm$idx ? &quot;rslt |= (cy_rslt_t)Cy_TCPWM_PWM_Init(&quot; . pwmBase . &quot;, &quot; . bPwmNum$idx . &quot;U, &amp;&quot; . bPwm$idxCfgName . &quot;);&#13;    &quot; : null}`" visible="`${debugCodegen}`" editable="false" desc="" />

      <ParamString id="pwmEnF$idx" name="pwmEnF$idx" group="codegen" default="`${phase$idx ? &quot;Cy_TCPWM_PWM_Enable(&quot; . pwmBase . &quot;, &quot; . pwmNum$idx . &quot;U);&#13;    &quot; : null}`" visible="`${debugCodegen}`" editable="false" desc="" />
      <ParamRange  id="pwmIv$idx"  name="pwmIv$idx" group="codegen" default="`${phase$idx ? phaseCy + ($idx * pwmPeriodCy / phaseNum) : 0}`" min="0" max="1000000" resolution="1" visible="`${phase$idx &amp;&amp; debugCodegen}`" editable="false" desc="initial value" />
      <ParamRange  id="pwmIvw$idx"  name="pwmIvw$idx" group="codegen" default="`${phase$idx ? pwmIv$idx &lt; pwmPeriodCy ? pwmIv$idx : pwmIv$idx - pwmPeriodCy : 0}`" min="0" max="1000000" resolution="1" visible="`${phase$idx &amp;&amp; debugCodegen}`" editable="false" desc="initial value wrapped" />
      <ParamString id="pwmSCF$idx" name="pwmSCF$idx" group="codegen" default="`${phase$idx ? &quot;Cy_TCPWM_PWM_SetCounter(&quot; . pwmBase . &quot;, &quot; . pwmNum$idx . &quot;U, &quot; . pwmIvw$idx . &quot;U);&#13;    &quot; : null}`" visible="`${debugCodegen}`" editable="false" desc="" />
      <ParamString id="bPwmEnF$idx" name="bPwmEnF$idx" group="codegen" default="`${pccm$idx ? &quot;Cy_TCPWM_PWM_Enable(&quot; . pwmBase . &quot;, &quot; . bPwmNum$idx . &quot;U);&#13;    &quot; : null}`" visible="`${debugCodegen}`" editable="false" desc="" />
      <ParamString id="bPwmSCF$idx" name="bPwmSCF$idx" group="codegen" default="`${pccm$idx ? &quot;Cy_TCPWM_PWM_SetCounter(&quot; . pwmBase . &quot;, &quot; . bPwmNum$idx . &quot;U, &quot; . pwmIvw$idx . &quot;U);&#13;    &quot; : null}`" visible="`${debugCodegen}`" editable="false" desc="" />
      <ParamString id="dacSF$idx" name="dacSF$idx" group="codegen" default="`${pccm$idx ? &quot;Cy_HPPASS_DAC_Start(&quot; . getParamValue(&quot;csg$idx&quot;, &quot;sliceInst&quot;) . &quot;U, CY_HPPASS_DAC_HW);&#13;    &quot; : null}`" visible="`${debugCodegen}`" editable="false" desc="" />

      <ParamString id="pwmPF$idx" name="pwmPF$idx" group="codegen" default="`${phase$idx ? &quot;Cy_TCPWM_PWM_Disable(&quot; . pwmBase . &quot;, &quot; . pwmNum$idx . &quot;U);&#13;    &quot; : null}`" visible="`${debugCodegen}`" editable="false" desc="" />
      <ParamString id="bPwmPF$idx" name="bPwmPF$idx" group="codegen" default="`${pccm$idx ? &quot;Cy_TCPWM_PWM_Disable(&quot; . pwmBase . &quot;, &quot; . bPwmNum$idx . &quot;U);&#13;    &quot; : null}`" visible="`${debugCodegen}`" editable="false" desc="" />
      <ParamString id="dacPF$idx" name="dacPF$idx" group="codegen" default="`${pccm$idx ? &quot;Cy_HPPASS_DAC_Stop(&quot; . getParamValue(&quot;csg$idx&quot;, &quot;sliceInst&quot;) . &quot;U);&#13;    &quot; : null}`" visible="`${debugCodegen}`" editable="false" desc="" />

      <!-- control loop functions -->
      <!-- <ParamString id="dacUpd$idx" name="dacUpd$idx" group="codegen" default="`${pccm$idx ? &quot;Cy_HPPASS_DAC_SetHystereticValues(&quot; . getParamValue(&quot;csg$idx&quot;, &quot;sliceInst&quot;) . &quot;U, (uint16_t)&quot; . INST_NAME . &quot;_ctx.mod, locRes);&#13;    &quot; : null}`" visible="`${debugCodegen}`" editable="false" desc="" /> -->
      <ParamString id="dacUpd$idx" name="dacUpd$idx" group="codegen" default="`${pccm$idx ? &quot;HPPASS_CSG_SLICE_DAC_VAL_A(HPPASS, &quot; . getParamValue(&quot;csg$idx&quot;, &quot;sliceInst&quot;) . &quot;U) = (uint16_t)&quot; . INST_NAME . &quot;_ctx.mod;&#13;    HPPASS_CSG_SLICE_DAC_VAL_B(HPPASS, &quot; . getParamValue(&quot;csg$idx&quot;, &quot;sliceInst&quot;) . &quot;U) = locStop;&#13;    &quot; : null}`" visible="`${debugCodegen}`" editable="false" desc="" />
      <!-- <ParamString id="pwmUpd$idx" name="pwmUpd$idx" group="codegen" default="`${(phase$idx &amp;&amp; vcm) ? &quot;Cy_TCPWM_PWM_SetCompare0BufVal(&quot; . pwmBase . &quot;, &quot; . pwmNum$idx . &quot;U, &quot; . INST_NAME . &quot;_ctx.mod);&#13;    &quot; : null}`" visible="`${debugCodegen}`" editable="false" desc="" /> -->
      <ParamString id="pwmUpd$idx" name="pwmUpd$idx" group="codegen" default="`${(phase$idx &amp;&amp; vcm) ? &quot;TCPWM_GRP_CNT_CC0_BUFF(&quot; . pwmBase . &quot;, TCPWM_GRP_CNT_GET_GRP(&quot; . pwmNum$idx . &quot;U), &quot; . pwmNum$idx . &quot;U) = &quot; . INST_NAME . &quot;_ctx.mod;&#13;    &quot; : null}`" visible="`${debugCodegen}`" editable="false" desc="" />

      <ParamString id="pwmTrC$idx" name="pwmTrC$idx" group="codegen" default="`${phase$idx ? &quot;rslt |= (cy_rslt_t)Cy_TrigMux_Connect(trigLine, (uint32_t)&quot; . pwm$idxInstName . &quot;_start_0_TRIGGER_OUT, false, TRIGGER_TYPE_LEVEL);&#13;    &quot; : null}`" visible="`${debugCodegen}`" editable="false" desc="" />
      <ParamString id="bPwmTrC$idx" name="bPwmTrC$idx" group="codegen" default="`${pccm$idx ? &quot;rslt |= (cy_rslt_t)Cy_TrigMux_Connect(trigLine, (uint32_t)&quot; . getParamValue(&quot;bPwm$idx&quot;, &quot;bPwm$idxInstName&quot;) . &quot;_start_0_TRIGGER_OUT, false, TRIGGER_TYPE_LEVEL);&#13;    &quot; : null}`" visible="`${debugCodegen}`" editable="false" desc="" />
      <ParamString id="instTrR$idx" name="instTrR$idx" group="codegen" default="`${inst$idx ? &quot;rslt |= &quot; . instName$idx . &quot;_trig_route((uint32_t)&quot; . pwm0InstName . &quot;_tr_out0_0_TRIGGER_IN);&#13;    &quot; : null}`" visible="`${debugCodegen}`" editable="false" desc="" />
    </Repeat>

    <ParamString id="dacP" name="dacP" group="codegen" default="`${pccm ? &quot;uint32_t locStop = (((int32_t)&quot; . INST_NAME . &quot;_ctx.mod - (int32_t)&quot; . INST_NAME . &quot;_SLOPE_DELTA) &lt; (int32_t)&quot; . INST_NAME . &quot;_SLOPE_STOP_MIN) ? &quot; . INST_NAME . &quot;_SLOPE_STOP_MIN : (uint32_t)(&quot; . INST_NAME . &quot;_ctx.mod - &quot; . INST_NAME . &quot;_SLOPE_DELTA);&#13;    &quot; : null}`" visible="`${debugCodegen}`" editable="false" desc="" />
    <!-- <ParamString id="setTarg" name="setTarg" group="codegen" default="rslt |= mtb_pwrconv_set_target(&amp;`${INST_NAME}`, `${INST_NAME}`_TARGET);&#13;    " visible="`${debugCodegen}`" editable="false" desc="" /> -->
    <!-- <ParamString id="swTrig" name="swTrig" group="codegen" default="rslt |= Cy_TrigMux_SwTrigger(`${pwm0InstName}`_tr_out0_0_TRIGGER_IN, CY_TRIGGER_TWO_CYCLES);&#13;    " visible="`${debugCodegen}`" editable="false" desc="" /> -->

    <ParamString id="CrlIntr" name="CrlIntr" group="codegen" default="Cy_HPPASS_SAR_Result_ClearInterrupt(`${toHex((1 &lt;&lt; getParamValue(&quot;seq0&quot;, &quot;grpNum&quot;)) | (schedCbEn ? (1 &lt;&lt; getParamValue(&quot;seq1&quot;, &quot;grpNum&quot;)) : 0))}`U);&#13;" visible="`${debugCodegen}`" editable="false" desc="" />
    <ParamString id="SetIntrMsk" name="SetIntrMsk" group="codegen" default="    Cy_HPPASS_SAR_Result_SetInterruptMask(Cy_HPPASS_SAR_Result_GetInterruptMask() | `${toHex((1 &lt;&lt; getParamValue(&quot;seq0&quot;, &quot;grpNum&quot;)) | (schedCbEn ? (1 &lt;&lt; getParamValue(&quot;seq1&quot;, &quot;grpNum&quot;)) : 0))}`U);&#13;    " visible="`${debugCodegen}`" editable="false" desc="" />
    <ParamString id="ClrIntrMsk" name="ClrIntrMsk" group="codegen" default="Cy_HPPASS_SAR_Result_SetInterruptMask(Cy_HPPASS_SAR_Result_GetInterruptMask() &amp; &#126;`${toHex((1 &lt;&lt; getParamValue(&quot;seq0&quot;, &quot;grpNum&quot;)) | (schedCbEn ? (1 &lt;&lt; getParamValue(&quot;seq1&quot;, &quot;grpNum&quot;)) : 0))}`U);&#13;    " visible="`${debugCodegen}`" editable="false" desc="" />
    <!-- <ParamString id="CrlIntr0" name="CrlIntr0" group="codegen" default="Cy_HPPASS_SAR_Result_ClearInterrupt(CY_HPPASS_INTR_SAR_RESULT_GROUP_`${getParamValue(&quot;seq0&quot;, &quot;grpNum&quot;)}`);&#13;" visible="`${debugCodegen}`" editable="false" desc="" /> -->
    <ParamString id="CrlIntr0" name="CrlIntr0" group="codegen" default="HPPASS_SAR_RESULT_INTR(HPPASS) = CY_HPPASS_INTR_SAR_RESULT_GROUP_`${getParamValue(&quot;seq0&quot;, &quot;grpNum&quot;)}`;&#13;    " visible="`${debugCodegen}`" editable="false" desc="" />
    <ParamString id="CrlIntr1" name="CrlIntr1" group="codegen" default="`${schedCbEn ? &quot;Cy_HPPASS_SAR_Result_ClearInterrupt(CY_HPPASS_INTR_SAR_RESULT_GROUP_&quot; . getParamValue(&quot;seq1&quot;, &quot;grpNum&quot;) . &quot;);&#13;    &quot; : null}`" visible="`${debugCodegen}`" editable="false" desc="" />

    <ParamString id="customCb" name="customCb" group="codegen" default="`${!ctrLoop ? customCbName . &quot;(); /* Custom control loop callback */&#13;&quot; : null}`" visible="`${debugCodegen}`" editable="false" desc="" />
    <ParamString id="preCb" name="preCb" group="codegen" default="`${pre ? preCbName . &quot;(); /* Pre-processing callback */&#13;    &quot; : null}`" visible="`${debugCodegen}`" editable="false" desc="" />
    <!-- <ParamString id="regF" name="regF" group="codegen" default="`${ctrLoop ? INST_NAME . &quot;_ctx.mod = mtb_pwrconv_&quot; . (reg2 ? &quot;2p2z&quot; : &quot;3p3z&quot;) . &quot;_&quot; . (float ? &quot;float&quot; : &quot;fixed&quot;) . &quot;_process((int32_t)&quot; . INST_NAME . &quot;_ctx.err, &amp;&quot; . INST_NAME . &quot;_regCtx);&#13;&quot; : null}`" visible="`${debugCodegen}`" editable="false" desc="" /> -->
    <ParamString id="regF" name="regF" group="codegen" default="`${ctrLoop ? &quot;(void) mtb_pwrconv_&quot; . (reg2 ? &quot;2p2z&quot; : &quot;3p3z&quot;) . &quot;_&quot; . (float ? &quot;float&quot; : &quot;fixed&quot;) . &quot;_process(&amp;&quot; . INST_NAME . &quot;_regCtx, (int32_t)&quot; . INST_NAME . &quot;_ctx.err, &amp;&quot; . INST_NAME . &quot;_ctx.mod);&#13;&quot; : null}`" visible="`${debugCodegen}`" editable="false" desc="" />
    <ParamString id="postCb" name="postCb" group="codegen" default="`${post ? &quot;    &quot; . postCbName . &quot;(); /* Post-processing callback */&#13;&quot; : null}`" visible="`${debugCodegen}`" editable="false" desc="" />

    <ParamBool id="inFlash" name="Store Config in Flash" group="Advanced" default="true" visible="true" editable="true" desc="Controls configuration structure storage – in flash (const, true) or SRAM (not const, false)" />
    <ParamBool id="init" name="Initialize During Startup" group="Advanced" default="true" visible="true" editable="true" desc="Performs the automatic initialization within the init_cycfg_pwrconv() generated function." />
  </Parameters>

  <DRCs>
    <DRC type="ERROR" text="All PWMs must belong to the same Group"
    condition="`${((phaseNum &gt; 1) ? (getParamValue(pwmId0, &quot;grpInst&quot;) !=  getParamValue(pwmId1, &quot;grpInst&quot;)) : false) ||
                  ((phaseNum &gt; 2) ? (getParamValue(pwmId1, &quot;grpInst&quot;) !=  getParamValue(pwmId2, &quot;grpInst&quot;)) : false) ||
                  ((phaseNum &gt; 3) ? (getParamValue(pwmId2, &quot;grpInst&quot;) !=  getParamValue(pwmId3, &quot;grpInst&quot;)) : false)}`" />

    <DRC type="ERROR" text="Minimum input voltage cannot be greater than nominal input voltage" condition="`${vInMin &gt; vInNom}`">
      <FixIt action="SET_PARAM" target="vInMin" value="`${vInNom}`" valid="true" />
    </DRC>
    <DRC type="ERROR" text="Maximum input voltage cannot be less than nominal input voltage" condition="`${vInMax &lt; vInNom}`">
      <FixIt action="SET_PARAM" target="vInMax" value="`${vInNom}`" valid="true" />
    </DRC>
    <DRC type="ERROR" text="Input voltage should be greater than output voltage" condition="`${vOutNom &gt;= vInNom}`">
      <FixIt action="SET_PARAM" target="vInNom" value="`${vInMax}`" valid="true" />
    </DRC>
    <DRC type="ERROR" text="Minimum output voltage cannot be greater than nominal output voltage" condition="`${vOutMin &gt; vOutNom}`">
      <FixIt action="SET_PARAM" target="vOutMin" value="`${vOutNom}`" valid="true" />
    </DRC>
    <DRC type="ERROR" text="Maximum output voltage cannot be less than nominal output voltage" condition="`${vOutMax &lt; vOutNom}`">
      <FixIt action="SET_PARAM" target="vOutMax" value="`${vOutNom}`" valid="true" />
    </DRC>
    <DRC type="ERROR" text="Minimum output current cannot be greater than nominal output current" condition="`${iOutMin &gt; iOutNom}`">
      <FixIt action="SET_PARAM" target="iOutMin" value="`${iOutNom}`" valid="true" />
    </DRC>
    <DRC type="ERROR" text="Maximum output current cannot be less than nominal output current" condition="`${iOutMax &lt; iOutNom}`">
      <FixIt action="SET_PARAM" target="iOutMax" value="`${iOutNom}`" valid="true" />
    </DRC>

    <DRC type="ERROR" text="Invalid Channel $idx Name" condition="`${!chanNameOk$idx}`" repeatCount="16">
      <FixIt action="SET_PARAM" target="chanName$idx" value="`${chanNameDef$idx}`" valid="true" />
    </DRC>

    <DRC type="ERROR" text="For the 'Infineon Control loop' the feedback channel name must be either 'Vout' or 'Iout'" condition="`${ctrLoop &amp;&amp; (chanName0 ne &quot;Vout&quot;) &amp;&amp; (chanName0 ne &quot;Iout&quot;)}`">
      <FixIt action="SET_PARAM" target="chanName0" value="Vout" valid="true" />
      <FixIt action="SET_PARAM" target="chanName0" value="Iout" valid="true" />
    </DRC>

    <DRC type="ERROR" text="ADC channel $idx: underlimit value cannot be greater than overlimit value" condition="`${adcUsed &amp;&amp; chan$idx &amp;&amp; loProtVal$idx &gt; hiProtVal$idx}`" repeatCount="16">
      <FixIt action="SET_PARAM" target="hiProtVal$idx" value="`${loProtVal$idx}`" valid="true" />
      <FixIt action="SET_PARAM" target="loProtVal$idx" value="`${hiProtVal$idx}`" valid="true" />
    </DRC>
    <DRC type="WARNING" text="ADC channel $idx: underlimit ADC equivalent value cannot be greater than ADC reference voltage `${vRefV}`V divided by Sampler Gain" condition="`${adcUsed &amp;&amp; chan$idx &amp;&amp; loProtValEqv$idx &gt; (vRefV / inGain$idx)}`" repeatCount="16">
      <FixIt action="SET_PARAM" target="loProtVal$idx" value="`${vRefV / inGain$idx / exGain$idx - 0.001}`" valid="true" />
      <FixIt action="SET_PARAM" target="exGain$idx" value="`${vRefV / inGain$idx / loProtVal$idx - 0.001}`" valid="true" />
    </DRC>
    <DRC type="WARNING" text="ADC channel $idx: overlimit ADC equivalent value cannot be greater than ADC reference voltage `${vRefV}`V divided by Sampler Gain" condition="`${adcUsed &amp;&amp; chan$idx &amp;&amp; hiProtValEqv$idx &gt; (vRefV / inGain$idx)}`" repeatCount="16">
      <FixIt action="SET_PARAM" target="hiProtVal$idx" value="`${vRefV / inGain$idx / exGain$idx - 0.001}`" valid="true" />
      <FixIt action="SET_PARAM" target="exGain$idx" value="`${vRefV / inGain$idx / hiProtVal$idx - 0.001}`" valid="true" />
    </DRC>
    <DRC type="WARNING" text="The ADC feedback channel External Gain must be such that the ADC equivalent value cannot be greater than ADC reference voltage `${vRefV}`V divided by Sampler Gain" condition="`${adcUsed &amp;&amp; ctrLoop &amp;&amp; chan0 &amp;&amp; targetUnits * exGain0 &gt; (vRefV / inGain0)}`">
      <FixIt action="SET_PARAM" target="exGain0" value="`${vRefV / inGain0 / targetUnits - 0.001}`" valid="true" />
    </DRC>
    <DRC type="WARNING" text="The ADC feedback channel underlimit value cannot be greater than the target nominal value" condition="`${adcUsed &amp;&amp; ctrLoop &amp;&amp; loProtVal0 &gt; targetUnits}`" >
      <FixIt action="SET_PARAM" target="loProtVal0" value="`${targetUnits * 0.9}`" valid="true" />
    </DRC>
    <DRC type="WARNING" text="The ADC feedback channel overlimit value cannot be less than the target nominal value" condition="`${adcUsed &amp;&amp; ctrLoop &amp;&amp; hiProtVal0 &lt; targetUnits}`" >
      <FixIt action="SET_PARAM" target="hiProtVal0" value="`${targetUnits * 1.1}`" valid="true" />
    </DRC>

    <DRC type="WARNING" text="The Ramp step is too small (&lt;1), please increase &quot;Ramp update period&quot; or/and &quot;Ramp slope&quot; parameters" condition="`${rampStepCounts &lt; 1}`">
      <FixIt action="SET_PARAM" target="Trg" value="`${ceil(1000 / txCoef0 / Srg)}`" valid="true" />
      <FixIt action="SET_PARAM" target="Srg" value="`${ceil(1000 / txCoef0 / Trg)}`" valid="true" />
    </DRC>

    <DRC type="ERROR" text="Prior to the Power Converter initialization the HPPASS should be initialized" condition="`${init &amp;&amp; !hppassInit}`" >
      <FixIt action="SET_PARAM" target="pass[0].init" value="true" valid="true" />
      <FixIt action="SET_PARAM" target="init" value="false" valid="true" />
    </DRC>

    <DRC type="ERROR" text="Invalid Callback Name" condition="`${!preCbNameOk}`">
      <FixIt action="SET_PARAM" target="preCbName" value="`${defaultPreCbName}`" valid="true" />
    </DRC>
    <DRC type="ERROR" text="Invalid Callback Name" condition="`${!postCbNameOk}`">
      <FixIt action="SET_PARAM" target="postCbName" value="`${defaultPostCbName}`" valid="true" />
    </DRC>
    <DRC type="ERROR" text="Invalid Callback Name" condition="`${!customCbNameOk}`">
      <FixIt action="SET_PARAM" target="customCbName" value="`${defaultCustomCbName}`" valid="true" />
    </DRC>
    <DRC type="ERROR" text="Invalid Callback Name" condition="`${!schedCbNameOk}`">
      <FixIt action="SET_PARAM" target="schedCbName" value="`${defaultSchedCbName}`" valid="true" />
    </DRC>
    <DRC type="ERROR" text="Invalid Header File Name" condition="`${(headerName ne &quot;&quot;) &amp;&amp; !headerNameOk}`">
      <FixIt action="SET_PARAM" target="headerName" value="" valid="true" />
    </DRC>

    <DRC type="ERROR" text="The instance Name should not be 'pwrconv' to avoid code generation collisions" condition="`${&quot;pwrconv&quot; eq INST_NAME}`"/>
    <DRC type="ERROR" text="The Vout/Vin ratio cannot be less than 0.1817 if the Responsive Slope mode is selected" condition="`${dutyCycleNom &lt; 0.1817 &amp;&amp; RESP eq slopeMod &amp;&amp; pccm}`"/>

    <DRC type="ERROR" text="Reduce the 'Current sensing gain' or adjust the inductance or switching frequency settings to fit into the DAC range" condition="`${pccm &amp;&amp; (stabSlope * 1e3 / swFreq) &gt; (vddaV * dutyCycle)}`">
      <FixIt action="SET_PARAM" target="CurSenseGain" value="`${(vddaV * dutyCycle * L0Inductance * 5e-7 * swFreq / vOutNom) - 0.001}`" valid="true" />
    </DRC>
  </DRCs>

  <ConfigFirmware>
    <ConfigInclude value="cycfg_peripherals.h" include="true" />
    <ConfigInclude value="cycfg_routing.h" include="true" />
    <ConfigInclude value="cy_sysclk.h" include="`${clkUsed}`" />
    <ConfigInclude value="`${headerName}`.h" include="`${headerName ne &quot;&quot;}`" public="source" />

    <!-- <ConfigDefine name="`${pwm$idx_name}`_HW" value="TCPWM`${pwm$idx_tcpwmInst}`" public="true" include="true" repeatCount="4" /> -->
    <!-- <ConfigDefine name="`${pwm$idx_name}`_NUM" value="`${pwm$idx_cntInst}`UL" public="true" include="true" repeatCount="4" /> -->
    <!-- <ConfigDefine name="`${pwm$idx_name}`_MASK" value="(1UL &lt;&lt; `${pwm$idx_cntInst}`)" public="true" include="true" repeatCount="4" /> -->
    <!-- <ConfigDefine name="`${pwm$idx_name}`_INPUT_DISABLED" value="0x7U" public="false" include="true" repeatCount="4" /> -->

    <ConfigInclude value="mtb_pwrconv.h" include="true" />
    <ConfigInclude value="mtb_pwrconv_2p2z_float.h" include="`${reg2 &amp;&amp; float}`" />
    <ConfigInclude value="mtb_pwrconv_2p2z_fixed.h" include="`${reg2 &amp;&amp; !float}`" />
    <ConfigInclude value="mtb_pwrconv_3p3z_float.h" include="`${reg3 &amp;&amp; float}`" />
    <ConfigInclude value="mtb_pwrconv_3p3z_fixed.h" include="`${reg3 &amp;&amp; !float}`" />

    <!-- <ConfigDefine name="MTB_PWRCONV_CFG" value="true" public="true" include="true" /> -->
    <!-- <ConfigDefine name="MTB_PWRCONV_REG" value="`${regulator}`" public="true" include="true" /> -->
    <!-- <ConfigDefine name="MTB_PWRCONV_MATH" value="MTB_PWRCONV_FLOAT" public="true" include="true" /> -->
    <!-- <ConfigDefine name="MTB_PWRCONV_MULTIPHASE" value="true" public="true" include="`${phaseNum &gt; 1}`" /> -->

    <ConfigDefine name="`${INST_NAME}`_ADC_CTRLOOP_IRQn" value="(`${getParamValue(makeId(&quot;seq0&quot;, &quot;irqn&quot;))}`)" public="true" include="`${fastIsr}`" />
    <ConfigDefine name="`${INST_NAME}`_ADC_SCHEDULED_IRQn" value="(`${getParamValue(makeId(&quot;seq1&quot;, &quot;irqn&quot;))}`)" public="true" include="`${sched}`" />

    <!-- <ConfigDefine name="`${INST_NAME}`_PWM_HW" value="TCPWM`${getParamValue(pwmId0, &quot;pwmInst&quot;)}`" public="true" include="true" /> -->

    <!-- <ConfigDefine name="`${INST_NAME}`_PHASE_`${$idx}`_PWM_NUM" value="`${getParamValue(pwmId$idx, &quot;cntInst&quot;)}`UL" public="true" include="`${phase$idx}`" repeatCount="4" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_PHASE_`${$idx}`_BLANK_PWM_NUM" value="`${getParamValue(&quot;bPwm$idx&quot;, &quot;cntInst&quot;)}`UL" public="true" include="`${pccm &amp;&amp; phase$idx}`" repeatCount="4" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_PHASE_`${$idx}`_CSG_NUM" value="`${getParamValue(&quot;csg$idx&quot;, &quot;sliceInst&quot;)}`U" public="true" include="`${pccm &amp;&amp; phase$idx}`" repeatCount="4" /> -->

    <!-- <ConfigDefine name="`${INST_NAME}`_CTRL_MODE" value="`${mod}`" public="true" include="true" /> -->

    <!-- <ConfigDefine name="`${INST_NAME}`_V_IN_MIN" value="`${vInMin}`" public="true" include="true" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_V_IN_MAX" value="`${vInMax}`" public="true" include="true" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_V_IN_NOM" value="`${vInNom}`" public="true" include="true" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_V_OUT_NOM" value="`${vOutNom}`" public="true" include="true" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_V_OUT_PKPK" value="`${vOutPkpk}`U" public="true" include="true" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_V_OUT_OVERSHOOT" value="`${vOutOvershoot}`U" public="true" include="true" /> -->

    <!-- <ConfigDefine name="`${INST_NAME}`_I_OUT_NOM" value="`${iOutNom}`" public="true" include="true" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_I_OUT_PKPK" value="`${iOutPkpk}`U" public="true" include="true" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_I_OUT_TRANS" value="`${iOutTrans}`U" public="true" include="true" /> -->

    <!-- <ConfigDefine name="`${INST_NAME}`_L0_INDUCTANCE" value="`${L0Inductance}`" public="true" include="true" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_L0_ESR" value="`${Lesr}`" public="true" include="true" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_C0_CAPACITANCE" value="`${C0Capacitance}`" public="true" include="true" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_C0_ESR" value="`${C0Esr}`" public="true" include="true" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_CUR_SENSE_GAIN" value="`${CurSenseGain}`" public="true" include="`${reg2}`" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_COMPENSATION_RAMP" value="`${CompensRamp}`" public="true" include="`${reg2}`" /> -->

    <!-- <ConfigDefine name="`${INST_NAME}`_PHASE_NUM" value="`${phaseNum}`U" public="true" include="true" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_SW_FREQ" value="`${swFreq}`UL" public="true" include="true" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_TIME_DELAY" value="`${TimeDelay}`" public="true" include="true" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_FAST_DIV" value="`${fastDiv}`U" public="true" include="true" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_CROSSOVER_FREQ" value="`${CrossoverFreq}`UL" public="true" include="true" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_PHASE_MARGIN" value="`${PhaseMargin}`U" public="true" include="true" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_EFFICIENCY" value="`${Efficiency}`U" public="true" include="true" /> -->

    <!-- <ConfigDefine name="`${INST_NAME}`_HIGH_RES" value="`${hiRes}`" public="true" include="true" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_RISING_DEAD_TIME" value="`${rDeadNs}`UL" public="true" include="true" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_FALLING_DEAD_TIME" value="`${fDeadNs}`UL" public="true" include="true" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_DUTY_CYCLE_MAX" value="`${dutyCycleMax}`U" public="true" include="true" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_PASSIVE_LEVEL_OUTPUT" value="`${pasOut}`" public="true" include="true" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_CSG_BLANK_TIME" value="`${csgBlankTime}`" public="true" include="`${reg2}`" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_CSG_START_VALUE" value="`${dacStartValue}`" public="true" include="`${reg2}`" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_CSG_STOP_VALUE" value="`${dacStopValue}`" public="true" include="`${reg2}`" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_CSG_SLOPE_VALUE" value="`${CompensRamp}`" public="true" include="`${reg2}`" /> -->

    <ConfigDefine name="`${INST_NAME}`_A1" value="((float32_t)`${aut ? A1Auto : A1Manual}`)" public="true" include="`${ctrLoop &amp;&amp; float}`"/>
    <ConfigDefine name="`${INST_NAME}`_A2" value="((float32_t)`${aut ? A2Auto : A2Manual}`)" public="true" include="`${ctrLoop &amp;&amp; float}`"/>
    <ConfigDefine name="`${INST_NAME}`_A3" value="((float32_t)`${aut ? A3Auto : A3Manual}`)" public="true" include="`${reg3 &amp;&amp; float}`"/>
    <ConfigDefine name="`${INST_NAME}`_B$idx" value="((float32_t)`${aut ? B$idxAuto : B$idxManual}`)" public="true" include="`${reg2 &amp;&amp; float}`" repeatCount="3" />
    <ConfigDefine name="`${INST_NAME}`_B$idx" value="((float32_t)`${aut ? B$idxAuto : B$idxManual}`)" public="true" include="`${reg3 &amp;&amp; float}`" repeatCount="4" />
    <ConfigDefine name="`${INST_NAME}`_K" value="((float32_t)`${aut ? KAuto : KManual}`)" public="true" include="`${ctrLoop &amp;&amp; float}`" />

    <ConfigDefine name="`${INST_NAME}`_TARGET" value="(`${targetUnits * 1000}`U)" public="true" include="true" />

    <!-- <ConfigDefine name="MTB_PWRCONV_ANTI_WINDUP" value="true" public="true" include="true" /> -->

    <ConfigDefine name="`${INST_NAME}`_SLOPE_START_MAX" value="(`${MaxDutyTicks}`UL)" public="true" include="`${pccm}`" />
    <ConfigDefine name="`${INST_NAME}`_SLOPE_START_MIN" value="(`${dacStartMin}`UL)" public="true" include="`${pccm}`" />
    <ConfigDefine name="`${INST_NAME}`_SLOPE_STOP_MIN" value="(`${dacStopMin}`UL)" public="true" include="`${pccm}`" />
    <ConfigDefine name="`${INST_NAME}`_SLOPE_DELTA" value="(`${slopeDelta}`UL)" public="true" include="`${pccm}`" />

    <!-- Calculated -->
    <!-- <ConfigDefine name="`${INST_NAME}`_TOTAL_LOSSES_ACTUAL" value="`${totalLossesActual}`" public="true" include="true" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_EFFICIENCY_ACTUAL" value="`${efficiencyActual}`" public="true" include="true" /> -->
    <!-- <ConfigDefine name="`${INST_NAME}`_SWITCHING_PERIOD" value="`${SwitchingPeriod}`" public="true" include="true" /> -->

    <ConfigDefine name="`${INST_NAME}`_`${getParamValue(&quot;buck&quot;, &quot;chanName$idx&quot;)}`_MIN" value="(`${floor(loProtVal$idx * txCoef$idx)}`U)" public="true" include="`${chan$idx}`" repeatCount="16" />
    <ConfigDefine name="`${INST_NAME}`_`${getParamValue(&quot;buck&quot;, &quot;chanName$idx&quot;)}`_MAX" value="(`${ceil(hiProtVal$idx * txCoef$idx)}`U)" public="true" include="`${chan$idx}`" repeatCount="16" />

    <ConfigStruct name="`${INST_NAME}`_regFreq" type="mtb_stc_pwrconv_reg_2p2z_float_freq_t" const="`${inFlash}`" public="true" include="`${reg2}`" >
      <ConfigArray name="p" type="nested" const="false" public="true" include="true" >
        <ArrayElement value="(float32_t)`${aut ? Pole$idx{0}Auto : Pole$idx{0}Manual}`" count="2" />
      </ConfigArray>
      <ConfigArray name="z" type="nested" const="false" public="true" include="true" >
        <ArrayElement value="`${($idx{0} == 0) ? (&quot;(float32_t)0&quot;) : (&quot;(float32_t)&quot; . (aut ? Zero$idx{0}Auto : Zero$idx{0}Manual))}`" count="2" />
      </ConfigArray>

    </ConfigStruct>

    <ConfigStruct name="`${INST_NAME}`_regFreq" type="mtb_stc_pwrconv_reg_3p3z_float_freq_t" const="`${inFlash}`" public="true" include="`${reg3}`" >
      <ConfigArray name="p" type="nested" const="false" public="true" include="true" >
        <ArrayElement value="(float32_t)`${aut ? Pole$idx{0}Auto : Pole$idx{0}Manual}`" count="3" />
      </ConfigArray>
      <ConfigArray name="z" type="nested" const="false" public="true" include="true" >
        <ArrayElement value="`${($idx{0} == 0) ? (&quot;(float32_t)0&quot;) : (&quot;(float32_t)&quot; . (aut ? Zero$idx{0}Auto : Zero$idx{0}Manual))}`" count="3" />
      </ConfigArray>
    </ConfigStruct>

    <ConfigVariable name="`${INST_NAME}`_ctx" type="mtb_stc_pwrconv_ctx_t" const="false" value="" public="true" include="true" />
    <ConfigVariable name="`${INST_NAME}`_regCtx" type="mtb_stc_pwrconv_reg_2p2z_float_ctx_t" const="false" value="" public="true" include="`${reg2 &amp;&amp; float}`" />
    <ConfigVariable name="`${INST_NAME}`_regCtx" type="mtb_stc_pwrconv_reg_2p2z_fixed_ctx_t" const="false" value="" public="true" include="`${reg2 &amp;&amp; !float}`" />
    <ConfigVariable name="`${INST_NAME}`_regCtx" type="mtb_stc_pwrconv_reg_3p3z_float_ctx_t" const="false" value="" public="true" include="`${reg3 &amp;&amp; float}`" />
    <ConfigVariable name="`${INST_NAME}`_regCtx" type="mtb_stc_pwrconv_reg_3p3z_fixed_ctx_t" const="false" value="" public="true" include="`${reg3 &amp;&amp; !float}`" />

    <!-- <ConfigStruct name="`${INST_NAME}`_ctrloop_interrupt" type="cy_stc_sysint_t" const="false" public="true" include="`${fastIsr}`" > -->
      <!-- <Member name="intrSrc" value="`${INST_NAME}`_ADC_CTRLOOP_IRQn" /> -->
      <!-- <Member name="intrPriority" value="1U" /> -->
    <!-- </ConfigStruct> -->

    <!-- <ConfigStruct name="`${INST_NAME}`_scheduled_interrupt" type="cy_stc_sysint_t" const="false" public="true" include="`${schedCbEn}`" > -->
      <!-- <Member name="intrSrc" value="`${INST_NAME}`_ADC_SCHEDULED_IRQn" /> -->
      <!-- <Member name="intrPriority" value="2U" /> -->
    <!-- </ConfigStruct> -->

    <ConfigStruct name="`${INST_NAME}`_regCfg" type="mtb_stc_pwrconv_reg_2p2z_float_cfg_t" const="`${inFlash}`" public="true" include="`${reg2 &amp;&amp; float}`" >
      <ConfigArray name="a" type="nested" const="false" public="true" include="true" >
        <ArrayElement value="`${$idx{0} == 0 ? &quot;(float32_t)0&quot; : INST_NAME . &quot;_A&quot; . $idx{0}}`" count="3" />
      </ConfigArray>
      <ConfigArray name="b" type="nested" const="false" public="true" include="true" >
        <ArrayElement value="`${INST_NAME}`_B$idx{0} * `${INST_NAME}`_K" count="3" />
      </ConfigArray>
      <Member name="min"  value="(float32_t)`${INST_NAME}`_SLOPE_START_MIN" />
      <Member name="max"  value="(float32_t)`${INST_NAME}`_SLOPE_START_MAX" />
    </ConfigStruct>

    <ConfigStruct name="`${INST_NAME}`_regCfg" type="mtb_stc_pwrconv_reg_3p3z_float_cfg_t" const="`${inFlash}`" public="true" include="`${reg3 &amp;&amp; float}`" >
      <ConfigArray name="a" type="nested" const="false" public="true" include="true" >
        <ArrayElement value="`${$idx{0} == 0 ? &quot;(float32_t)0&quot; : INST_NAME . &quot;_A&quot; . $idx{0}}`" count="4" />
      </ConfigArray>
      <ConfigArray name="b" type="nested" const="false" public="true" include="true" >
        <ArrayElement value="`${INST_NAME}`_B$idx{0} * `${INST_NAME}`_K" count="4" />
      </ConfigArray>
      <Member name="min"  value="(float32_t)0" />
      <Member name="max"  value="(float32_t)`${MaxDutyTicks}`" />
    </ConfigStruct>

    <ConfigStruct name="`${INST_NAME}`" type="mtb_stc_pwrconv_t" const="`${inFlash}`" public="true" include="true" >
      <Member name="type" value="MTB_PWRCONV_BUCK" />
      <Member name="targ" value="`${INST_NAME}`_TARGET" />
      <Member name="targMax" value="`${ctrLoop ? targetMax * 1000 : 0xFFFFFFFF}`U" />
      <Member name="targMin" value="`${ctrLoop ? targetMin * 1000 : 0}`U" />
      <Member name="refNum" value="`${ctrLoop ? ceil(exGain0 * inGain0 * pow(2, AdcBits)) : 1}`U" />
      <Member name="refDen" value="`${ctrLoop ? vRefMv : 1}`U" />
      <Member name="rampStep" value="`${rampStepCounts}`U" />
      <Member name="ctx" value="&amp;`${INST_NAME}`_ctx" />
      <Member name="init_reg" value="`${ctrLoop ? &quot;&amp;&quot; . INST_NAME . &quot;_init_reg&quot; : &quot;NULL&quot;}`" />
      <Member name="syncStartTrig" value="(uint32_t)`${pwm0InstName}`_tr_out0_0_TRIGGER_IN" />
      <Member name="init_hw" value="&amp;`${INST_NAME}`_init_hw" />
      <Member name="enable_hw" value="&amp;`${INST_NAME}`_enable_hw" />
      <Member name="disable_hw" value="&amp;`${INST_NAME}`_disable_hw" />
    </ConfigStruct>

    <ConfigExternFunction signature="void `${preCbName}`(void)" include="`${pre}`" />
    <ConfigExternFunction signature="void `${postCbName}`(void)" include="`${post}`" />
    <ConfigExternFunction signature="void `${customCbName}`(void)" include="`${!ctrLoop}`" />
    <ConfigExternFunction signature="void `${schedCbName}`(void)" include="`${schedCbEn}`" />
    <ConfigExternFunction signature="void mtb_pwrconv_run(mtb_stc_pwrconv_ctx_t * ctx)" include="`${!last}`" />

    <ConfigFunction signature="cy_rslt_t `${INST_NAME}`_init_hw(void)" public="true" include="true" body="`${rslt}``${pwmInitF0}``${pwmInitF1}``${pwmInitF2}``${pwmInitF3}``${bPwmInitF0}``${bPwmInitF1}``${bPwmInitF2}``${bPwmInitF3}``${rtrn}`" />
    <ConfigFunction signature="cy_rslt_t `${INST_NAME}`_enable_hw(void)" public="true" include="true"
                    body="    `${pwmEnF0}``${pwmEnF1}``${pwmEnF2}``${pwmEnF3}``${bPwmEnF0}``${bPwmEnF1}``${bPwmEnF2}``${bPwmEnF3}``${pwmSCF0}``${pwmSCF1}``${pwmSCF2}``${pwmSCF3}``${bPwmSCF0}``${bPwmSCF1}``${bPwmSCF2}``${bPwmSCF3}``${hppassInstName}`_start();&#xA;
   `${CrlIntr}``${SetIntrMsk}``${dacSF0}``${dacSF1}``${dacSF2}``${dacSF3}`return MTB_PWRCONV_RSLT_SUCCESS;" />
    <ConfigFunction signature="cy_rslt_t `${INST_NAME}`_disable_hw(void)"  public="true" include="true"
                    body="`${pwmPF0}``${ClrIntrMsk}``${pwmPF1}``${pwmPF2}``${pwmPF3}``${bPwmPF0}``${bPwmPF1}``${bPwmPF2}``${bPwmPF3}``${dacPF0}``${dacPF1}``${dacPF2}``${dacPF3}`return MTB_PWRCONV_RSLT_SUCCESS;" />

    <ConfigFunction signature="cy_rslt_t `${INST_NAME}`_init_reg(void)"  public="true" include="`${reg2 &amp;&amp; float}`"  body="    return mtb_pwrconv_2p2z_float_init(&amp;`${INST_NAME}`_regCtx, &amp;`${INST_NAME}`_regCfg);" />
    <ConfigFunction signature="cy_rslt_t `${INST_NAME}`_init_reg(void)"  public="true" include="`${reg2 &amp;&amp; !float}`" body="    return mtb_pwrconv_2p2z_fixed_init(&amp;`${INST_NAME}`_regCtx, &amp;`${INST_NAME}`_regCfg);" />
    <ConfigFunction signature="cy_rslt_t `${INST_NAME}`_init_reg(void)"  public="true" include="`${reg3 &amp;&amp; float}`"  body="    return mtb_pwrconv_3p3z_float_init(&amp;`${INST_NAME}`_regCtx, &amp;`${INST_NAME}`_regCfg);" />
    <ConfigFunction signature="cy_rslt_t `${INST_NAME}`_init_reg(void)"  public="true" include="`${reg3 &amp;&amp; !float}`" body="    return mtb_pwrconv_3p3z_fixed_init(&amp;`${INST_NAME}`_regCtx, &amp;`${INST_NAME}`_regCfg);" />

    <!-- <ConfigFunction signature="cy_rslt_t `${INST_NAME}`_read_reg_config(mtb_stc_pwrconv_reg_`${reg2 ? &quot;2p2z_&quot; : &quot;3p3z_&quot;}``${float ? &quot;float&quot; : &quot;fixed&quot;}`_cfg_t * dest)"  public="true" include="`${reg2 || reg3}`"  body="    *dest = `${INST_NAME}`_regCfg;&#xA;    return MTB_PWRCONV_RSLT_SUCCESS;" /> -->

    <ConfigFunction signature="cy_rslt_t `${INST_NAME}`_init(void)"                public="true" include="true" body="    return mtb_pwrconv_init(&amp;`${INST_NAME}`);" />
    <ConfigFunction signature="cy_rslt_t `${INST_NAME}`_enable(void)"              public="true" include="true" body="    return mtb_pwrconv_enable(&amp;`${INST_NAME}`);" />
    <ConfigFunction signature="cy_rslt_t `${INST_NAME}`_start(void)"               public="true" include="true" body="    return mtb_pwrconv_start(&amp;`${INST_NAME}`);" />
    <ConfigFunction signature="cy_rslt_t `${INST_NAME}`_disable(void)"             public="true" include="true" body="    return mtb_pwrconv_disable(&amp;`${INST_NAME}`);" />
    <ConfigFunction signature="cy_rslt_t `${INST_NAME}`_set_target(uint32_t targ)" public="true" include="true" body="    return mtb_pwrconv_set_target(&amp;`${INST_NAME}`, targ);" />
    <ConfigFunction signature="cy_rslt_t `${INST_NAME}`_get_state(uint32_t mask)"  public="true" include="true" body="    return mtb_pwrconv_get_state(&amp;`${INST_NAME}`, mask);" />
    <ConfigFunction signature="void `${INST_NAME}`_ramp(void)"                     public="true" include="true" body="    mtb_pwrconv_ramp(&amp;`${INST_NAME}`);" />

    <!-- <ConfigFunction signature="`${ram ? &quot;CY_RAMFUNC_BEGIN &quot; : &quot;&quot;}`void `${INST_NAME}`_ctrloop_isr(void)" public="false" include="`${fastIsr}`" suffix="`${ram ? &quot;CY_RAMFUNC_END&quot; : &quot;&quot;}`" -->
                    <!-- body="`${CrlIntr0}``${ctrLoop ? &quot;    uint16_t locRes = (uint16_t)*CY_HPPASS_SAR_CHAN_RSLT_PTR(&quot; . getParamValue(&quot;chan0&quot;, &quot;chanInst0&quot;) . &quot;); /* Retrieving the ADC feedback */&#13;    &quot; . INST_NAME . &quot;_ctx.res = locRes; /* Store the feedback value */&#13;    &quot; . INST_NAME . &quot;_ctx.err = (int16_t)&quot; . INST_NAME . &quot;_ctx.ref - (int16_t)locRes; /* Calculate the error value */&#13;&quot; : null}` -->
   <!-- `${customCb}``${preCb}``${regF}``${postCb}` -->
   <!-- `${dacP}``${dacUpd0}``${dacUpd1}``${dacUpd2}``${dacUpd3}``${pwmUpd0}``${pwmUpd1}``${pwmUpd2}``${pwmUpd3}`" /> -->
    <ConfigFunction signature="__STATIC_FORCEINLINE int32_t `${INST_NAME}`_get_error(void)" public="in_header_file_only" include="true" body="return mtb_pwrconv_get_error(&amp;`${INST_NAME}`_ctx);" />

    <ConfigFunction signature="`${ram ? &quot;CY_RAMFUNC_BEGIN &quot; : &quot;&quot;}`void `${INST_NAME}`_ctrloop_isr(void)" public="true" include="`${fastIsr}`" suffix="`${ram ? &quot;CY_RAMFUNC_END&quot; : &quot;&quot;}`"
                    body="`${CrlIntr0}``${ctrLoop ? INST_NAME . &quot;_ctx.res = *CY_HPPASS_SAR_CHAN_RSLT_PTR(&quot; . getParamValue(&quot;chan0&quot;, &quot;chanInst0&quot;) . &quot;);&#13;    (void) &quot; . INST_NAME . &quot;_get_error();&#13;    &quot; : null}``${customCb}``${preCb}``${regF}``${postCb}`
   `${dacP}``${dacUpd0}``${dacUpd1}``${dacUpd2}``${dacUpd3}``${pwmUpd0}``${pwmUpd1}``${pwmUpd2}``${pwmUpd3}`" />

    <ConfigFunction signature="void `${INST_NAME}`_scheduled_isr(void)" public="false" include="`${schedCbEn}`" body="`${CrlIntr1}``${schedCbName}`();" />
    <ConfigFunction signature="void `${INST_NAME}`_scheduled_adc_trigger(void)" public="true" include="`${sched}`"
                    body="Cy_HPPASS_SetFwTriggerPulse(`${toHex(1 &lt;&lt; getParamValue(&quot;seqInTrig1&quot;, &quot;inTrigInst1&quot;))}`U);" />

    <ConfigFunction signature="__STATIC_FORCEINLINE uint32_t `${INST_NAME}`_`${chanName0}`_get_result(void)" public="in_header_file_only" include="`${ctrLoop}`" body="return `${INST_NAME}`_ctx.res;" />
    <ConfigFunction signature="__STATIC_FORCEINLINE uint32_t `${INST_NAME}`_`${chanName$idx}`_get_result(void)" public="in_header_file_only" include="`${(!ctrLoop || ($idx != 0)) &amp;&amp; chan$idx}`" repeatCount="16"
                    body="return *CY_HPPASS_SAR_CHAN_RSLT_PTR(`${getParamValue(&quot;chan$idx&quot;, &quot;chanInst$idx&quot;)}`U);" />

    <!-- multi-instance sync-start -->
    <ConfigFunction signature="cy_rslt_t `${INST_NAME}`_trig_route(uint32_t trigLine)" public="true" include="`${!last}`" body="`${rslt}``${pwmTrC0}``${pwmTrC1}``${pwmTrC2}``${pwmTrC3}``${bPwmTrC0}``${bPwmTrC1}``${bPwmTrC2}``${bPwmTrC3}`mtb_pwrconv_run(&amp;`${INST_NAME}`_ctx);&#13;    `${rtrn}`" />
    <ConfigFunction signature="cy_rslt_t pwrconv_start(void)" public="true" include="`${last &amp;&amp; (inst != 0)}`" body="`${rslt}``${instTrR0}``${instTrR1}``${instTrR2}`rslt |= mtb_pwrconv_start(&amp;`${INST_NAME}`);&#13;    `${rtrn}`" />

    <ConfigInstruction purpose="INITIALIZE" value="static cy_stc_sysint_t `${INST_NAME}`_ctrloop_interrupt=&#13;    {&#13;        .intrSrc = `${INST_NAME}`_ADC_CTRLOOP_IRQn,&#13;        .intrPriority = 1U,&#13;    };" include="`${fastIsr}`" />
    <ConfigInstruction purpose="INITIALIZE" value="static cy_stc_sysint_t `${INST_NAME}`_scheduled_interrupt=&#13;    {&#13;        .intrSrc = `${INST_NAME}`_ADC_SCHEDULED_IRQn,&#13;        .intrPriority = 2U,&#13;    };" include="`${schedCbEn}`" />

    <ConfigInstruction purpose="INITIALIZE" value="(void)Cy_SysClk_PeriphAssignDivider(`${clkDst$idx}`, `${getExposedMember(clkRcs, &quot;clockSel&quot;)}`);" include="`${clkUsed &amp;&amp; phase$idx}`" repeatCount="4" />
    <ConfigInstruction purpose="INITIALIZE" value="(void)Cy_SysClk_PeriphAssignDivider(`${bClkDst$idx}`, `${getExposedMember(clkRcs, &quot;clockSel&quot;)}`);" include="`${clkUsed &amp;&amp; phase$idx &amp;&amp; pccm}`" repeatCount="4" />
    <ConfigInstruction purpose="INITIALIZE" value="(void)`${INST_NAME}`_init();" include="`${init}`" />
    <ConfigInstruction purpose="INITIALIZE" value="(void)Cy_SysInt_Init(&amp;`${INST_NAME}`_ctrloop_interrupt, `${INST_NAME}`_ctrloop_isr);" include="`${fastIsr}`" />
    <ConfigInstruction purpose="INITIALIZE" value="(void)Cy_SysInt_Init(&amp;`${INST_NAME}`_scheduled_interrupt, `${INST_NAME}`_scheduled_isr);" include="`${schedCbEn}`" />
    <ConfigInstruction purpose="INITIALIZE" value="NVIC_ClearPendingIRQ(`${getParamValue(makeId(&quot;seq0&quot;, &quot;irqn&quot;))}`);" include="`${fastIsr}`" />
    <ConfigInstruction purpose="INITIALIZE" value="NVIC_ClearPendingIRQ(`${getParamValue(makeId(&quot;seq1&quot;, &quot;irqn&quot;))}`);" include="`${schedCbEn}`" />
    <ConfigInstruction purpose="INITIALIZE" value="NVIC_EnableIRQ(`${getParamValue(makeId(&quot;seq0&quot;, &quot;irqn&quot;))}`);" include="`${fastIsr}`" />
    <ConfigInstruction purpose="INITIALIZE" value="NVIC_EnableIRQ(`${getParamValue(makeId(&quot;seq1&quot;, &quot;irqn&quot;))}`);" include="`${schedCbEn}`" />
  </ConfigFirmware>

  <!-- Modulator -->
  <PersonalityTemplate id="hPwm$idx" valid="`${(getParamValue(&quot;buck&quot;, &quot;phaseNum&quot;) &gt; $idx) &amp;&amp; (getParamValue(&quot;buck&quot;, &quot;mod&quot;) eq &quot;VOLTAGE&quot;) &amp;&amp; getParamValue(&quot;buck&quot;, &quot;hiRes&quot;)}`" repeatCount="4">
    <FittingRules>
      <MappingRules>
        <IpBlock name="mxs40tcpwm" />
        <Resource name="tcpwm\[0\]\.group\[0\]\.cnt\[[0-9]+\]"/>
      </MappingRules>
    </FittingRules>
    <Parameters>
      <ParamBool id="debug" name="debug" group="Internal" default="false" visible="false" editable="false" desc="" />
      <ParamString id="definePrefix" name="Define prefix" group="Internal" default="`${&quot;TCPWM&quot; . getInstNumber(&quot;tcpwm&quot;) . &quot;_GRP&quot; . getInstNumber(&quot;group&quot;) . &quot;_CNT&quot; . getInstNumber(&quot;cnt&quot;)}`" visible="`${debug}`" editable="false" desc="" />
    </Parameters>
    <ConfigFirmware>
      <ConfigInclude value="cy_tcpwm_pwm.h" include="true" />
      <ConfigInclude value="cycfg_routing.h" include="true" />
      <ConfigDefine name="`${INST_NAME}`_HW" value="TCPWM`${pwmInst}`" public="true" include="true" />
      <ConfigDefine name="`${INST_NAME}`_NUM" value="`${cntInst}`UL" public="true" include="true" />
      <ConfigStruct name="`${INST_NAME}`_config" type="cy_stc_tcpwm_pwm_config_t" const="`${getParamValue(&quot;buck&quot;, &quot;inFlash&quot;)}`" public="true"  include="true" >
        <Member name="pwmMode" value="CY_TCPWM_PWM_MODE_DEADTIME" />
        <Member name="clockPrescaler" value="CY_TCPWM_PWM_PRESCALER_DIVBY_1" />
        <Member name="pwmAlignment" value="CY_TCPWM_PWM_LEFT_ALIGN" />
        <Member name="deadTimeClocks" value="`${getParamValue(&quot;buck&quot;, &quot;rDeadCy&quot;) * getParamValue(&quot;buck&quot;, &quot;hiResK&quot;)}`U" />
        <Member name="runMode" value="CY_TCPWM_PWM_CONTINUOUS" />
        <Member name="period0" value="`${getParamValue(&quot;buck&quot;, &quot;pwmPeriod&quot;) - getParamValue(&quot;buck&quot;, &quot;hiResK&quot;)}`U" />
        <Member name="period1" value="0U" />
        <Member name="enablePeriodSwap" value="false" />
        <Member name="compare0" value="0U" />
        <Member name="compare1" value="0U" />
        <Member name="enableCompareSwap" value="true" />
        <Member name="interruptSources" value="CY_TCPWM_INT_NONE" />
        <Member name="invertPWMOut" value="`${getParamValue(&quot;buck&quot;, &quot;hiInv&quot;) ? &quot;CY_TCPWM_PWM_INVERT_ENABLE&quot; : &quot;CY_TCPWM_PWM_INVERT_DISABLE&quot;}`" />
        <Member name="invertPWMOutN" value="`${getParamValue(&quot;buck&quot;, &quot;loInv&quot;) ? &quot;CY_TCPWM_PWM_INVERT_ENABLE&quot; : &quot;CY_TCPWM_PWM_INVERT_DISABLE&quot;}`" />
        <Member name="killMode" value="CY_TCPWM_PWM_STOP_ON_KILL" />
        <Member name="swapInputMode" value="CY_TCPWM_INPUT_LEVEL" />
        <Member name="swapInput" value="CY_TCPWM_INPUT_1" />
        <Member name="reloadInputMode" value="CY_TCPWM_INPUT_LEVEL" />
        <Member name="reloadInput" value="CY_TCPWM_INPUT_0" />
        <Member name="startInputMode" value="CY_TCPWM_INPUT_RISINGEDGE" />
        <Member name="startInput" value="`${definePrefix}`_START_VALUE" />
        <Member name="killInputMode" value="CY_TCPWM_INPUT_RISINGEDGE" />
        <Member name="killInput" value="`${getParamValue(&quot;buck&quot;, &quot;prot&quot;) ? definePrefix . &quot;_STOP_VALUE&quot; : &quot;CY_TCPWM_INPUT_0&quot;}`" />
        <Member name="countInputMode" value="CY_TCPWM_INPUT_LEVEL" />
        <Member name="countInput" value="CY_TCPWM_INPUT_1" />
        <Member name="swapOverflowUnderflow" value="false" />
        <Member name="immediateKill" value="true" />
        <Member name="tapsEnabled" value="0U" />
        <Member name="compare2" value="0U" />
        <Member name="compare3" value="0U" />
        <Member name="enableCompare1Swap" value="false" />
        <Member name="compare0MatchUp" value="true" />
        <Member name="compare0MatchDown" value="false" />
        <Member name="compare1MatchUp" value="true" />
        <Member name="compare1MatchDown" value="false" />
        <Member name="kill1InputMode" value="CY_TCPWM_INPUT_LEVEL" />
        <Member name="kill1Input" value="CY_TCPWM_INPUT_0" />
        <Member name="pwmOnDisable" value="`${getParamValue(&quot;buck&quot;, &quot;pasOut&quot;)}`" />
        <Member name="trigger0Event" value="CY_TCPWM_CNT_TRIGGER_ON_DISABLED" />
        <Member name="trigger1Event" value="CY_TCPWM_CNT_TRIGGER_ON_TC" />
        <Member name="reloadLineSelect" value="false" />
        <Member name="line_out_sel" value="CY_TCPWM_OUTPUT_PWM_SIGNAL" />
        <Member name="linecompl_out_sel" value="CY_TCPWM_OUTPUT_INVERTED_PWM_SIGNAL" />
        <Member name="line_out_sel_buff" value="CY_TCPWM_OUTPUT_PWM_SIGNAL" />
        <Member name="linecompl_out_sel_buff" value="CY_TCPWM_OUTPUT_INVERTED_PWM_SIGNAL" />
        <Member name="deadTimeClocks_linecompl_out" value="`${getParamValue(&quot;buck&quot;, &quot;fDeadCy&quot;) * getParamValue(&quot;buck&quot;, &quot;hiResK&quot;)}`U" />
        <Member name="hrpwm_enable" value="true" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="hrpwm_input_freq" value="CY_TCPWM_HRPWM_FREQ_200MHZ_OR_240MHZ" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="kill_line_polarity" value="CY_TCPWM_LINECMPOUT_IS_HIGH_LINEOUT_IS_LOW" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="deadTimeClocksBuff" value="`${getParamValue(&quot;buck&quot;, &quot;rDeadCy&quot;) * getParamValue(&quot;buck&quot;, &quot;hiResK&quot;)}`U" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="deadTimeClocksBuff_linecompl_out" value="`${getParamValue(&quot;buck&quot;, &quot;fDeadCy&quot;) * getParamValue(&quot;buck&quot;, &quot;hiResK&quot;)}`U" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="buffer_swap_enable" value="false" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="glitch_filter_enable" value="false" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="gf_depth" value="CY_GLITCH_FILTER_DEPTH_SUPPORT_VALUE_0" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="dithering_mode" value="CY_TCPWM_DITHERING_DISABLE" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="period_dithering_value" value="0U" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="duty_dithering_value" value="0U" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="limiter" value="CY_TCPWM_DITHERING_LIMITER_7" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="pwm_tc_sync_kill_dt" value="false" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="pwm_sync_kill_dt" value="false" guard="defined (CY_IP_MXS40TCPWM)" />
      </ConfigStruct>
    </ConfigFirmware>
  </PersonalityTemplate>

  <PersonalityTemplate id="lPwm$idx" valid="`${(getParamValue(&quot;buck&quot;, &quot;phaseNum&quot;) &gt; $idx) &amp;&amp; (getParamValue(&quot;buck&quot;, &quot;mod&quot;) eq &quot;VOLTAGE&quot;) &amp;&amp; !getParamValue(&quot;buck&quot;, &quot;hiRes&quot;)}`" repeatCount="4">
    <FittingRules>
      <MappingRules>
        <IpBlock name="mxs40tcpwm" />
        <Resource name="tcpwm\.group\.cnt"/>
      </MappingRules>
    </FittingRules>
    <Parameters>
      <ParamBool id="debug" name="debug" group="Internal" default="false" visible="false" editable="false" desc="" />
      <ParamString id="definePrefix" name="Define prefix" group="Internal" default="`${&quot;TCPWM&quot; . getInstNumber(&quot;tcpwm&quot;) . &quot;_GRP&quot; . getInstNumber(&quot;group&quot;) . &quot;_CNT&quot; . getInstNumber(&quot;cnt&quot;)}`" visible="`${debug}`" editable="false" desc="" />
    </Parameters>
    <ConfigFirmware>
      <ConfigInclude value="cy_tcpwm_pwm.h" include="true" />
      <ConfigInclude value="cycfg_routing.h" include="true" />
      <ConfigDefine name="`${INST_NAME}`_HW" value="TCPWM`${pwmInst}`" public="true" include="true" />
      <ConfigDefine name="`${INST_NAME}`_NUM" value="`${cntInst}`UL" public="true" include="true" />
      <ConfigStruct name="`${INST_NAME}`_config" type="cy_stc_tcpwm_pwm_config_t" const="`${getParamValue(&quot;buck&quot;, &quot;inFlash&quot;)}`" public="true"  include="true" >
        <Member name="pwmMode" value="CY_TCPWM_PWM_MODE_DEADTIME" />
        <Member name="clockPrescaler" value="CY_TCPWM_PWM_PRESCALER_DIVBY_1" />
        <Member name="pwmAlignment" value="CY_TCPWM_PWM_LEFT_ALIGN" />
        <Member name="deadTimeClocks" value="`${getParamValue(&quot;buck&quot;, &quot;rDeadCy&quot;)}`U" />
        <Member name="runMode" value="CY_TCPWM_PWM_CONTINUOUS" />
        <Member name="period0" value="`${getParamValue(&quot;buck&quot;, &quot;pwmPeriod&quot;) - getParamValue(&quot;buck&quot;, &quot;hiResK&quot;)}`U" />
        <Member name="period1" value="0U" />
        <Member name="enablePeriodSwap" value="false" />
        <Member name="compare0" value="`${getParamValue(&quot;buck&quot;, &quot;pccm&quot;) ? getParamValue(&quot;buck&quot;, &quot;pwmCompareCy&quot;) : 0}`U" />
        <Member name="compare1" value="0U" />
        <Member name="enableCompareSwap" value="`${!getParamValue(&quot;buck&quot;, &quot;pccm&quot;)}`" />
        <Member name="interruptSources" value="CY_TCPWM_INT_NONE" />
        <Member name="invertPWMOut" value="`${getParamValue(&quot;buck&quot;, &quot;hiInv&quot;) ? &quot;CY_TCPWM_PWM_INVERT_ENABLE&quot; : &quot;CY_TCPWM_PWM_INVERT_DISABLE&quot;}`" />
        <Member name="invertPWMOutN" value="`${getParamValue(&quot;buck&quot;, &quot;loInv&quot;) ? &quot;CY_TCPWM_PWM_INVERT_ENABLE&quot; : &quot;CY_TCPWM_PWM_INVERT_DISABLE&quot;}`" />
        <Member name="killMode" value="`${getParamValue(&quot;buck&quot;, &quot;pccm&quot;) ? &quot;CY_TCPWM_PWM_SYNCH_KILL&quot; : &quot;CY_TCPWM_PWM_STOP_ON_KILL&quot;}`" />
        <Member name="swapInputMode" value="CY_TCPWM_INPUT_LEVEL" />
        <Member name="swapInput" value="`${getParamValue(&quot;buck&quot;, &quot;pccm&quot;) ? &quot;CY_TCPWM_INPUT_0&quot; : &quot;CY_TCPWM_INPUT_1&quot;}`" />
        <Member name="reloadInputMode" value="CY_TCPWM_INPUT_RISINGEDGE" />
        <Member name="reloadInput" value="CY_TCPWM_INPUT_0" />
        <Member name="startInputMode" value="CY_TCPWM_INPUT_RISINGEDGE" />
        <Member name="startInput" value="`${definePrefix}`_START_VALUE" />
        <Member name="killInputMode" value="CY_TCPWM_INPUT_RISINGEDGE" />
        <Member name="killInput" value="`${getParamValue(&quot;buck&quot;, &quot;pccm&quot;) ? definePrefix . &quot;_STOP_VALUE&quot; : &quot;CY_TCPWM_INPUT_0&quot;}`" />
        <Member name="countInputMode" value="CY_TCPWM_INPUT_LEVEL" />
        <Member name="countInput" value="CY_TCPWM_INPUT_1" />
        <Member name="swapOverflowUnderflow" value="false" />
        <Member name="immediateKill" value="true" />
        <Member name="tapsEnabled" value="0U" />
        <Member name="compare2" value="0U" />
        <Member name="compare3" value="0U" />
        <Member name="enableCompare1Swap" value="false" />
        <Member name="compare0MatchUp" value="true" />
        <Member name="compare0MatchDown" value="false" />
        <Member name="compare1MatchUp" value="true" />
        <Member name="compare1MatchDown" value="false" />
        <Member name="kill1InputMode" value="`${getParamValue(&quot;buck&quot;, &quot;pccm&quot;) ? &quot;CY_TCPWM_INPUT_RISINGEDGE&quot; : &quot;CY_TCPWM_INPUT_LEVEL&quot;}`" />
        <Member name="kill1Input" value="`${getParamValue(&quot;buck&quot;, &quot;prot&quot;) ? definePrefix . &quot;_CAPTURE1_VALUE&quot; : &quot;CY_TCPWM_INPUT_0&quot;}`" />
        <Member name="pwmOnDisable" value="`${getParamValue(&quot;buck&quot;, &quot;pasOut&quot;)}`" />
        <Member name="trigger0Event" value="CY_TCPWM_CNT_TRIGGER_ON_DISABLED" />
        <Member name="trigger1Event" value="CY_TCPWM_CNT_TRIGGER_ON_TC" />
        <Member name="reloadLineSelect" value="false" />
        <Member name="line_out_sel" value="CY_TCPWM_OUTPUT_PWM_SIGNAL" />
        <Member name="linecompl_out_sel" value="CY_TCPWM_OUTPUT_INVERTED_PWM_SIGNAL" />
        <Member name="line_out_sel_buff" value="CY_TCPWM_OUTPUT_PWM_SIGNAL" />
        <Member name="linecompl_out_sel_buff" value="CY_TCPWM_OUTPUT_INVERTED_PWM_SIGNAL" />
        <Member name="deadTimeClocks_linecompl_out" value="`${getParamValue(&quot;buck&quot;, &quot;fDeadCy&quot;)}`U" />
        <Member name="hrpwm_enable" value="false" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="hrpwm_input_freq" value="CY_TCPWM_HRPWM_FREQ_80MHZ_OR_100MHZ" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="kill_line_polarity" value="CY_TCPWM_LINECMPOUT_IS_HIGH_LINEOUT_IS_LOW" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="deadTimeClocksBuff" value="`${getParamValue(&quot;buck&quot;, &quot;pccm&quot;) ? 0 : getParamValue(&quot;buck&quot;, &quot;rDeadCy&quot;)}`U" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="deadTimeClocksBuff_linecompl_out" value="`${getParamValue(&quot;buck&quot;, &quot;pccm&quot;) ? 0 : getParamValue(&quot;buck&quot;, &quot;fDeadCy&quot;)}`U" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="buffer_swap_enable" value="false" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="glitch_filter_enable" value="false" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="gf_depth" value="CY_GLITCH_FILTER_DEPTH_SUPPORT_VALUE_0" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="dithering_mode" value="CY_TCPWM_DITHERING_DISABLE" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="period_dithering_value" value="0U" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="duty_dithering_value" value="0U" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="limiter" value="CY_TCPWM_DITHERING_LIMITER_7" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="pwm_tc_sync_kill_dt" value="false" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="pwm_sync_kill_dt" value="`${getParamValue(&quot;buck&quot;, &quot;pccm&quot;)}`" guard="defined (CY_IP_MXS40TCPWM)" />
      </ConfigStruct>
    </ConfigFirmware>
  </PersonalityTemplate>

  <PersonalityTemplate id="cPwm$idx" valid="`${(getParamValue(&quot;buck&quot;, &quot;phaseNum&quot;) &gt; $idx) &amp;&amp; (getParamValue(&quot;buck&quot;, &quot;mod&quot;) eq &quot;PEAK_CURRENT&quot;)}`" repeatCount="4">
    <FittingRules>
      <MappingRules>
        <IpBlock name="mxs40tcpwm" />
        <Resource name="tcpwm\.group\.cnt"/>
      </MappingRules>
    </FittingRules>
    <Parameters>
      <ParamBool id="debug" name="debug" group="Internal" default="false" visible="false" editable="false" desc="" />
      <ParamString id="definePrefix" name="Define prefix" group="Internal" default="`${&quot;TCPWM&quot; . getInstNumber(&quot;tcpwm&quot;) . &quot;_GRP&quot; . getInstNumber(&quot;group&quot;) . &quot;_CNT&quot; . getInstNumber(&quot;cnt&quot;)}`" visible="`${debug}`" editable="false" desc="" />
    </Parameters>
    <ConfigFirmware>
      <ConfigInclude value="cy_tcpwm_pwm.h" include="true" />
      <ConfigInclude value="cycfg_routing.h" include="true" />
      <ConfigDefine name="`${INST_NAME}`_HW" value="TCPWM`${pwmInst}`" public="true" include="true" />
      <ConfigDefine name="`${INST_NAME}`_NUM" value="`${cntInst}`UL" public="true" include="true" />
      <!-- <ConfigDefine name="`${INST_NAME}`_CFG_NAME" value="`${getParamValue(&quot;buck&quot;, &quot;pwm$idxCfgName&quot;)}`" public="true" include="true" /> -->
      <ConfigStruct name="`${INST_NAME}`_config" type="cy_stc_tcpwm_pwm_config_t" const="`${getParamValue(&quot;buck&quot;, &quot;inFlash&quot;)}`" public="true"  include="true" >
        <Member name="pwmMode" value="CY_TCPWM_PWM_MODE_DEADTIME" />
        <Member name="clockPrescaler" value="CY_TCPWM_PWM_PRESCALER_DIVBY_1" />
        <Member name="pwmAlignment" value="CY_TCPWM_PWM_LEFT_ALIGN" />
        <Member name="deadTimeClocks" value="`${getParamValue(&quot;buck&quot;, &quot;rDeadCy&quot;)}`U" />
        <Member name="runMode" value="CY_TCPWM_PWM_CONTINUOUS" />
        <Member name="period0" value="`${getParamValue(&quot;buck&quot;, &quot;pwmPeriod&quot;) - getParamValue(&quot;buck&quot;, &quot;hiResK&quot;)}`U" />
        <Member name="period1" value="0U" />
        <Member name="enablePeriodSwap" value="false" />
        <Member name="compare0" value="`${getParamValue(&quot;buck&quot;, &quot;pccm&quot;) ? getParamValue(&quot;buck&quot;, &quot;pwmCompareCy&quot;) : 0}`U" />
        <Member name="compare1" value="0U" />
        <Member name="enableCompareSwap" value="`${!getParamValue(&quot;buck&quot;, &quot;pccm&quot;)}`" />
        <Member name="interruptSources" value="CY_TCPWM_INT_NONE" />
        <Member name="invertPWMOut" value="`${getParamValue(&quot;buck&quot;, &quot;hiInv&quot;) ? &quot;CY_TCPWM_PWM_INVERT_ENABLE&quot; : &quot;CY_TCPWM_PWM_INVERT_DISABLE&quot;}`" />
        <Member name="invertPWMOutN" value="`${getParamValue(&quot;buck&quot;, &quot;loInv&quot;) ? &quot;CY_TCPWM_PWM_INVERT_ENABLE&quot; : &quot;CY_TCPWM_PWM_INVERT_DISABLE&quot;}`" />
        <Member name="killMode" value="`${getParamValue(&quot;buck&quot;, &quot;pccm&quot;) ? &quot;CY_TCPWM_PWM_SYNCH_KILL&quot; : &quot;CY_TCPWM_PWM_STOP_ON_KILL&quot;}`" />
        <Member name="swapInputMode" value="CY_TCPWM_INPUT_LEVEL" />
        <Member name="swapInput" value="`${getParamValue(&quot;buck&quot;, &quot;pccm&quot;) ? &quot;CY_TCPWM_INPUT_0&quot; : &quot;CY_TCPWM_INPUT_1&quot;}`" />
        <Member name="reloadInputMode" value="CY_TCPWM_INPUT_RISINGEDGE" />
        <Member name="reloadInput" value="CY_TCPWM_INPUT_0" />
        <Member name="startInputMode" value="CY_TCPWM_INPUT_RISINGEDGE" />
        <Member name="startInput" value="`${definePrefix}`_START_VALUE" />
        <Member name="killInputMode" value="CY_TCPWM_INPUT_RISINGEDGE" />
        <Member name="killInput" value="`${getParamValue(&quot;buck&quot;, &quot;pccm&quot;) ? definePrefix . &quot;_STOP_VALUE&quot; : &quot;CY_TCPWM_INPUT_0&quot;}`" />
        <Member name="countInputMode" value="CY_TCPWM_INPUT_LEVEL" />
        <Member name="countInput" value="CY_TCPWM_INPUT_1" />
        <Member name="swapOverflowUnderflow" value="false" />
        <Member name="immediateKill" value="true" />
        <Member name="tapsEnabled" value="0U" />
        <Member name="compare2" value="0U" />
        <Member name="compare3" value="0U" />
        <Member name="enableCompare1Swap" value="false" />
        <Member name="compare0MatchUp" value="true" />
        <Member name="compare0MatchDown" value="false" />
        <Member name="compare1MatchUp" value="true" />
        <Member name="compare1MatchDown" value="false" />
        <Member name="kill1InputMode" value="`${getParamValue(&quot;buck&quot;, &quot;pccm&quot;) ? &quot;CY_TCPWM_INPUT_RISINGEDGE&quot; : &quot;CY_TCPWM_INPUT_LEVEL&quot;}`" />
        <Member name="kill1Input" value="`${getParamValue(&quot;buck&quot;, &quot;prot&quot;) ? definePrefix . &quot;_CAPTURE1_VALUE&quot; : &quot;CY_TCPWM_INPUT_0&quot;}`" />
        <Member name="pwmOnDisable" value="`${getParamValue(&quot;buck&quot;, &quot;pasOut&quot;)}`" />
        <Member name="trigger0Event" value="CY_TCPWM_CNT_TRIGGER_ON_DISABLED" />
        <Member name="trigger1Event" value="CY_TCPWM_CNT_TRIGGER_ON_TC" />
        <Member name="reloadLineSelect" value="false" />
        <Member name="line_out_sel" value="CY_TCPWM_OUTPUT_PWM_SIGNAL" />
        <Member name="linecompl_out_sel" value="CY_TCPWM_OUTPUT_INVERTED_PWM_SIGNAL" />
        <Member name="line_out_sel_buff" value="CY_TCPWM_OUTPUT_PWM_SIGNAL" />
        <Member name="linecompl_out_sel_buff" value="CY_TCPWM_OUTPUT_INVERTED_PWM_SIGNAL" />
        <Member name="deadTimeClocks_linecompl_out" value="`${getParamValue(&quot;buck&quot;, &quot;fDeadCy&quot;)}`U" />
        <Member name="hrpwm_enable" value="false" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="hrpwm_input_freq" value="CY_TCPWM_HRPWM_FREQ_80MHZ_OR_100MHZ" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="kill_line_polarity" value="CY_TCPWM_LINECMPOUT_IS_HIGH_LINEOUT_IS_LOW" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="deadTimeClocksBuff" value="`${getParamValue(&quot;buck&quot;, &quot;pccm&quot;) ? 0 : getParamValue(&quot;buck&quot;, &quot;rDeadCy&quot;)}`U" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="deadTimeClocksBuff_linecompl_out" value="`${getParamValue(&quot;buck&quot;, &quot;pccm&quot;) ? 0 : getParamValue(&quot;buck&quot;, &quot;fDeadCy&quot;)}`U" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="buffer_swap_enable" value="false" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="glitch_filter_enable" value="false" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="gf_depth" value="CY_GLITCH_FILTER_DEPTH_SUPPORT_VALUE_0" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="dithering_mode" value="CY_TCPWM_DITHERING_DISABLE" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="period_dithering_value" value="0U" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="duty_dithering_value" value="0U" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="limiter" value="CY_TCPWM_DITHERING_LIMITER_7" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="pwm_tc_sync_kill_dt" value="false" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="pwm_sync_kill_dt" value="`${getParamValue(&quot;buck&quot;, &quot;pccm&quot;)}`" guard="defined (CY_IP_MXS40TCPWM)" />
      </ConfigStruct>
    </ConfigFirmware>
  </PersonalityTemplate>

  <PersonalityTemplate id="bPwm$idx" valid="`${(getParamValue(&quot;buck&quot;, &quot;phaseNum&quot;) &gt; $idx) &amp;&amp; (getParamValue(&quot;buck&quot;, &quot;mod&quot;) eq &quot;PEAK_CURRENT&quot;)}`" repeatCount="4">
    <FittingRules>
      <MappingRules>
        <IpBlock name="mxs40tcpwm" />
        <Resource name="tcpwm\[0\]\.group\[[1-9]\]\.cnt\[[0-9]+\]"/>
      </MappingRules>
    </FittingRules>
    <Parameters>
      <ParamBool id="debug" name="debug" group="Internal" default="false" visible="false" editable="false" desc="" />
      <ParamString id="definePrefix" name="Define prefix" group="Internal" default="`${&quot;TCPWM&quot; . getInstNumber(&quot;tcpwm&quot;) . &quot;_GRP&quot; . getInstNumber(&quot;group&quot;) . &quot;_CNT&quot; . getInstNumber(&quot;cnt&quot;)}`" visible="`${debug}`" editable="false" desc="" />
    </Parameters>
    <ConfigFirmware>
      <ConfigDefine name="`${INST_NAME}`_HW" value="TCPWM`${pwmInst}`" public="true" include="true" />
      <ConfigDefine name="`${INST_NAME}`_NUM" value="`${cntInst}`UL" public="true" include="true" />
      <ConfigStruct name="`${INST_NAME}`_config" type="cy_stc_tcpwm_pwm_config_t" const="`${getParamValue(&quot;buck&quot;, &quot;inFlash&quot;)}`" public="true"  include="true" >
        <Member name="pwmMode" value="CY_TCPWM_PWM_MODE_PWM" />
        <Member name="clockPrescaler" value="CY_TCPWM_PWM_PRESCALER_DIVBY_1" />
        <Member name="pwmAlignment" value="CY_TCPWM_PWM_LEFT_ALIGN" />
        <Member name="deadTimeClocks" value="0U" />
        <Member name="runMode" value="CY_TCPWM_PWM_CONTINUOUS" />
        <Member name="period0" value="`${getParamValue(&quot;buck&quot;, &quot;pwmPeriod&quot;) - 1}`U" />
        <Member name="period1" value="0U" />
        <Member name="enablePeriodSwap" value="false" />
        <Member name="compare0" value="`${getParamValue(&quot;buck&quot;, &quot;csgBlankTime&quot;) * getParamValue(&quot;buck&quot;, &quot;clkFreq&quot;) / 1000000000 + getParamValue(&quot;buck&quot;, &quot;rDeadCy&quot;)}`U" />
        <Member name="compare1" value="0U" />
        <Member name="enableCompareSwap" value="false" />
        <Member name="interruptSources" value="CY_TCPWM_INT_NONE" />
        <Member name="invertPWMOut" value="CY_TCPWM_PWM_INVERT_DISABLE" />
        <Member name="invertPWMOutN" value="CY_TCPWM_PWM_INVERT_DISABLE" />
        <Member name="killMode" value="CY_TCPWM_PWM_STOP_ON_KILL" />
        <Member name="swapInputMode" value="CY_TCPWM_INPUT_RISINGEDGE" />
        <Member name="swapInput" value="CY_TCPWM_INPUT_0" />
        <Member name="reloadInputMode" value="CY_TCPWM_INPUT_RISINGEDGE" />
        <Member name="reloadInput" value="CY_TCPWM_INPUT_0" />
        <Member name="startInputMode" value="CY_TCPWM_INPUT_RISINGEDGE" />
        <Member name="startInput" value="`${definePrefix}`_START_VALUE" />
        <Member name="killInputMode" value="CY_TCPWM_INPUT_RISINGEDGE" />
        <Member name="killInput" value="`${getParamValue(&quot;buck&quot;, &quot;prot&quot;) ? definePrefix . &quot;_STOP_VALUE&quot; : &quot;CY_TCPWM_INPUT_0&quot;}`" />
        <Member name="countInputMode" value="CY_TCPWM_INPUT_LEVEL" />
        <Member name="countInput" value="CY_TCPWM_INPUT_1" />
        <Member name="swapOverflowUnderflow" value="false" />
        <Member name="immediateKill" value="true" />
        <Member name="tapsEnabled" value="0U" />
        <Member name="compare2" value="0U" />
        <Member name="compare3" value="0U" />
        <Member name="enableCompare1Swap" value="false" />
        <Member name="compare0MatchUp" value="true" />
        <Member name="compare0MatchDown" value="false" />
        <Member name="compare1MatchUp" value="true" />
        <Member name="compare1MatchDown" value="false" />
        <Member name="kill1InputMode" value="CY_TCPWM_INPUT_RISINGEDGE" />
        <Member name="kill1Input" value="CY_TCPWM_INPUT_0" />
        <Member name="pwmOnDisable" value="CY_TCPWM_PWM_OUTPUT_LOW" />
        <Member name="trigger0Event" value="CY_TCPWM_CNT_TRIGGER_ON_DISABLED" />
        <Member name="trigger1Event" value="CY_TCPWM_CNT_TRIGGER_ON_LINE_OUT" />
        <Member name="reloadLineSelect" value="false" />
        <Member name="line_out_sel" value="CY_TCPWM_OUTPUT_PWM_SIGNAL" />
        <Member name="linecompl_out_sel" value="CY_TCPWM_OUTPUT_INVERTED_PWM_SIGNAL" />
        <Member name="line_out_sel_buff" value="CY_TCPWM_OUTPUT_PWM_SIGNAL" />
        <Member name="linecompl_out_sel_buff" value="CY_TCPWM_OUTPUT_INVERTED_PWM_SIGNAL" />
        <Member name="deadTimeClocks_linecompl_out" value="0U" />
        <Member name="hrpwm_enable" value="false" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="hrpwm_input_freq" value="CY_TCPWM_HRPWM_FREQ_80MHZ_OR_100MHZ" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="kill_line_polarity" value="CY_TCPWM_LINEOUT_AND_LINECMPOUT_IS_LOW" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="deadTimeClocksBuff" value="0U" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="deadTimeClocksBuff_linecompl_out" value="0U" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="buffer_swap_enable" value="false" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="glitch_filter_enable" value="false" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="gf_depth" value="CY_GLITCH_FILTER_DEPTH_SUPPORT_VALUE_0" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="dithering_mode" value="CY_TCPWM_DITHERING_DISABLE" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="period_dithering_value" value="0U" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="duty_dithering_value" value="0U" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="limiter" value="CY_TCPWM_DITHERING_LIMITER_7" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="pwm_tc_sync_kill_dt" value="false" guard="defined (CY_IP_MXS40TCPWM)" />
        <Member name="pwm_sync_kill_dt" value="false" guard="defined (CY_IP_MXS40TCPWM)" />
      </ConfigStruct>
    </ConfigFirmware>
  </PersonalityTemplate>

  <PersonalityTemplate id="csg$idx" valid="`${(getParamValue(&quot;buck&quot;, &quot;phaseNum&quot;) &gt; $idx) &amp;&amp; (getParamValue(&quot;buck&quot;, &quot;mod&quot;) eq &quot;PEAK_CURRENT&quot;)}`" repeatCount="4">
    <FittingRules>
      <MappingRules>
        <IpBlock name="mxs40mcpass" />
        <Resource name="pass\.csg\.slice"/>
      </MappingRules>
    </FittingRules>
    <ExposedMembers>
      <ExposedMember key="cfgName" paramId="cfgName" />
      <ExposedMember key="instName" paramId="instName" />
    </ExposedMembers>
    <Parameters>
      <ParamString id="cfgName" name="cfgName" group="Internal" default="`${INST_NAME}`_config" visible="false" editable="false" desc="" />
      <ParamString id="instName" name="instName" group="Internal" default="`${INST_NAME}`" visible="false" editable="false" desc="" />
      <ParamString id="csgRsc" name="csgRsc" group="Internal" default="pass[0].csg[0]" visible="false" editable="false" desc="" />
    </Parameters>
    <DRCs>
      <DRC type="ERROR" text="The CSG should be enabled and configured" condition="`${!isBlockUsed(csgRsc)}`" >
        <FixIt action="ENABLE_BLOCK" target="`${csgRsc}`" value="hppass_csg-1.0" valid="true" />
      </DRC>
    </DRCs>
    <ConfigFirmware>
      <ConfigDefine name="`${INST_NAME}`_SLICE_IDX" value="`${sliceInst}`U" public="true" include="true" />
      <ConfigStruct name="`${cfgName}`" type="cy_stc_hppass_slice_t" const="true" public="true" include="true">
        <ConfigStruct name="comp" type="nested" const="false" public="true" include="true">
          <Member name="pos" value="`${compIn}`" />
          <Member name="neg" value="CY_HPPASS_COMP_NEG_DAC" />
          <Member name="blank" value="CY_HPPASS_COMP_BLANK_TRIG_HI" />
          <Member name="trig" value="`${btrigSel}`" />
          <Member name="edge" value="CY_HPPASS_COMP_EDGE_DISABLED" />
          <Member name="invert" value="false" />
        </ConfigStruct>
        <ConfigStruct name="dac" type="nested" const="false" public="true" include="true">
          <Member name="start" value="`${dactrigSel}`" />
          <Member name="update" value="`${getParamValue(&quot;buck&quot;, &quot;dacBuff&quot;) ? dactrigSel : &quot;CY_HPPASS_DAC_UPDATE_PERIOD_TC&quot;}`" />
          <Member name="mode" value="`${getParamValue(&quot;buck&quot;, &quot;dacBuff&quot;) ? &quot;CY_HPPASS_DAC_MODE_BUFFERED&quot; : &quot;CY_HPPASS_DAC_MODE_SLOPE_FALLING&quot;}`" />
          <Member name="continuous" value="false" />
          <Member name="skipTrig" value="false" />
          <Member name="cascade" value="false" />
          <Member name="paramSync" value="false" />
          <Member name="stepSize" value="`${getParamValue(&quot;buck&quot;, &quot;dacBuff&quot;) ? 0 : getParamValue(&quot;buck&quot;, &quot;slopeStep&quot;)}`U" />
          <Member name="deGlitch" value="0U" />
          <Member name="valBuffA" value="`${getParamValue(&quot;buck&quot;, &quot;slopeStart&quot;)}`U" />
          <Member name="valBuffB" value="`${getParamValue(&quot;buck&quot;, &quot;dacBuff&quot;) ? 0 : getParamValue(&quot;buck&quot;, &quot;slopeStop&quot;)}`U" />
          <ConfigStruct name="period" type="nested" const="false" public="true" include="true">
            <Member name="frac" value="`${getParamValue(&quot;buck&quot;, &quot;dacBuff&quot;) ? 0 : getParamValue(&quot;buck&quot;, &quot;dacDivFrac&quot;)}`U" />
            <Member name="intg" value="`${getParamValue(&quot;buck&quot;, &quot;dacBuff&quot;) ? 1 : getParamValue(&quot;buck&quot;, &quot;dacDivIntg&quot;)}`U" />
          </ConfigStruct>
        </ConfigStruct>
      </ConfigStruct>
    </ConfigFirmware>
  </PersonalityTemplate>

  <PersonalityTemplate id="dacTrig$idx" valid="`${(getParamValue(&quot;buck&quot;, &quot;phaseNum&quot;) &gt; $idx) &amp;&amp; (0 != $idx) &amp;&amp; (getParamValue(&quot;buck&quot;, &quot;mod&quot;) eq &quot;PEAK_CURRENT&quot;)}`" repeatCount="4">
    <FittingRules>
      <MappingRules>
        <IpBlock name="mxs40mcpass" />
        <Resource name="pass\.input_trigger"/>
      </MappingRules>
    </FittingRules>
    <ExposedMembers>
      <ExposedMember key="sel" paramId="sel" />
      <ExposedMember key="mod" paramId="mod" />
    </ExposedMembers>
    <Parameters>
      <ParamString id="sel" name="sel" group="Internal" visible="false" editable="false" desc="" default="CY_HPPASS_TR_HW_A" />
      <ParamString id="mod" name="mod" group="Internal" visible="false" editable="false" desc="" default="CY_HPPASS_PULSE_ON_POS_DOUBLE_SYNC" />
    </Parameters>
  </PersonalityTemplate>

  <PersonalityTemplate id="bTrig$idx" valid="`${(getParamValue(&quot;buck&quot;, &quot;phaseNum&quot;) &gt; $idx) &amp;&amp; (getParamValue(&quot;buck&quot;, &quot;mod&quot;) eq &quot;PEAK_CURRENT&quot;)}`" repeatCount="4">
    <FittingRules>
      <MappingRules>
        <IpBlock name="mxs40mcpass" />
        <Resource name="pass\.input_trigger"/>
      </MappingRules>
    </FittingRules>
    <ExposedMembers>
      <ExposedMember key="sel" paramId="sel" />
      <ExposedMember key="mod" paramId="mod" />
    </ExposedMembers>
    <Parameters>
      <ParamString id="sel" name="sel" group="Internal" visible="false" editable="false" desc="" default="CY_HPPASS_TR_HW_A" />
      <ParamString id="mod" name="mod" group="Internal" visible="false" editable="false" desc="" default="CY_HPPASS_LEVEL_DOUBLE_SYNC" />
    </Parameters>
  </PersonalityTemplate>

  <PersonalityTemplate id="compTrig$idx" valid="`${(getParamValue(&quot;buck&quot;, &quot;phaseNum&quot;) &gt; $idx) &amp;&amp; (getParamValue(&quot;buck&quot;, &quot;mod&quot;) eq &quot;PEAK_CURRENT&quot;)}`" repeatCount="4">
    <FittingRules>
      <MappingRules>
        <IpBlock name="mxs40mcpass" />
        <Resource name="pass\.output_level_trigger"/>
      </MappingRules>
    </FittingRules>
    <ExposedMembers>
      <ExposedMember key="sync" paramId="sync" />
      <ExposedMember key="compEn" paramId="compEn" />
      <ExposedMember key="limitEn" paramId="limitEn" />
    </ExposedMembers>
    <Parameters>
      <ParamBool id="sync" name="Sync" group="Internal" default="false" visible="false" editable="false" desc="" />
      <ParamRange id="limitEn" name="limitEn" group="Internal" default="`${toHex(0)}`" min="0" max="0" resolution="1" visible="false" editable="false" desc="" />
    </Parameters>
  </PersonalityTemplate>

  <!-- ADC -->
  <PersonalityTemplate id="chan$idx" valid="`${getParamValue(&quot;buck&quot;, &quot;chanCnt&quot;) &gt; $idx}`" repeatCount="16">
    <FittingRules>
      <MappingRules>
        <IpBlock name="mxs40mcpass" />
        <Resource name="pass\.sar\.ch"/>
      </MappingRules>
    </FittingRules>
    <ExposedMembers>
      <ExposedMember key="cfgName" paramId="cfgName" />
      <ExposedMember key="diff" paramId="diff" />
      <ExposedMember key="limit" paramId="limit" />
      <ExposedMember key="fifo" paramId="fifo" />
      <ExposedMember key="firChanIdx" paramId="firChanIdx" />
    </ExposedMembers>
    <Parameters>
      <ParamBool id="debug" name="debug" group="Internal" default="false" visible="false" editable="false" desc="" />
      <ParamString id="cfgName" name="cfgName" group="Internal" default="`${INST_NAME}`_config" visible="`${debug}`" editable="false" desc="" />
      <ParamString id="sarRsc" name="sarRsc" group="Internal" default="`${&quot;pass[0].sar[0]&quot;}`" visible="`${debug}`" editable="false" desc="" />
      <ParamBool id="sarEn" name="sarEn" group="Internal" default="`${isBlockUsed(sarRsc)}`" visible="false" editable="`${debug}`" desc="" />
      <ParamRange id="inst" name="inst" group="Internal" default="`${getInstNumber(&quot;ch&quot;)}`" min="0" max="27" resolution="1" visible="`${debug}`" editable="false" desc="" />
      <ParamRange id="sampInst" name="sampInst" group="Internal" default="`${(inst &gt;= 12) ? (inst - 12)/4 : inst}`" min="0" max="11" resolution="1" visible="`${debug}`" editable="false" desc="" />
      <ParamBool id="even" name="even" group="Internal" default="`${0 == (inst % 2)}`" visible="`${debug}`" editable="false" desc="" />
      <ParamBool id="diff" name="Pseudo-Differential Enable" group="General" default="false" visible="`${even}`" editable="`${even}`" desc="Enable Pseudo-Differential Conversions." />
      <ParamString id="firChanIdx" name="firChanIdx" group="Internal" default="`${INST_NAME}`_FIR_CHAN_IDX" visible="`${debug}`" editable="false" desc="" />
      <ParamString id="rscNameLoc" name="rscNameLoc" group="Internal" default="`${getBlockDisplayName(&quot;pass[0].sar[0].ch[&quot; . inst . &quot;]&quot;, false)}`" visible="`${debug}`" editable="false" desc="" />
      <ParamString id="rscName" name="rscName" group="Internal" default="`${(rscNameLoc eq &quot;P8.2&quot;) ? &quot;P8_2&quot; : ((rscNameLoc eq &quot;P8.0&quot;) ? &quot;P8_0&quot; : rscNameLoc)}`" visible="`${debug}`" editable="false" desc="" />
      <ParamString id="limit" name="limit" group="General" default="CY_HPPASS_SAR_LIMIT_DISABLED" visible="true" editable="true" desc=""/> <!-- PLATTOOLS-12614 workaround - the HW prot feature is currently unavailable -->
    </Parameters>
    <DRCs>
      <DRC type="ERROR" text="`${sampType}` Sampler `${sampInst}` is not enabled" condition="`${!sampUsed}`" >
        <FixIt action="ENABLE_BLOCK" target="`${sampRsc}`" value="" valid="true" />
      </DRC>
    </DRCs>
    <ConfigFirmware>
      <ConfigDefine name="`${INST_NAME}`_RSLT_PTR" value="CY_HPPASS_SAR_CHAN_RSLT_PTR(`${inst}`U)" public="true" include="true" />
      <ConfigDefine name="`${firChanIdx}`" value="CY_HPPASS_FIR_CHAN_`${inst}`" public="true" include="true" />
      <ConfigDefine name="`${INST_NAME}`_CHAN_IDX" value="`${inst}`U" public="true" include="true" />
      <ConfigDefine name="`${rscName}`_CHAN_IDX" value="`${inst}`U" public="true" include="`${rscName ne INST_NAME}`" />
      <ConfigStruct name="`${cfgName}`" type="cy_stc_hppass_sar_chan_t" const="`${sarEn ? getExposedMember(sarRsc, &quot;inFlash&quot;) : false}`" public="true" include="true" >
        <Member name="diff" value="`${diff}`" />
        <Member name="sign" value="false" />
        <Member name="avg" value="CY_HPPASS_SAR_AVG_DISABLED" />
        <Member name="limit" value="`${limit}`" />
        <Member name="result" value="true" />
        <Member name="fifo" value="CY_HPPASS_FIFO_DISABLED" />
      </ConfigStruct>
    </ConfigFirmware>
  </PersonalityTemplate>

  <PersonalityTemplate id="seq0" >
    <FittingRules>
      <MappingRules>
        <IpBlock name="mxs40mcpass" />
        <Resource name="pass\.sar\.seq\.grp"/>
      </MappingRules>
    </FittingRules>
    <ExposedMembers>
      <ExposedMember key="cfgName" paramId="cfgName" />
    </ExposedMembers>
    <Parameters>
      <ParamString id="cfgName" name="cfgName" group="Internal" default="`${INST_NAME}`_config" visible="false" editable="false" desc="" />
      <ParamString id="sarRsc" name="sarRsc" group="Internal" default="`${&quot;pass[0].sar[0]&quot;}`" visible="false" editable="false" desc="" />
      <ParamBool id="sarEn" name="Is SAR Enabled" group="Internal" default="`${isBlockUsed(sarRsc)}`" visible="false" editable="false" desc="" />
    </Parameters>
    <DRCs>
      <DRC type="ERROR" text="SAR is not enabled" condition="`${!sarEn}`" >
        <FixIt action="ENABLE_BLOCK" target="`${sarRsc}`" value="" valid="true" />
      </DRC>
    </DRCs>
    <ConfigFirmware>
      <ConfigStruct name="`${cfgName}`" type="cy_stc_hppass_sar_grp_t" const="`${sarEn ? getExposedMember(sarRsc, &quot;inFlash&quot;) : false}`" public="true" include="true" >
        <Member name="dirSampMsk" value="`${toHex(dirSampMsk)}`U" />
        <Member name="muxSampMsk" value="`${toHex(muxSampMsk)}`U" />
        <ConfigArray name="muxChanIdx" type="nested" const="false" public="true" include="true" >
          <ArrayElement value="`${muxSel$idx{0}}`U" count="4" />
        </ConfigArray>
        <Member name="trig" value="`${trigSel}`" />
        <Member name="sampTime" value="CY_HPPASS_SAR_SAMP_TIME_DISABLED" />
        <Member name="priority" value="true" />
        <Member name="continuous" value="false" />
      </ConfigStruct>
    </ConfigFirmware>
  </PersonalityTemplate>

  <PersonalityTemplate id="seq1" valid="`${(getParamValue(&quot;buck&quot;, &quot;trigSrc1&quot;) eq &quot;SCHEDULED&quot;) ||
                                           (getParamValue(&quot;buck&quot;, &quot;trigSrc2&quot;) eq &quot;SCHEDULED&quot;) ||
                                           (getParamValue(&quot;buck&quot;, &quot;trigSrc3&quot;) eq &quot;SCHEDULED&quot;) ||
                                           (getParamValue(&quot;buck&quot;, &quot;trigSrc4&quot;) eq &quot;SCHEDULED&quot;) ||
                                           (getParamValue(&quot;buck&quot;, &quot;trigSrc5&quot;) eq &quot;SCHEDULED&quot;) ||
                                           (getParamValue(&quot;buck&quot;, &quot;trigSrc6&quot;) eq &quot;SCHEDULED&quot;) ||
                                           (getParamValue(&quot;buck&quot;, &quot;trigSrc7&quot;) eq &quot;SCHEDULED&quot;) ||
                                           (getParamValue(&quot;buck&quot;, &quot;trigSrc8&quot;) eq &quot;SCHEDULED&quot;) ||
                                           (getParamValue(&quot;buck&quot;, &quot;trigSrc9&quot;) eq &quot;SCHEDULED&quot;) ||
                                           (getParamValue(&quot;buck&quot;, &quot;trigSrc10&quot;) eq &quot;SCHEDULED&quot;) ||
                                           (getParamValue(&quot;buck&quot;, &quot;trigSrc11&quot;) eq &quot;SCHEDULED&quot;) ||
                                           (getParamValue(&quot;buck&quot;, &quot;trigSrc12&quot;) eq &quot;SCHEDULED&quot;) ||
                                           (getParamValue(&quot;buck&quot;, &quot;trigSrc13&quot;) eq &quot;SCHEDULED&quot;) ||
                                           (getParamValue(&quot;buck&quot;, &quot;trigSrc14&quot;) eq &quot;SCHEDULED&quot;) ||
                                           (getParamValue(&quot;buck&quot;, &quot;trigSrc15&quot;) eq &quot;SCHEDULED&quot;)}`" >
    <FittingRules>
      <MappingRules>
        <IpBlock name="mxs40mcpass" />
        <Resource name="pass\.sar\.seq\.grp"/>
      </MappingRules>
    </FittingRules>
    <ExposedMembers>
      <ExposedMember key="cfgName" paramId="cfgName" />
    </ExposedMembers>
    <Parameters>
      <ParamString id="cfgName" name="cfgName" group="Internal" default="`${INST_NAME}`_config" visible="false" editable="false" desc="" />
      <ParamString id="sarRsc" name="sarRsc" group="Internal" default="`${&quot;pass[0].sar[0]&quot;}`" visible="false" editable="false" desc="" />
      <ParamBool id="sarEn" name="Is SAR Enabled" group="Internal" default="`${isBlockUsed(sarRsc)}`" visible="false" editable="false" desc="" />
    </Parameters>
    <DRCs>
      <DRC type="ERROR" text="SAR is not enabled" condition="`${!sarEn}`" >
        <FixIt action="ENABLE_BLOCK" target="`${sarRsc}`" value="" valid="true" />
      </DRC>
    </DRCs>
    <ConfigFirmware>
      <ConfigStruct name="`${cfgName}`" type="cy_stc_hppass_sar_grp_t" const="`${sarEn ? getExposedMember(sarRsc, &quot;inFlash&quot;) : false}`" public="true" include="true" >
        <Member name="dirSampMsk" value="`${toHex(dirSampMsk)}`U" />
        <Member name="muxSampMsk" value="`${toHex(muxSampMsk)}`U" />
        <ConfigArray name="muxChanIdx" type="nested" const="false" public="true" include="true" >
          <ArrayElement value="`${muxSel$idx{0}}`U" count="4" />
        </ConfigArray>
        <Member name="trig" value="`${trigSel}`" />
        <Member name="sampTime" value="CY_HPPASS_SAR_SAMP_TIME_DISABLED" />
        <Member name="priority" value="false" />
        <Member name="continuous" value="false" />
      </ConfigStruct>
    </ConfigFirmware>
  </PersonalityTemplate>

  <PersonalityTemplate id="lim$idx" valid="`${getParamValue(&quot;buck&quot;, &quot;loProt$idx&quot;) || getParamValue(&quot;buck&quot;, &quot;hiProt$idx&quot;)}`" repeatCount="16">
    <FittingRules>
      <MappingRules>
        <IpBlock name="mxs40mcpass" />
        <Resource name="pass\.sar\.limit"/>
      </MappingRules>
    </FittingRules>
    <ExposedMembers>
      <ExposedMember key="cfgName" paramId="cfgName" />
    </ExposedMembers>
    <Parameters>
      <ParamBool id="debug" name="debug" group="debug" default="false" visible="false" editable="false" desc="" />
      <ParamString id="cfgName" name="cfgName" group="Internal" default="`${INST_NAME}`_config" visible="`${debug}`" editable="false" desc="" />
      <ParamString id="sarRsc" name="sarRsc" group="Internal" default="`${&quot;pass[0].sar[0]&quot;}`" visible="true" editable="false" desc="" />
      <ParamBool id="sarEn" name="Is SAR Enabled" group="Internal" default="`${isBlockUsed(sarRsc)}`" visible="true" editable="false" desc="" />
    </Parameters>
    <ConfigFirmware>
      <ConfigStruct name="`${cfgName}`" type="cy_stc_hppass_sar_limit_t" const="`${sarEn ? getExposedMember(sarRsc, &quot;inFlash&quot;) : false}`" public="true"  include="true">
        <Member name="cond" value="`${cond}`" />
        <Member name="low"  value="`${low}`U" />
        <Member name="high" value="`${high}`U" />
      </ConfigStruct>
    </ConfigFirmware>
  </PersonalityTemplate>

  <PersonalityTemplate id="limTrig" valid="`${getParamValue(&quot;buck&quot;, &quot;loProt0&quot;) || getParamValue(&quot;buck&quot;, &quot;hiProt0&quot;) ||
                                              getParamValue(&quot;buck&quot;, &quot;loProt1&quot;) || getParamValue(&quot;buck&quot;, &quot;hiProt1&quot;) ||
                                              getParamValue(&quot;buck&quot;, &quot;loProt2&quot;) || getParamValue(&quot;buck&quot;, &quot;hiProt2&quot;) ||
                                              getParamValue(&quot;buck&quot;, &quot;loProt3&quot;) || getParamValue(&quot;buck&quot;, &quot;hiProt3&quot;) ||
                                              getParamValue(&quot;buck&quot;, &quot;loProt4&quot;) || getParamValue(&quot;buck&quot;, &quot;hiProt4&quot;) ||
                                              getParamValue(&quot;buck&quot;, &quot;loProt5&quot;) || getParamValue(&quot;buck&quot;, &quot;hiProt5&quot;) ||
                                              getParamValue(&quot;buck&quot;, &quot;loProt6&quot;) || getParamValue(&quot;buck&quot;, &quot;hiProt6&quot;) ||
                                              getParamValue(&quot;buck&quot;, &quot;loProt7&quot;) || getParamValue(&quot;buck&quot;, &quot;hiProt7&quot;) ||
                                              getParamValue(&quot;buck&quot;, &quot;loProt8&quot;) || getParamValue(&quot;buck&quot;, &quot;hiProt8&quot;) ||
                                              getParamValue(&quot;buck&quot;, &quot;loProt9&quot;) || getParamValue(&quot;buck&quot;, &quot;hiProt9&quot;) ||
                                              getParamValue(&quot;buck&quot;, &quot;loProt10&quot;) || getParamValue(&quot;buck&quot;, &quot;hiProt10&quot;) ||
                                              getParamValue(&quot;buck&quot;, &quot;loProt11&quot;) || getParamValue(&quot;buck&quot;, &quot;hiProt11&quot;) ||
                                              getParamValue(&quot;buck&quot;, &quot;loProt12&quot;) || getParamValue(&quot;buck&quot;, &quot;hiProt12&quot;) ||
                                              getParamValue(&quot;buck&quot;, &quot;loProt13&quot;) || getParamValue(&quot;buck&quot;, &quot;hiProt13&quot;) ||
                                              getParamValue(&quot;buck&quot;, &quot;loProt14&quot;) || getParamValue(&quot;buck&quot;, &quot;hiProt14&quot;) ||
                                              getParamValue(&quot;buck&quot;, &quot;loProt15&quot;) || getParamValue(&quot;buck&quot;, &quot;hiProt15&quot;)}`" >
    <FittingRules>
      <MappingRules>
        <IpBlock name="mxs40mcpass" />
        <Resource name="pass\.output_level_trigger"/>
      </MappingRules>
    </FittingRules>
    <ExposedMembers>
      <ExposedMember key="sync" paramId="sync" />
      <ExposedMember key="compEn" paramId="compEn" />
      <ExposedMember key="limitEn" paramId="limitEn" />
    </ExposedMembers>
    <Parameters>
      <ParamBool id="sync" name="Sync" group="Internal" default="true" visible="false" editable="false" desc="" />
      <ParamRange id="compEn" name="compEn" group="Internal" default="0" min="0" max="0" resolution="1" visible="false" editable="false" desc="" />
      <ParamRange id="limitEn" name="limitEn" group="Internal" default="0" min="0" max="0" resolution="1" visible="false" editable="false" desc="" />
    </Parameters>
  </PersonalityTemplate>

  <PersonalityTemplate id="seqInTrig0">
    <FittingRules>
      <MappingRules>
        <IpBlock name="mxs40mcpass" />
        <Resource name="pass\.input_trigger"/>
      </MappingRules>
    </FittingRules>
    <ExposedMembers>
      <ExposedMember key="sel" paramId="sel" />
      <ExposedMember key="mod" paramId="mod" />
    </ExposedMembers>
    <Parameters>
      <ParamString id="sel" name="sel" group="Internal" visible="false" editable="false" desc="" default="CY_HPPASS_TR_HW_A" />
      <ParamString id="mod" name="mod" group="Internal" visible="false" editable="false" desc="" default="CY_HPPASS_PULSE_ON_POS_DOUBLE_SYNC" />
    </Parameters>
  </PersonalityTemplate>

  <PersonalityTemplate id="seqInTrig1" valid="`${(getParamValue(&quot;buck&quot;, &quot;trigSrc1&quot;) eq &quot;SCHEDULED&quot;) ||
                                                 (getParamValue(&quot;buck&quot;, &quot;trigSrc2&quot;) eq &quot;SCHEDULED&quot;) ||
                                                 (getParamValue(&quot;buck&quot;, &quot;trigSrc3&quot;) eq &quot;SCHEDULED&quot;) ||
                                                 (getParamValue(&quot;buck&quot;, &quot;trigSrc4&quot;) eq &quot;SCHEDULED&quot;) ||
                                                 (getParamValue(&quot;buck&quot;, &quot;trigSrc5&quot;) eq &quot;SCHEDULED&quot;) ||
                                                 (getParamValue(&quot;buck&quot;, &quot;trigSrc6&quot;) eq &quot;SCHEDULED&quot;) ||
                                                 (getParamValue(&quot;buck&quot;, &quot;trigSrc7&quot;) eq &quot;SCHEDULED&quot;) ||
                                                 (getParamValue(&quot;buck&quot;, &quot;trigSrc8&quot;) eq &quot;SCHEDULED&quot;) ||
                                                 (getParamValue(&quot;buck&quot;, &quot;trigSrc9&quot;) eq &quot;SCHEDULED&quot;) ||
                                                 (getParamValue(&quot;buck&quot;, &quot;trigSrc10&quot;) eq &quot;SCHEDULED&quot;) ||
                                                 (getParamValue(&quot;buck&quot;, &quot;trigSrc11&quot;) eq &quot;SCHEDULED&quot;) ||
                                                 (getParamValue(&quot;buck&quot;, &quot;trigSrc12&quot;) eq &quot;SCHEDULED&quot;) ||
                                                 (getParamValue(&quot;buck&quot;, &quot;trigSrc13&quot;) eq &quot;SCHEDULED&quot;) ||
                                                 (getParamValue(&quot;buck&quot;, &quot;trigSrc14&quot;) eq &quot;SCHEDULED&quot;) ||
                                                 (getParamValue(&quot;buck&quot;, &quot;trigSrc15&quot;) eq &quot;SCHEDULED&quot;)}`" >
    <FittingRules>
      <MappingRules>
        <IpBlock name="mxs40mcpass" />
        <Resource name="pass\.input_trigger"/>
      </MappingRules>
    </FittingRules>
    <ExposedMembers>
      <ExposedMember key="sel" paramId="sel" />
      <ExposedMember key="mod" paramId="mod" />
    </ExposedMembers>
    <Parameters>
      <ParamString id="sel" name="sel" group="Internal" visible="false" editable="false" desc="" default="CY_HPPASS_TR_FW_PULSE" />
      <ParamString id="mod" name="mod" group="Internal" visible="false" editable="false" desc="" default="CY_HPPASS_PULSE_ON_POS_DOUBLE_SYNC" />
    </Parameters>
  </PersonalityTemplate>

</PersonalityTemplate>
